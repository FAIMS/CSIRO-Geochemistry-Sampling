/*
 * GENERATED WITH FAIMS-TOOLS, SHA1: 0efee94b495fa8fd66fb45c242897ace0396feb5
 */
import android.util.Log;
import android.os.Build.MODEL;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.Callable;

// Beanshell won't let me write "\0".
final String SEP = Character.toString ((char) 0);

final String USER_MENU_PATH = "User/User/Users";
userMenuPath = USER_MENU_PATH; // Depricated. Use `USER_MENU_PATH` instead

final long SESS_START_TIME = System.currentTimeMillis();

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// The tab group which was previously displayed
String redirectTab;     // makes newTab work as expected
String username = "";
String userId   = "";
List   autoSaveGeo = null;
List   autoSaveAttrs = null;

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

if (isNull(USER_MENU_PATH)) {
  Log.w("", "`USER_MENU_PATH` is empty or null");
}

boolean isInUnitTestTime() {
  return android.os.Build.MODEL.equals("faims-mock-device");
}

void assert(boolean condition) {
  if (condition)
    return;

  String msg =
    "Test failed: " +
    "Line: " + this.namespace.getInvocationLine() +
    ": "     + this.namespace.getInvocationText() +
    ". "     + this.callstack;

  throw new Exception(msg);
}

/******************************************************************************/
/*                                STRING UTILS                                */
/******************************************************************************/

/* Works similarly to Java's String.replaceFirst, except the `needle` is a
 * string instead of a regex.
 */
String replaceFirst(String haystack, String needle, String replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

String replaceFirst(String haystack, String replacement) {
  return replaceFirst(haystack, "%s", replacement);
}

/* Replaces `placeholder` in an SQL `query` with `replacement`. The following
 * example returns the string
 * "SELECT * FROM table WHERE col1 = 'my replacement'":
 *
 * dbReplaceFirst(
 *     "SELECT * FROM table WHERE col1 = {my_placeholder}",
 *     "{my_placeholder}",
 *     "my replacement"
 * );
 */
String dbReplaceFirst(String query, String placeholder, String replacement) {
  String escapedReplacement = DatabaseUtils.sqlEscapeString(replacement);
  return replaceFirst(query, placeholder, escapedReplacement);
}

String dbReplaceFirst(String query, String replacement) {
  return dbReplaceFirst(query, "%s", replacement);
}

String translate(String s, Map m) {
  String out = "";

  for (char c : s) {
    String translation = m.get(c);

    if (isNull(translation)) out += c;
    else                     out += translation;
  }

  return out;
}

String escape(String s) {
  Map dict = new HashMap();
  dict.put('\"', "\\\"");
  dict.put('\\', "\\\\");
  dict.put('\b', "\\b" );
  dict.put('\f', "\\f" );
  dict.put('\n', "\\n" );
  dict.put('\r', "\\r" );

  return translate(s, dict);
}

String getRandomString(int len) {
  char[] chars  = (
      "abcdefghijklmnopqrstuvwxyz" +
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
      "1234567890"
  ).toCharArray();
  Random random = new Random();

  StringBuilder sb = new StringBuilder();
  for (int i = 0; i < len; i++) {
      char c = chars[random.nextInt(chars.length)];
      sb.append(c);
  }

  return sb.toString();
}

String args2str(Object[] args) {
  String str = "";
  String sep = ", ";

  for (Object o : args) {
    if (o instanceof String) str += "\"" + escape(o) + "\"" + sep;
    else                     str +=               o         + sep;
  }

  // The loop adds a superfluous trailing separator. This removes it.
  str = str.substring(0, str.length() - sep.length());

  return str;
}

// "Function to string". Makes it very slightly less painful to write callback
// functions as strings.
String fun2str(String funName, Object[] args) {
  String argsStr = args2str(args);

  String str = "{funName}({argsStr})";
  str = replaceFirst(str, "{funName}", funName);
  str = replaceFirst(str, "{argsStr}", argsStr);

  return str;
}

String fun2str(String funName, Object args) {
  return fun2str(funName, new Object[]{args});
}

/************************** FUNCTION-STRING MAPPING ***************************/
/* Allows `Callable` and `Runnable` functions to be associated with a key and */
/* called later on. This is mostly useful for de-spagehettifying calls to     */
/* `addOnEvent`, which would otherwise effectively use eval.                  */
/******************************************************************************/
Map KEY_TO_CALLABLE = new HashMap();

String callable2key(Callable c) {
  String key = getRandomString(64); // 64 ==> Odds of collision ~= 1e-115
  KEY_TO_CALLABLE.put(key, c);
  return key;
}

Callable key2callable(String key) {
  return KEY_TO_CALLABLE.get(key);
}

key2call(String key) {
  Callable c = key2callable(key);
  if (c != null)
    return c.call();
  return null;
}

String callable2callableString(Callable c) {
  return fun2str("key2call", callable2key(c));
}

/******************************************************************************/
/*                           DOCUMENT OBJECT MODEL                            */
/******************************************************************************/
String  PREVIOUSLY_DISPLAYED_TAB_GROUP = "";
String  CURRENTLY_DISPLAYED_TAB_GROUP  = "";
Map     REF_TO_TYPE                    = new HashMap();
HashSet DATA_REFS                      = new HashSet();
HashSet NO_UI_REFS                     = new HashSet();
HashSet HIER_REFS                      = new HashSet();
Map     VP_REF_TO_REF                  = new HashMap();
HashSet REFS_AS_HASH_SET               = null;
List    REFS_AS_LIST                   = null;
List    TAB_GROUPS_AS_LIST             = new ArrayList();
HashSet TAB_GROUPS_AS_HASH_SET         = null;
List    TABS_AS_LIST                   = new ArrayList();
HashSet TABS_AS_HASH_SET               = null;
HashMap ATTRIB_NAMES_NON_STANDARD      = new HashMap();

REF_TO_TYPE.put("Logo/Logo_Tab/CSIRO_Logo", "webview");
REF_TO_TYPE.put("Logo/Logo_Tab/Login", "button");
REF_TO_TYPE.put("User/User/Users", "list");
REF_TO_TYPE.put("Project/Start/Project_author", "input");
REF_TO_TYPE.put("Project/Start/Station_Deposit", "input");
REF_TO_TYPE.put("Project/Start/Project", "input");
REF_TO_TYPE.put("Project/Start/Area", "input");
REF_TO_TYPE.put("Project/Start/Sample_Type", "dropdown");
REF_TO_TYPE.put("Project/Start/Sample_Prefix", "input");
REF_TO_TYPE.put("Project/Start/Sample_Starting_ID", "input");
REF_TO_TYPE.put("Project/Start/Create_New_Sample", "button");
REF_TO_TYPE.put("Project/Start/GPS_Status", "gpsdiag");
REF_TO_TYPE.put("Project/Start/Check_for_Duplicates", "button");
REF_TO_TYPE.put("Project/Start/Duplicate_ID_List", "list");
REF_TO_TYPE.put("Project/Search/Search_Term", "input");
REF_TO_TYPE.put("Project/Search/Search_Button", "button");
REF_TO_TYPE.put("Project/Search/Entity_Types", "dropdown");
REF_TO_TYPE.put("Project/Search/Entity_List", "list");
REF_TO_TYPE.put("Project/Map/Map", "map");
REF_TO_TYPE.put("Project/Map/Center_Me_1", "button");
REF_TO_TYPE.put("Project/Map/Create_Shape", "button");
REF_TO_TYPE.put("Project/Vars/Next_Water_Sample_ID", "input");
REF_TO_TYPE.put("Project/Vars/Next_Plant_Sample_ID", "input");
REF_TO_TYPE.put("Project/Vars/Next_Soil_Sample_ID", "input");
REF_TO_TYPE.put("Project/Vars/Next_Rock_Sample_ID", "input");
REF_TO_TYPE.put("Project/Vars/New_Water_Sample", "button");
REF_TO_TYPE.put("Project/Vars/New_Plant_Sample", "button");
REF_TO_TYPE.put("Project/Vars/New_Soil_Sample", "button");
REF_TO_TYPE.put("Project/Vars/New_Rock_Sample", "button");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Water_Sample_Prefix", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Water_Sample_ID", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Timestamp_Field", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Water_Sample_author", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Station_Deposit", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Project", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Area", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Site_Name", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Observation_Type", "radio");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Location_Number", "");
REF_TO_TYPE.put("Water_Sample/Basic_Info/SRID", "dropdown");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Latitude", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Longitude", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Northing", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Easting", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Accuracy", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Elevation_Metres_above_Sea_Level", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Water_Table", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Sample_Depth", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Bottom_Of_Hole", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Samples_Collected", "checkbox");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Notes", "input");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Photos", "camera");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Photos_Button_1", "button");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Sketches", "file");
REF_TO_TYPE.put("Water_Sample/Basic_Info/Sketches_Button_1", "button");
REF_TO_TYPE.put("Water_Sample/Basic_Info/View_Sketch", "viewfiles");
REF_TO_TYPE.put("Water_Sample/Codes/Hole_Type", "dropdown");
REF_TO_TYPE.put("Water_Sample/Codes/Hole_Lining", "dropdown");
REF_TO_TYPE.put("Water_Sample/Codes/Hole_Open_Closed", "radio");
REF_TO_TYPE.put("Water_Sample/Codes/Pipes_In_Hole", "dropdown");
REF_TO_TYPE.put("Water_Sample/Codes/Hole_Angle", "dropdown");
REF_TO_TYPE.put("Water_Sample/Codes/Estimated_Angle", "input");
REF_TO_TYPE.put("Water_Sample/Codes/Outflow_Present", "radio");
REF_TO_TYPE.put("Water_Sample/Codes/Sampling_Issues", "dropdown");
REF_TO_TYPE.put("Water_Sample/pH_Eh/Temperature", "input");
REF_TO_TYPE.put("Water_Sample/pH_Eh/Conductivity", "input");
REF_TO_TYPE.put("Water_Sample/pH_Eh/Preferred_pH", "input");
REF_TO_TYPE.put("Water_Sample/pH_Eh/Preferred_pH_Time", "input");
REF_TO_TYPE.put("Water_Sample/pH_Eh/addNewpHText", "list");
REF_TO_TYPE.put("Water_Sample/pH_Eh/Preferred_Eh", "input");
REF_TO_TYPE.put("Water_Sample/pH_Eh/Preferred_Eh_Time", "input");
REF_TO_TYPE.put("Water_Sample/pH_Eh/addNewEhText", "list");
REF_TO_TYPE.put("Water_Sample/Photolog/New_Photolog", "button");
REF_TO_TYPE.put("Water_Sample/Photolog/Existing_Photologs", "list");
REF_TO_TYPE.put("Water_Sample/Hidden/Preferred_pH_Time", "input");
REF_TO_TYPE.put("Water_Sample/Hidden/Preferred_Eh_Time", "input");
REF_TO_TYPE.put("Water_Sample/Vars/Timestamp", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Plant_Sample_Prefix", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Plant_Sample_ID", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Timestamp_Field", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Plant_Sample_author", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Station_Deposit", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Project", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Area", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Site_Name", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Observation_Type", "radio");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Location_Number", "");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/SRID", "dropdown");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Latitude", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Longitude", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Northing", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Easting", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Accuracy", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Elevation_Metres_above_Sea_Level", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Plant_Species", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Plant_Height", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Plant_Width", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Soil_Description", "checkbox");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Landform_Description", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Notes", "input");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Photos", "camera");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Photos_Button_1", "button");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Sketches", "file");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/Sketches_Button_1", "button");
REF_TO_TYPE.put("Plant_Sample/Basic_Info/View_Sketch", "viewfiles");
REF_TO_TYPE.put("Plant_Sample/Photolog/New_Photolog", "button");
REF_TO_TYPE.put("Plant_Sample/Photolog/Existing_Photologs", "list");
REF_TO_TYPE.put("Plant_Sample/Vars/Timestamp", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Soil_Sample_Prefix", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Soil_Sample_ID", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Timestamp_Field", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Soil_Sample_author", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Station_Deposit", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Project", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Area", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Site_Name", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Observation_Type", "radio");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Location_Number", "");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/SRID", "dropdown");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Latitude", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Longitude", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Northing", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Easting", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Accuracy", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Elevation_Metres_above_Sea_Level", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Depth", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Colour", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Lag", "radio");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Soil_Texture", "checkbox");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Geology", "dropdown");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Drainage", "radio");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Contamination", "radio");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Regolith_Type", "dropdown");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Landform", "dropdown");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Vegetation", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Notes", "input");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Photos", "camera");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Photos_Button_1", "button");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Sketches", "file");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/Sketches_Button_1", "button");
REF_TO_TYPE.put("Soil_Sample/Basic_Info/View_Sketch", "viewfiles");
REF_TO_TYPE.put("Soil_Sample/Photolog/New_Photolog", "button");
REF_TO_TYPE.put("Soil_Sample/Photolog/Existing_Photologs", "list");
REF_TO_TYPE.put("Soil_Sample/Vars/Timestamp", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Rock_Sample_Prefix", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Rock_Sample_ID", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Timestamp_Field", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Rock_Sample_author", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Station_Deposit", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Project", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Area", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Site_Name", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Observation_Type", "radio");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Location_Number", "");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/SRID", "dropdown");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Latitude", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Longitude", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Northing", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Easting", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Accuracy", "input");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Rock_Sample/Basic_Info/Elevation_Metres_above_Sea_Level", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Bedding_Strike", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Cleavage_Strike", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Foliation_Strike", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Veins_1_Strike", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Veins_2_Strike", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Bedding_Dip", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Cleavage_Dip", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Foliation_Dip", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Veins_1_Dip", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Veins_2_Dip", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Other_Structural_Measurements", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Fold_Axis_Plunge", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Mineral_Lineation_Plunge", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Stretching_Lineation_Plunge", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Fold_Axis_Azimuth", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Mineral_Lineation_Azimuth", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Stretching_Lineation_Azimuth", "input");
REF_TO_TYPE.put("Rock_Sample/Measurements/Other_Lineation", "input");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Lithology", "dropdown");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Fineness_Inclusion_Size", "dropdown");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Grain_Size", "dropdown");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Sorting", "dropdown");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Other_Lithological_Descriptors", "input");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Stratigraphic_Unit", "input");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Large-Scale_Structure", "input");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Alteration", "input");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Veining", "input");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Notes", "input");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Photos", "camera");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Photos_Button_1", "button");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Sketches", "file");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/Sketches_Button_1", "button");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info/View_Sketch", "viewfiles");
REF_TO_TYPE.put("Rock_Sample/Photolog/New_Photolog", "button");
REF_TO_TYPE.put("Rock_Sample/Photolog/Existing_Photologs", "list");
REF_TO_TYPE.put("Rock_Sample/Vars/Timestamp", "input");
REF_TO_TYPE.put("pH/pH/pH", "input");
REF_TO_TYPE.put("pH/pH/Time", "input");
REF_TO_TYPE.put("pH/pH/Preferred", "input");
REF_TO_TYPE.put("Eh/Eh/Eh", "input");
REF_TO_TYPE.put("Eh/Eh/Time", "input");
REF_TO_TYPE.put("Eh/Eh/Preferred", "input");
REF_TO_TYPE.put("Photolog/Photolog/Photo_ID", "input");
REF_TO_TYPE.put("Photolog/Photolog/Photolog_timestamp", "input");
REF_TO_TYPE.put("Photolog/Photolog/Photo_Note", "input");
REF_TO_TYPE.put("Shape/Shape_Note/Label", "input");
REF_TO_TYPE.put("Shape/Shape_Note/Note", "input");
REF_TO_TYPE.put("Logo/Logo_Tab", "tab");
REF_TO_TYPE.put("User/User", "tab");
REF_TO_TYPE.put("Project/Start", "tab");
REF_TO_TYPE.put("Project/Search", "tab");
REF_TO_TYPE.put("Project/Map", "tab");
REF_TO_TYPE.put("Project/Vars", "tab");
REF_TO_TYPE.put("Water_Sample/Basic_Info", "tab");
REF_TO_TYPE.put("Water_Sample/Codes", "tab");
REF_TO_TYPE.put("Water_Sample/pH_Eh", "tab");
REF_TO_TYPE.put("Water_Sample/Photolog", "tab");
REF_TO_TYPE.put("Water_Sample/Hidden", "tab");
REF_TO_TYPE.put("Water_Sample/Vars", "tab");
REF_TO_TYPE.put("Plant_Sample/Basic_Info", "tab");
REF_TO_TYPE.put("Plant_Sample/Photolog", "tab");
REF_TO_TYPE.put("Plant_Sample/Vars", "tab");
REF_TO_TYPE.put("Soil_Sample/Basic_Info", "tab");
REF_TO_TYPE.put("Soil_Sample/Photolog", "tab");
REF_TO_TYPE.put("Soil_Sample/Vars", "tab");
REF_TO_TYPE.put("Rock_Sample/Basic_Info", "tab");
REF_TO_TYPE.put("Rock_Sample/Measurements", "tab");
REF_TO_TYPE.put("Rock_Sample/Lithological_Info", "tab");
REF_TO_TYPE.put("Rock_Sample/Photolog", "tab");
REF_TO_TYPE.put("Rock_Sample/Vars", "tab");
REF_TO_TYPE.put("pH/pH", "tab");
REF_TO_TYPE.put("Eh/Eh", "tab");
REF_TO_TYPE.put("Photolog/Photolog", "tab");
REF_TO_TYPE.put("Shape/Shape_Note", "tab");

DATA_REFS.add("Water_Sample/Basic_Info/Water_Sample_Prefix");
DATA_REFS.add("Water_Sample/Basic_Info/Water_Sample_ID");
DATA_REFS.add("Water_Sample/Basic_Info/Timestamp_Field");
DATA_REFS.add("Water_Sample/Basic_Info/Water_Sample_author");
DATA_REFS.add("Water_Sample/Basic_Info/Station_Deposit");
DATA_REFS.add("Water_Sample/Basic_Info/Project");
DATA_REFS.add("Water_Sample/Basic_Info/Area");
DATA_REFS.add("Water_Sample/Basic_Info/Site_Name");
DATA_REFS.add("Water_Sample/Basic_Info/Observation_Type");
DATA_REFS.add("Water_Sample/Basic_Info/Location_Number");
DATA_REFS.add("Water_Sample/Basic_Info/SRID");
DATA_REFS.add("Water_Sample/Basic_Info/Latitude");
DATA_REFS.add("Water_Sample/Basic_Info/Longitude");
DATA_REFS.add("Water_Sample/Basic_Info/Northing");
DATA_REFS.add("Water_Sample/Basic_Info/Easting");
DATA_REFS.add("Water_Sample/Basic_Info/Accuracy");
DATA_REFS.add("Water_Sample/Basic_Info/Elevation_Metres_above_Sea_Level");
DATA_REFS.add("Water_Sample/Basic_Info/Water_Table");
DATA_REFS.add("Water_Sample/Basic_Info/Sample_Depth");
DATA_REFS.add("Water_Sample/Basic_Info/Bottom_Of_Hole");
DATA_REFS.add("Water_Sample/Basic_Info/Samples_Collected");
DATA_REFS.add("Water_Sample/Basic_Info/Notes");
DATA_REFS.add("Water_Sample/Basic_Info/Photos");
DATA_REFS.add("Water_Sample/Basic_Info/Sketches");
DATA_REFS.add("Water_Sample/Codes/Hole_Type");
DATA_REFS.add("Water_Sample/Codes/Hole_Lining");
DATA_REFS.add("Water_Sample/Codes/Hole_Open_Closed");
DATA_REFS.add("Water_Sample/Codes/Pipes_In_Hole");
DATA_REFS.add("Water_Sample/Codes/Hole_Angle");
DATA_REFS.add("Water_Sample/Codes/Estimated_Angle");
DATA_REFS.add("Water_Sample/Codes/Outflow_Present");
DATA_REFS.add("Water_Sample/Codes/Sampling_Issues");
DATA_REFS.add("Water_Sample/pH_Eh/Temperature");
DATA_REFS.add("Water_Sample/pH_Eh/Conductivity");
DATA_REFS.add("Water_Sample/pH_Eh/Preferred_pH");
DATA_REFS.add("Water_Sample/pH_Eh/addNewpHText");
DATA_REFS.add("Water_Sample/pH_Eh/Preferred_Eh");
DATA_REFS.add("Water_Sample/pH_Eh/addNewEhText");
DATA_REFS.add("Water_Sample/Hidden/Preferred_pH_Time");
DATA_REFS.add("Water_Sample/Hidden/Preferred_Eh_Time");
DATA_REFS.add("Water_Sample/Vars/Timestamp");
DATA_REFS.add("Plant_Sample/Basic_Info/Plant_Sample_Prefix");
DATA_REFS.add("Plant_Sample/Basic_Info/Plant_Sample_ID");
DATA_REFS.add("Plant_Sample/Basic_Info/Timestamp_Field");
DATA_REFS.add("Plant_Sample/Basic_Info/Plant_Sample_author");
DATA_REFS.add("Plant_Sample/Basic_Info/Station_Deposit");
DATA_REFS.add("Plant_Sample/Basic_Info/Project");
DATA_REFS.add("Plant_Sample/Basic_Info/Area");
DATA_REFS.add("Plant_Sample/Basic_Info/Site_Name");
DATA_REFS.add("Plant_Sample/Basic_Info/Observation_Type");
DATA_REFS.add("Plant_Sample/Basic_Info/Location_Number");
DATA_REFS.add("Plant_Sample/Basic_Info/SRID");
DATA_REFS.add("Plant_Sample/Basic_Info/Latitude");
DATA_REFS.add("Plant_Sample/Basic_Info/Longitude");
DATA_REFS.add("Plant_Sample/Basic_Info/Northing");
DATA_REFS.add("Plant_Sample/Basic_Info/Easting");
DATA_REFS.add("Plant_Sample/Basic_Info/Accuracy");
DATA_REFS.add("Plant_Sample/Basic_Info/Elevation_Metres_above_Sea_Level");
DATA_REFS.add("Plant_Sample/Basic_Info/Plant_Species");
DATA_REFS.add("Plant_Sample/Basic_Info/Plant_Height");
DATA_REFS.add("Plant_Sample/Basic_Info/Plant_Width");
DATA_REFS.add("Plant_Sample/Basic_Info/Soil_Description");
DATA_REFS.add("Plant_Sample/Basic_Info/Landform_Description");
DATA_REFS.add("Plant_Sample/Basic_Info/Notes");
DATA_REFS.add("Plant_Sample/Basic_Info/Photos");
DATA_REFS.add("Plant_Sample/Basic_Info/Sketches");
DATA_REFS.add("Plant_Sample/Vars/Timestamp");
DATA_REFS.add("Soil_Sample/Basic_Info/Soil_Sample_Prefix");
DATA_REFS.add("Soil_Sample/Basic_Info/Soil_Sample_ID");
DATA_REFS.add("Soil_Sample/Basic_Info/Timestamp_Field");
DATA_REFS.add("Soil_Sample/Basic_Info/Soil_Sample_author");
DATA_REFS.add("Soil_Sample/Basic_Info/Station_Deposit");
DATA_REFS.add("Soil_Sample/Basic_Info/Project");
DATA_REFS.add("Soil_Sample/Basic_Info/Area");
DATA_REFS.add("Soil_Sample/Basic_Info/Site_Name");
DATA_REFS.add("Soil_Sample/Basic_Info/Observation_Type");
DATA_REFS.add("Soil_Sample/Basic_Info/Location_Number");
DATA_REFS.add("Soil_Sample/Basic_Info/SRID");
DATA_REFS.add("Soil_Sample/Basic_Info/Latitude");
DATA_REFS.add("Soil_Sample/Basic_Info/Longitude");
DATA_REFS.add("Soil_Sample/Basic_Info/Northing");
DATA_REFS.add("Soil_Sample/Basic_Info/Easting");
DATA_REFS.add("Soil_Sample/Basic_Info/Accuracy");
DATA_REFS.add("Soil_Sample/Basic_Info/Elevation_Metres_above_Sea_Level");
DATA_REFS.add("Soil_Sample/Basic_Info/Depth");
DATA_REFS.add("Soil_Sample/Basic_Info/Colour");
DATA_REFS.add("Soil_Sample/Basic_Info/Lag");
DATA_REFS.add("Soil_Sample/Basic_Info/Soil_Texture");
DATA_REFS.add("Soil_Sample/Basic_Info/Geology");
DATA_REFS.add("Soil_Sample/Basic_Info/Drainage");
DATA_REFS.add("Soil_Sample/Basic_Info/Contamination");
DATA_REFS.add("Soil_Sample/Basic_Info/Regolith_Type");
DATA_REFS.add("Soil_Sample/Basic_Info/Landform");
DATA_REFS.add("Soil_Sample/Basic_Info/Vegetation");
DATA_REFS.add("Soil_Sample/Basic_Info/Notes");
DATA_REFS.add("Soil_Sample/Basic_Info/Photos");
DATA_REFS.add("Soil_Sample/Basic_Info/Sketches");
DATA_REFS.add("Soil_Sample/Vars/Timestamp");
DATA_REFS.add("Rock_Sample/Basic_Info/Rock_Sample_Prefix");
DATA_REFS.add("Rock_Sample/Basic_Info/Rock_Sample_ID");
DATA_REFS.add("Rock_Sample/Basic_Info/Timestamp_Field");
DATA_REFS.add("Rock_Sample/Basic_Info/Rock_Sample_author");
DATA_REFS.add("Rock_Sample/Basic_Info/Station_Deposit");
DATA_REFS.add("Rock_Sample/Basic_Info/Project");
DATA_REFS.add("Rock_Sample/Basic_Info/Area");
DATA_REFS.add("Rock_Sample/Basic_Info/Site_Name");
DATA_REFS.add("Rock_Sample/Basic_Info/Observation_Type");
DATA_REFS.add("Rock_Sample/Basic_Info/Location_Number");
DATA_REFS.add("Rock_Sample/Basic_Info/SRID");
DATA_REFS.add("Rock_Sample/Basic_Info/Latitude");
DATA_REFS.add("Rock_Sample/Basic_Info/Longitude");
DATA_REFS.add("Rock_Sample/Basic_Info/Northing");
DATA_REFS.add("Rock_Sample/Basic_Info/Easting");
DATA_REFS.add("Rock_Sample/Basic_Info/Accuracy");
DATA_REFS.add("Rock_Sample/Basic_Info/Elevation_Metres_above_Sea_Level");
DATA_REFS.add("Rock_Sample/Measurements/Bedding_Strike");
DATA_REFS.add("Rock_Sample/Measurements/Cleavage_Strike");
DATA_REFS.add("Rock_Sample/Measurements/Foliation_Strike");
DATA_REFS.add("Rock_Sample/Measurements/Veins_1_Strike");
DATA_REFS.add("Rock_Sample/Measurements/Veins_2_Strike");
DATA_REFS.add("Rock_Sample/Measurements/Bedding_Dip");
DATA_REFS.add("Rock_Sample/Measurements/Cleavage_Dip");
DATA_REFS.add("Rock_Sample/Measurements/Foliation_Dip");
DATA_REFS.add("Rock_Sample/Measurements/Veins_1_Dip");
DATA_REFS.add("Rock_Sample/Measurements/Veins_2_Dip");
DATA_REFS.add("Rock_Sample/Measurements/Other_Structural_Measurements");
DATA_REFS.add("Rock_Sample/Measurements/Fold_Axis_Plunge");
DATA_REFS.add("Rock_Sample/Measurements/Mineral_Lineation_Plunge");
DATA_REFS.add("Rock_Sample/Measurements/Stretching_Lineation_Plunge");
DATA_REFS.add("Rock_Sample/Measurements/Fold_Axis_Azimuth");
DATA_REFS.add("Rock_Sample/Measurements/Mineral_Lineation_Azimuth");
DATA_REFS.add("Rock_Sample/Measurements/Stretching_Lineation_Azimuth");
DATA_REFS.add("Rock_Sample/Measurements/Other_Lineation");
DATA_REFS.add("Rock_Sample/Lithological_Info/Lithology");
DATA_REFS.add("Rock_Sample/Lithological_Info/Fineness_Inclusion_Size");
DATA_REFS.add("Rock_Sample/Lithological_Info/Grain_Size");
DATA_REFS.add("Rock_Sample/Lithological_Info/Sorting");
DATA_REFS.add("Rock_Sample/Lithological_Info/Other_Lithological_Descriptors");
DATA_REFS.add("Rock_Sample/Lithological_Info/Stratigraphic_Unit");
DATA_REFS.add("Rock_Sample/Lithological_Info/Large-Scale_Structure");
DATA_REFS.add("Rock_Sample/Lithological_Info/Alteration");
DATA_REFS.add("Rock_Sample/Lithological_Info/Veining");
DATA_REFS.add("Rock_Sample/Lithological_Info/Notes");
DATA_REFS.add("Rock_Sample/Lithological_Info/Photos");
DATA_REFS.add("Rock_Sample/Lithological_Info/Sketches");
DATA_REFS.add("Rock_Sample/Vars/Timestamp");
DATA_REFS.add("pH/pH/pH");
DATA_REFS.add("pH/pH/Time");
DATA_REFS.add("pH/pH/Preferred");
DATA_REFS.add("Eh/Eh/Eh");
DATA_REFS.add("Eh/Eh/Time");
DATA_REFS.add("Eh/Eh/Preferred");
DATA_REFS.add("Photolog/Photolog/Photo_ID");
DATA_REFS.add("Photolog/Photolog/Photolog_timestamp");
DATA_REFS.add("Photolog/Photolog/Photo_Note");
DATA_REFS.add("Shape/Shape_Note/Label");
DATA_REFS.add("Shape/Shape_Note/Note");

NO_UI_REFS.add("Water_Sample/Basic_Info/Location_Number");
NO_UI_REFS.add("Plant_Sample/Basic_Info/Location_Number");
NO_UI_REFS.add("Soil_Sample/Basic_Info/Location_Number");
NO_UI_REFS.add("Rock_Sample/Basic_Info/Location_Number");



HIER_REFS.add("Soil_Sample/Basic_Info/Geology");
HIER_REFS.add("Soil_Sample/Basic_Info/Regolith_Type");
HIER_REFS.add("Soil_Sample/Basic_Info/Landform");
HIER_REFS.add("Rock_Sample/Lithological_Info/Lithology");

TAB_GROUPS_AS_LIST.add("Logo");
TAB_GROUPS_AS_LIST.add("User");
TAB_GROUPS_AS_LIST.add("Project");
TAB_GROUPS_AS_LIST.add("Water_Sample");
TAB_GROUPS_AS_LIST.add("Plant_Sample");
TAB_GROUPS_AS_LIST.add("Soil_Sample");
TAB_GROUPS_AS_LIST.add("Rock_Sample");
TAB_GROUPS_AS_LIST.add("pH");
TAB_GROUPS_AS_LIST.add("Eh");
TAB_GROUPS_AS_LIST.add("Photolog");
TAB_GROUPS_AS_LIST.add("Shape");

TABS_AS_LIST.add("Logo/Logo_Tab");
TABS_AS_LIST.add("User/User");
TABS_AS_LIST.add("Project/Start");
TABS_AS_LIST.add("Project/Search");
TABS_AS_LIST.add("Project/Map");
TABS_AS_LIST.add("Project/Vars");
TABS_AS_LIST.add("Water_Sample/Basic_Info");
TABS_AS_LIST.add("Water_Sample/Codes");
TABS_AS_LIST.add("Water_Sample/pH_Eh");
TABS_AS_LIST.add("Water_Sample/Photolog");
TABS_AS_LIST.add("Water_Sample/Hidden");
TABS_AS_LIST.add("Water_Sample/Vars");
TABS_AS_LIST.add("Plant_Sample/Basic_Info");
TABS_AS_LIST.add("Plant_Sample/Photolog");
TABS_AS_LIST.add("Plant_Sample/Vars");
TABS_AS_LIST.add("Soil_Sample/Basic_Info");
TABS_AS_LIST.add("Soil_Sample/Photolog");
TABS_AS_LIST.add("Soil_Sample/Vars");
TABS_AS_LIST.add("Rock_Sample/Basic_Info");
TABS_AS_LIST.add("Rock_Sample/Measurements");
TABS_AS_LIST.add("Rock_Sample/Lithological_Info");
TABS_AS_LIST.add("Rock_Sample/Photolog");
TABS_AS_LIST.add("Rock_Sample/Vars");
TABS_AS_LIST.add("pH/pH");
TABS_AS_LIST.add("Eh/Eh");
TABS_AS_LIST.add("Photolog/Photolog");
TABS_AS_LIST.add("Shape/Shape_Note");

ATTRIB_NAMES_NON_STANDARD.put("Water_Sample/Basic_Info/Observation_Type", "Water Sample Observation Type");
ATTRIB_NAMES_NON_STANDARD.put("Water_Sample/Vars/Timestamp", "Water Sample Timestamp");
ATTRIB_NAMES_NON_STANDARD.put("Plant_Sample/Basic_Info/Observation_Type", "Plant Sample Observation Type");
ATTRIB_NAMES_NON_STANDARD.put("Plant_Sample/Vars/Timestamp", "Plant Sample Timestamp");
ATTRIB_NAMES_NON_STANDARD.put("Soil_Sample/Basic_Info/Observation_Type", "Soil Sample Observation Type");
ATTRIB_NAMES_NON_STANDARD.put("Soil_Sample/Vars/Timestamp", "Soil Sample Timestamp");
ATTRIB_NAMES_NON_STANDARD.put("Rock_Sample/Basic_Info/Observation_Type", "Rock Sample Observation Type");
ATTRIB_NAMES_NON_STANDARD.put("Rock_Sample/Vars/Timestamp", "Rock Sample Timestamp");

String getType(String ref) {
  String type = REF_TO_TYPE.get(ref);
  if (type == null) return "";
  else              return type;
}

List getRefs() {
  return getRefsAsList();
}

List getRefsAsList() {
  if (REFS_AS_LIST == null)
    REFS_AS_LIST = new ArrayList(REF_TO_TYPE.keySet());
  return REFS_AS_LIST;
}

HashSet getRefsAsHashSet() {
  if (REFS_AS_HASH_SET == null)
    REFS_AS_HASH_SET = new HashSet(REF_TO_TYPE.keySet());
  return REFS_AS_HASH_SET;
}

List getRefsByType(String type) {
  List refs = new ArrayList();
  for (String ref : getRefs())
    if (getType(ref).equals(type))
      refs.add(ref);
  return refs;
}

boolean hasData(String ref) {
  return DATA_REFS.contains(ref);
}

boolean hasNoUi(String ref) {
  return NO_UI_REFS.contains(ref);
}

String getVpRef(String ref) {
  return VP_REF_TO_REF.get(ref);
}

boolean hasVpRef(String ref) {
  return getVpRef(ref) != null;
}

boolean isHier(String ref) {
  return HIER_REFS.contains(ref);
}

boolean isValidRef(String ref) {
    return getRefsAsHashSet()     .contains(ref) ||
           getTabsAsHashSet()     .contains(ref) ||
           getTabGroupsAsHashSet().contains(ref);
}

boolean validateRef(ref) {
  if (!isValidRef(ref) && !"module".equals(ref)) {
    Log.w(
        this.callstack.get(1).getInvocationText(),
        "Ref '" + ref + "' may not refer to a UI element"
    );
    return false;
  }
  return true;
}

List getTabGroups() { return getTabGroupsAsList(); }
List getTabGroupsAsList() { return TAB_GROUPS_AS_LIST; }

HashSet getTabGroupsAsHashSet() {
  if (TAB_GROUPS_AS_HASH_SET == null)
    TAB_GROUPS_AS_HASH_SET = new HashSet(TAB_GROUPS_AS_LIST);
  return TAB_GROUPS_AS_HASH_SET;
}

List getTabs() { return getTabGroupsAsList(); }
List getTabsAsList() { return TABS_AS_LIST; }

HashSet getTabsAsHashSet() {
  if (TABS_AS_HASH_SET == null)
    TABS_AS_HASH_SET = new HashSet(TABS_AS_LIST);
  return TABS_AS_HASH_SET;
}

List getStartingIdRefs() {
  List l = new ArrayList();
  l.add("Project/Vars/Next_Water_Sample_ID");
  l.add("Project/Vars/Next_Plant_Sample_ID");
  l.add("Project/Vars/Next_Soil_Sample_ID");
  l.add("Project/Vars/Next_Rock_Sample_ID");
  return l;
}

List getMenuTypes() {
  List menuTypes = new ArrayList();
  menuTypes.add("checkbox");
  menuTypes.add("dropdown");
  menuTypes.add("list");
  menuTypes.add("picture");
  menuTypes.add("radio");
  return menuTypes;
}

List getMediaTypes() {
  List mediaTypes = new ArrayList();
  mediaTypes.add("audio");
  mediaTypes.add("camera");
  mediaTypes.add("file");
  mediaTypes.add("video");
  return mediaTypes;
}

boolean isMenuType(String type) {
  return getMenuTypes().contains(type);
}

boolean isMediaType(String type) {
  return getMediaTypes().contains(type);
}

boolean hasMenuType(String ref) {
  String refType = getType(ref);
  return isMenuType(refType);
}

boolean hasMediaType(String ref) {
  String type = getType(ref);
  return isMediaType(type);
}

boolean isFlaggedNodata(String tabGroup) {
  List flaggedTabGroups = new ArrayList();
  flaggedTabGroups.add("Logo");
  flaggedTabGroups.add("User");
  flaggedTabGroups.add("Project");
  return flaggedTabGroups.contains(tabGroup);
}

void updateDisplayedTabGroup(String tabGroup) {
  PREVIOUSLY_DISPLAYED_TAB_GROUP = CURRENTLY_DISPLAYED_TAB_GROUP;
  CURRENTLY_DISPLAYED_TAB_GROUP  = tabGroup;
}

String getPreviousTabGroup() {
  return getPreviouslyDisplayedTabGroup();
}

String getPreviouslyDisplayedTabGroup() {
  return PREVIOUSLY_DISPLAYED_TAB_GROUP;
}

String getDisplayedTabGroup() {
  return CURRENTLY_DISPLAYED_TAB_GROUP;
}

boolean isDisplayed(String ref) {
  return getDisplayedTabGroup().equals(ref);
}

String getTabGroupRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabGroupRef(fullRef, lastPartOnly);
}

String getTabGroupRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 1) return null;
  return parts[0];
}

String getTabRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabRef(fullRef, lastPartOnly);
}

String getTabRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 2) return null;
  if (lastPartOnly) return                  parts[1];
  else              return parts[0] + "/" + parts[1];
}

String getLastRefPart(String fullRef) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");
  return parts[parts.length-1];
}

String getGuiElementRef(String fullRef) {
  Boolean lastPartOnly = true;
  return getGuiElementRef(fullRef, lastPartOnly);
}

String getGuiElementRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 3) return null;
  if (lastPartOnly) return parts[2];
  else              return fullRef;
}

boolean isTab(String ref) {
  return getTabsAsHashSet().contains(ref);
}

boolean isTabGroup(String ref) {
  return getTabGroupsAsHashSet().contains(ref);
}

String getArch16nKey(String ref) {
  String lastRefPart = getLastRefPart(ref);

  if (isNull(lastRefPart)) return null;
  else                     return "{" + lastRefPart + "}";
}

String guessArch16nVal(String ref) {
  return guessArch16nValFromRef(ref);
}

String guessArch16nValFromRef(String ref) {
  String arch16nKey = getArch16nKey(ref);
  return guessArch16nValFromKey(arch16nKey);
}

String guessArch16nValFromKey(String key) {
  if (isNull(key)) return "";
  key = key.replaceAll("_", " ");
  key = key.replaceAll("^\\{", "");
  key = key.replaceAll("\\}$", "");
  return key;
}

String getAttributeName(String ref) {
  String guiElementRef = getGuiElementRef(ref);
  if (isNull(guiElementRef))
    return null;

  if (ATTRIB_NAMES_NON_STANDARD.containsKey(ref))
    return ATTRIB_NAMES_NON_STANDARD.get(ref);

  return guiElementRef.replaceAll("_", " ");
}

String getArchEntType(String ref) {
  String tabGroupRef = getTabGroupRef(ref);
  if (isNull(tabGroupRef)) {
    return null;
  }

  String archEntType = tabGroupRef.replaceAll("_", " ");
  return archEntType;
}

String getArchEntTypePascalCased(String ref) {
  String archEntType = getArchEntType(ref);
  if (archEntType == null) {
    return archEntType;
  }

  return archEntType.replaceAll(" ", "");
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* The binding accumulator allows onEvent bindings for the same element to    */
/* accumulate over multiple onEvent calls instead of having later calls       */
/* override earlier ones.                                                     */
/*                                                                            */
/* It also adds support for a several additional events:                      */
/*   - "blur" --- This is merely an interface to make code for adding "blur"  */
/*         events more consistent.                                            */
/*   - "copy" --- Triggered as a record is duplicated, immediately before it  */
/*         is first saved.                                                    */
/*   - "create" --- Triggered after a record is first created.                */
/*   - "delete" --- Triggered after a record is deleted.                      */
/*   - "prefetch" --- Triggered before the "fetch" event. More specifically,  */
/*         this event is triggered before a tab group is fetched and          */
/*         displayed.                                                         */
/*   - "fetch" --- Triggered after a record is fetched and displayed in a     */
/*         given tab group.                                                   */
/*   - "focus" --- This is merely an interface to make code for adding        */
/*         "focus" events more consistent.                                    */
/*   - "leave" --- Triggered after a given tab group is navigated away        */
/*         from. Note that this event cannot be triggered when the FAIMS app  */
/*         is exited.                                                         */
/*   - "save" --- Triggered each time a tab group is saved. This includes the */
/*         first time the tab group is saved as well as subsequent            */
/*         onSave(String, Boolean) calls.                                     */
/*                                                                            */
/* Additionally, the binding accumulator augments the "load" event so that    */
/* the `statement` in addOnEvent("module", "load", statement) gets executed   */
/* after the module has finished loading. (That is, when this script has been */
/* loaded, including the execution of any asynchronous functions.)            */
/*                                                                            */
/* Importantly, a single call to `bindOnEvents` must occur after all the      */
/* `addOnEvent` and `delOnEvents` calls. Calling `bindOnEvents` is what       */
/* actually establishes the bindings once they have been added to the         */
/* accumulator.                                                               */
/******************************************************************************/
// This counts the number of _a_synchonrous jobs before the module is considered
// to be loaded.
//     Only one synchronous job is counted, and that's loading this script; that
// is why this variable is initialised to 1.
AtomicInteger NUM_JOBS_TILL_LOADED = new AtomicInteger(1);
AtomicInteger NUM_FETCHES_OCCURING = new AtomicInteger(0);

final int PRECEDENCE_MIN = 0;
final int PRECEDENCE_MID = Integer.MAX_VALUE/2;
final int PRECEDENCE_MAX = Integer.MAX_VALUE;

int NUM_EVTS = 0;
Map ON_EVT_CONDS  = new HashMap(); // (ref, event type) -> callback statement
Map ON_EVT_STMTS  = new HashMap(); // (ref, event type) -> callback statement
Set CUSTOM_EVENTS = new HashSet(); // Events not handled by `onEvent`

CUSTOM_EVENTS.add("blur");
CUSTOM_EVENTS.add("copy");
CUSTOM_EVENTS.add("create");
CUSTOM_EVENTS.add("delete");
CUSTOM_EVENTS.add("fetch");
CUSTOM_EVENTS.add("focus");
CUSTOM_EVENTS.add("leave");
CUSTOM_EVENTS.add("prefetch");
CUSTOM_EVENTS.add("save");

Prioritised(o, int priority) {
  int i = NUM_EVTS++;
  return this;
}

Comparator PrioritisedComparator() {
  int compare(a, b) {
    if (a.priority > b.priority) return -1;
    if (a.priority < b.priority) return +1;
    if (a.i        > b.i       ) return +1;
    if (a.i        < b.i       ) return -1;
    return 0;
  }
  boolean equals(a, b) { return compare(a, b) == 0; }
  return this;
}

String getOnEventKey(String ref, String event) {
  return ref + SEP + event;
}

TreeSet getOnEventPriorities(String ref, String event, Map map) {
  String  key = getOnEventKey(ref, event);
  TreeSet val = (TreeSet) map.get(key);

  if (val == null) return new TreeSet(PrioritisedComparator());
  else             return val;
}

/* Returns the set of statements bound to an element at `ref` and occurring on
 * `event`.
 */
ArrayList getOnEventVal(String ref, String event, Map map) {
  String    key  = getOnEventKey(ref, event);
  TreeSet   val  = (TreeSet) map.get(key);
  ArrayList val_ = new ArrayList();

  // Unpack the inner objects (Strings) from the `Prioritised` objects, put them
  // in `val_`.
  if (val == null)
    val = new TreeSet();
  for (v : val)
    val_.add(v.o);

  return val_;
}

ArrayList getConds(String ref, String event) {
  return getOnEventVal(ref, event, ON_EVT_CONDS);
}

ArrayList getStatements(String ref, String event) {
  return getOnEventVal(ref, event, ON_EVT_STMTS);
}

void addToOnEventPriorities(
    String ref,
    String event,
    String statement,
    int precedence,
    Map map
) {
  // In the case that a statement already exists for a given (`ref`, `event`)
  // pair, writing `val.add(statement);` will be enough to add the extra
  // statement. This is because `getStatements` returns a reference to a list.
  // In the case just described, the list is stored in the `ON_EVT_STMTS` map.
  // However, sometimes `getStatements` returns empty lists which are not stored
  // in that map. In this case, calling `ON_EVT_STMTS.put` is required.
  //
  // `precedence` controls the order that statements are executed. Roughly,
  // a statement with a higher precedence is executed before a statement with
  // a lower precedence.
  assert(precedence >= 0);
  assert(precedence <= Integer.MAX_VALUE);

  String  key = getOnEventKey       (ref, event);
  TreeSet val = getOnEventPriorities(ref, event, map);

  TreeSet statements = val;

  statements.add(Prioritised(statement, precedence));
  map.put(key, statements);
}

String getOnEventString(
    String ref,
    String event,
    Map map,
    String sep,
    boolean doAddTrailingSep
) {
  ArrayList stmts = getOnEventVal(ref, event, map);
  String stmtsStr = "";

  if (stmts.size() > 0)
    stmtsStr = stmts.get(0);

  for (int i = 1; i < stmts.size(); i++)
    stmtsStr += sep + stmts.get(i);

  if (doAddTrailingSep)
    stmtsStr += sep;

  return stmtsStr;
}

String getStatementsString(String ref, String event) {
  String condsStr = getOnEventString(ref, event, ON_EVT_CONDS, " && ", false);
  String stmtsStr = getOnEventString(ref, event, ON_EVT_STMTS, "; "  , true);

  if (isNull(condsStr))
    return stmtsStr;
  return "if (" + condsStr + ") { " + stmtsStr + " }";
}

void executeOnEvent(String ref, String event) {
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

boolean hasOnEvent(String ref, String event, String statement) {
  return getStatements(ref, event).contains(statement);
}

void delOnEvent(String ref, String event, String statement) {
  String  key = getOnEventKey(ref, event);
  TreeSet val = (TreeSet) ON_EVT_STMTS.get(key);

  if (val == null)
    return;

  for (Iterator i = val.iterator(); i.hasNext(); ) {
    obj = i.next();
    if (statement.equals(obj.o))
      i.remove();
  }
}

void addOnEvent(String ref, String event, String statement, int precedence) {
  validateRef(ref);
  addToOnEventPriorities(ref, event, statement, precedence, ON_EVT_STMTS);
}

void addOnEventCond(String ref, String event, String check) {
  validateRef    (ref);
  addToOnEventPriorities(ref, event, check, PRECEDENCE_MID, ON_EVT_CONDS);
}

void addOnEvent(String ref, String event, String statement) {
  addOnEvent(ref, event, statement, PRECEDENCE_MID);
}

void addOnEvent(String ref, String event, Callable statement, int precedence) {
  String statementString = callable2callableString(statement);
  addOnEvent(ref, event, statementString);
}

void addOnEvent(String ref, String event, Callable statement) {
  addOnEvent(ref, event, statement, PRECEDENCE_MID);
}

void addOnEventCond(String ref, String event, Callable check) {
  String checkString = runnable2runnableString(check);
  addOnEvent(ref, event, checkString);
}

void bindOnEvent(String ref, String event) {
  String stmtsStr     = getStatementsString(ref, event);
  String focusStmtStr = getStatementsString(ref, "focus");
  String blurStmtStr  = getStatementsString(ref, "blur" );

  if (event.equals("load") && ref.equals("module")) {
    ;
  } else if (event.equals("focus")) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (event.equals("blur" )) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (!CUSTOM_EVENTS.contains(event)) {
    onEvent(ref, event, stmtsStr);
  } else {
    ; // Other events are implemented using auto-generated callback functions
  }
}

void bindOnEvents() {
  for (String key : ON_EVT_STMTS.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

void onLeaveTabGroup() {
  onLeaveTabGroup(getPreviouslyDisplayedTabGroup());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

void incJobsTillLoaded() {
  NUM_JOBS_TILL_LOADED.incrementAndGet();
}

boolean isModuleLoaded() {
  return NUM_JOBS_TILL_LOADED.get() == 0;
}

/* Returns `true` if the module has loaded.
 */
boolean decJobsTillLoaded() {
  return NUM_JOBS_TILL_LOADED.decrementAndGet() == 0;
}

void decAndExecIfModuleLoaded() {
  if (decJobsTillLoaded())
    executeOnEvent("module", "load");
}

boolean isDoingFetchEvent() {
  return NUM_FETCHES_OCCURING.get() > 0;
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work. The
 * "leave" event is really triggered upon "show" of another tab.
 */
for (tg : getTabGroups()) {
  String ref      = tg;
  String event    = "show";
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTabGroup", ref);
  addOnEvent(ref, event, callback, PRECEDENCE_MAX);

  // Trigger on leave tab group event
  callback = "onLeaveTabGroup()";
  addOnEvent(ref, event, callback, PRECEDENCE_MAX);
}

for (tg : getTabGroups()) {
  if (isFlaggedNodata(tg))
    continue;

  addOnEvent(
      tg,
      "prefetch",
      "NUM_FETCHES_OCCURING.incrementAndGet()",
      Integer.MAX_VALUE
  );
  addOnEvent(
      tg,
      "fetch",
      "NUM_FETCHES_OCCURING.decrementAndGet()",
      0
  );
}

/******************************************************************************/
/*                     LOCALSETTINGS VIEW/TABLE CREATION                      */
/******************************************************************************/
void makeLocalId(){
  fetchOne(
      "CREATE TABLE IF NOT EXISTS perflog (" +
      "    id              INTEGER PRIMARY KEY," +
      "    deviceModel     TEXT," +
      "    sessStartMs     INTEGER," +
      "    parentNameSpace TEXT," +
      "    srcLine         TEXT," +
      "    query           TEXT," +
      "    queryStartMs    INTEGER," +
      "    queryStopMs     INTEGER," +
      "    numAentvalue    INTEGER," +
      "    numArchentity   INTEGER," +
      "    numRelationship INTEGER," +
      "    numAentreln     INTEGER " +
      ")"
  );

  fetchOne(
      "CREATE TABLE IF NOT EXISTS localSettings (" +
      "    key   TEXT PRIMARY KEY," +
      "    value TEXT" +
      ")"
  );

  fetchOne(
      "DROP VIEW IF EXISTS parentchild"
  );

  fetchOne(
      "CREATE VIEW parentchild AS "+
      "           SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename, createdat"+
      "             FROM (SELECT uuid, participatesverb, aenttypename, relationshipid, relntimestamp as createdat"+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) parent "+
      "             JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) child "+
      "               ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid)"
  );
}
makeLocalId();

/******************************************************************************/
/*                            PERFORMANCE TESTING                             */
/*                                                                            */
/* Code to a) time queries; and b) create dummy records. (The vast majority   */
/* the code is for the latter.)                                               */
/******************************************************************************/
import android.database.DatabaseUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.util.concurrent.ConcurrentLinkedQueue;

ConcurrentLinkedQueue PERF_FILES             = new ConcurrentLinkedQueue();
AtomicInteger         PERF_NUM_CBS_DONE_FILE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SAVE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SET  = null;
AtomicInteger         PERF_NUM_CBS_TODO_FILE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SAVE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SET  = null;
boolean               PERF_ALLOW_CREATION    = false;
String                PERF_TEST_IMG          = "";
                      PERF_TYPE_TREE         = null;
int                   PERF_PHOTOS_PER_FIELD  = 1;

int getNumPhotos() {
  return getNumPhotos(PERF_TYPE_TREE);
}

int getNumPhotos(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumPhotos(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumPhotosAtNode(tree);
}

int getNumPhotosAtNode(tree) {
  // Figure out how many camera refs there are at this node (i.e. in this arch
  // ent).
  List cameraRefs = getRefsByType("camera");
  List cameraRefsAtNode = new ArrayList();
  for (String ref : cameraRefs)
    if (getArchEntType(ref).equals(tree.label))
      cameraRefsAtNode.add(ref);

  return getNumDummyRecordsAtNode(tree) *
    cameraRefsAtNode.size() *
    PERF_PHOTOS_PER_FIELD;
}

int getNumDummyRecords() {
  getNumDummyRecords(PERF_TYPE_TREE);
}

int getNumDummyRecords(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumDummyRecords(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumDummyRecordsAtNode(tree);
}

int getNumDummyRecordsAtNode(tree) {
  int sum = 1;
  for (; tree.getParent() != null; tree = tree.getParent()) {
    sum *= tree.data;
  }
  return sum;
}

Tree(String label, Object data) {
  String label    = label;
  Object data     = data;
         parent   = null;
  List   children;

  void addChild(tree) {
    if (super.children == null)
      super.children = new ArrayList();

    tree.setParent(super);
    super.children.add(tree);
  }

  getChild(int i) {
    return super.children.get(i);
  }

  int getIndex() {
    if (super.getParent() == null)
      return -1;
    return super.getParent().getChildren().indexOf(super);
  }

  getDescendant(String ref) {
    String[] refStrArr  = ref.split("/");
    List     refIntList = new ArrayList();

    for (String refStr : refStrArr) {
      int refInt = Integer.parseInt(refStr);
      refIntList.add(refInt);
    }

    return super.getDescendant(refIntList);
  }

  getDescendant(List ref) {
    if (ref.size() == 0)
      return super;

    int  head = ref.get(0);
    List tail = ref.subList(1, ref.size());

    if (ref.size() == 1) return getChild(head);
    if (ref.size() >= 2) return getChild(head).getDescendant(tail);
  }

  String getAncestorRefString(String sep, String key) {
    String s = "";
    for (Object n = super; n.getParent() != null; n = n.getParent()) {
      String val = "";
      if (key.equals("index")) val = n.getIndex() + "";
      if (key.equals("label")) val = n.label;

      s = sep + val + s;
    }

    if (!s.equals(""))
      s = s.substring(sep.length(), s.length()); // Remove initial `sep`

    return s;
  }

  String getAncestorRefString() {
    return getAncestorRefString("/", "index");
  }

  List getChildren() {
    if (super.children == null)
      return new ArrayList();
    return super.children;
  }

  int getNumNodes() {
    int sum = 1;
    for (child : super.getChildren())
      sum += child.getNumNodes();
    return sum;
  }

  void setParent(tree) {
    super.parent = tree;
  }

  getParent() {
    return super.parent;
  }

  String toString() {
    String s = "\n- " + super.label + " (" + data + ")";
    if (super.children != null)
      for (c : super.children)
        s += c.toString().replace("\n", "\n\t\t");
    return s;
  }

  return this;
}

TimedFetchCallback(String query, FetchCallback cb, int callerIdx) {
  int           callerIdx = callerIdx;
  String        query     = query;
  FetchCallback cb        = cb;
  bsh.CallStack cs_       = this.callstack.copy();

  long startTime = System.currentTimeMillis(); // Timer starts here
  long stopTime  = -1;

  void onFetch(Object result) {
    super.stopTimer();
    super.updatePerfLog();

    if (super.cb != null)
      super.cb.onFetch(result);
  }

  void onError(String message) {
    if (super.cb != null)
      super.cb.onError(message);
  }

  void stopTimer() {
    super.stopTime = System.currentTimeMillis();
  }

  double getElapsedMillis() {
    if (stopTime < 0)
      return -Double.MAX_VALUE;
    return super.stopTime - super.startTime;
  }

  void updatePerfLog() {
    String deviceModel     = android.os.Build.MODEL;
    String sessStartMs     = SESS_START_TIME + "";
    String parentNameSpace = cs_.get(callerIdx + 1).getName() + "";
    String srcLine         = cs_.get(callerIdx + 0).getInvocationLine() + "";
    String query           = query;
    String queryStartMs    = startTime + "";
    String queryStopMs     = stopTime + "";

    String updateQuery = "";
    updateQuery += " INSERT INTO perflog (";
    updateQuery += "             deviceModel,";
    updateQuery += "             sessStartMs,";
    updateQuery += "             parentNameSpace,";
    updateQuery += "             srcLine,";
    updateQuery += "             query,";
    updateQuery += "             queryStartMs,";
    updateQuery += "             queryStopMs,";
    updateQuery += "             numArchentity,";
    updateQuery += "             numAentvalue,";
    updateQuery += "             numRelationship,";
    updateQuery += "             numAentreln";
    updateQuery += " )    SELECT %s, %s, %s, %s, %s, %s, %s, a, av, r, ar";
    updateQuery += "        FROM";
    updateQuery += "             (SELECT COUNT(*) AS a  FROM archentity  ) a,";
    updateQuery += "             (SELECT COUNT(*) AS av FROM aentvalue   ) av,";
    updateQuery += "             (SELECT COUNT(*) AS r  FROM relationship) r,";
    updateQuery += "             (SELECT COUNT(*) AS ar FROM aentreln    ) ar";

    updateQuery = dbReplaceFirst(updateQuery, deviceModel);
    updateQuery = dbReplaceFirst(updateQuery, sessStartMs);
    updateQuery = dbReplaceFirst(updateQuery, parentNameSpace);
    updateQuery = dbReplaceFirst(updateQuery, srcLine);
    updateQuery = dbReplaceFirst(updateQuery, query);
    updateQuery = dbReplaceFirst(updateQuery, queryStartMs);
    updateQuery = dbReplaceFirst(updateQuery, queryStopMs);

    fetchOne(updateQuery);
  }

  return this;
}

void timedFetchOne(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchOne(q, tcb);
}

void timedFetchAll(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchAll(q, tcb);
}

void timedFetchOne(String q, FetchCallback cb) {
  timedFetchOne(q, cb, 2);
}

void timedFetchAll(String q, FetchCallback cb) {
  timedFetchAll(q, cb, 2);
}

void timedFetchOne(String q) {
  timedFetchOne(q, null, 2);
}

void timedFetchAll(String q) {
  timedFetchAll(q, null, 2);
}

void timedPopulateCursorList(String ref, String q, int limit) {
  String boundQ = q;
  boundQ = dbReplaceFirst(boundQ, "?", limit + "");
  boundQ = dbReplaceFirst(boundQ, "?", "0");
  timedFetchAll(boundQ, null, 2);

  populateCursorList(ref, q, limit);
}

void setUpTypeHierarchy() {
  //- 
  //  - Water Sample
  //    - Photolog
  //  - Soil Sample
  //    - Photolog
  //  - Shape
  //  - Rock Sample
  //    - Photolog
  //  - Plant Sample
  //    - Photolog

  n0 = Tree("", 1);
  n1 = Tree("Water Sample", 1);
  n2 = Tree("Photolog", 1);
  n3 = Tree("Soil Sample", 1);
  n4 = Tree("Photolog", 1);
  n5 = Tree("Shape", 1);
  n6 = Tree("Rock Sample", 1);
  n7 = Tree("Photolog", 1);
  n8 = Tree("Plant Sample", 1);
  n9 = Tree("Photolog", 1);

  n0.addChild(n1);
  n0.addChild(n3);
  n0.addChild(n5);
  n0.addChild(n6);
  n0.addChild(n8);

  n1.addChild(n2);

  n3.addChild(n4);

  n6.addChild(n7);

  n8.addChild(n9);


  PERF_TYPE_TREE = n0;
}

setUpTypeHierarchy();

void saveEntitiesToPCRel(
    String parentType,
    String childType,
    String parentUuid,
    String childUuid
) {
    String relName = parentType + " - " + childType;
    String pOf     = "Parent Of";
    String cOf     = "Child Of";
    saveEntitiesToHierRel(relName, parentUuid, childUuid, pOf, cOf, "");
}

String randomMenuValue(String ref) {
  List vocabIds = getVocabIdsFromRef(ref);
  int  len      = vocabIds.size();
  if (len <= 0)
    return "";

  Random r   = new Random();
  int    i   = r.nextInt(len);

  return vocabIds.get(i);
}

String randomInputValue(String ref) {
  int len = 5;
  randomInputValue(ref, len);
}

String randomInputValue(String ref, int len) {
  if (getType(ref).equals("camera"))
    if (PERF_FILES.isEmpty()) {
      Log.e("randomInputValue()", "PERF_FILES empty, using empty string");
      return "";
    } else
      return PERF_FILES.poll();
  else
    return getRandomString(len);
}

List getAttribsForRef(String ref) {
  int numAttribs = 1;
  if (!hasData(ref))                 numAttribs = 0;
  if (hasMediaType(ref))             numAttribs = 0;
  if (getType(ref).equals("camera")) numAttribs = PERF_PHOTOS_PER_FIELD;

  List attribs = new ArrayList();
  for (int i = 0; i < numAttribs; i++) {
    String attribName = getAttributeName(ref);
    String annotation = "";
    String vocab      = "";
    String measure    = "";
    String certainty  = "1.0";

    if (hasMenuType(ref)) vocab   = randomMenuValue (ref);
    else                  measure = randomInputValue(ref);

    EntityAttribute ea = createEntityAttribute(
        attribName,
        annotation,
        vocab,
        measure,
        certainty
    );
    attribs.add(ea);
  }

  return attribs;
}

List getAttribsForArchEnt(String archEntType) {
  List attribs = new ArrayList();
  for (String ref : getRefs())
    if (getArchEntType(ref).equals(archEntType))
      attribs.addAll(getAttribsForRef(ref));

  return attribs;
}

void displayRecordDigest(int numCreated) {
  String q = "";
  q += "   SELECT '{All}', count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "    UNION";
  q += "   SELECT aenttypename, count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "     JOIN aenttype USING (aenttypeid)";
  q += " GROUP BY aenttypename";

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      String head = "{perf_digest_1_head}";
      String body = "";
      if (numCreated >= 0)
        body += numCreated + " {perf_digest_1_body_1}";
      body += " {perf_digest_1_body_2}";

      if (result == null)
        result = new ArrayList();
      for (List row : result) {
        String type = row.get(0);
        String num  = row.get(1);

        body += "\t- " + type + ": " + num + "\n";
      }

      if (dialog != null)
        dialog.dismiss();
      showWarning(head, body);
    }
  };

  fetchAll(q, cb);
}

void displayRecordDigest() {
  displayRecordDigest(-1);
}

PerfSaveCallback(tree, String parentUuid) {
  tree              = tree;
  String parentUuid = parentUuid;

  saveRel(uuid) {
    parent            = super.tree.getParent();
    String parentUuid = super.parentUuid;

    if (parent == null || parentUuid == null)
      return;

    String parentType = parent    .label;
    String childType  = super.tree.label;

    saveEntitiesToPCRel(parentType, childType, parentUuid, uuid);
  }

  void onSave(String uuid, boolean newRecord) {
    int cbsDone = PERF_NUM_CBS_DONE_SAVE.incrementAndGet();
    int cbsTodo = PERF_NUM_CBS_TODO_SAVE.get();
    if (cbsTodo == cbsDone)
      displayRecordDigest(cbsDone);

    if (newRecord)
      super.saveRel(uuid);

    for (subtree : super.tree.getChildren())
      saveArchEnts(subtree, uuid);
  }

  void onError(String message) {
    if (dialog != null)
      dialog.dismiss();
    showWarning("Error", message);
  }

  return this;
}

void saveArchEnts(tree, String parentUuid) {
  String archEntName = tree.label;
  int    numEnts     = tree.data;
  cb                 = PerfSaveCallback(tree, parentUuid);

  for (int i = 0; i < numEnts; i++) {
    List attribs = getAttribsForArchEnt(archEntName);
    saveArchEnt(null, archEntName, (List) null, attribs, cb);
  }
}

void createDummyRecords() {
  int  n = getNumDummyRecords();
  dialog = showBusy("{perf_dummy_busy_head}", n + " {perf_dummy_busy_body}");

  enqueueTestFiles("createDummyRecordsRecursively()");
}

void createDummyRecordsRecursively() {
  int n = getNumDummyRecords();
  PERF_NUM_CBS_TODO_SAVE = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SAVE = new AtomicInteger(0);

  for (child : PERF_TYPE_TREE.getChildren())
    saveArchEnts(child, null);
}

void enqueueTestFiles(String cb) {
  enqueueTestFiles(getNumDummyRecords(), cb);
}

void enqueueTestFiles(int numFiles, String cb) {
  if (isNull(PERF_TEST_IMG)) {
    String head; String body;
    head  = "Record Creation Aborted";
    body  = "The master file from which test files are enqueued could not be ";
    body += "found on disk. Record creation cannot take place unless this file";
    body += " is present. Please ensure that your device is connected to the ";
    body += "internet, re-load the module, and try to run a create dummy ";
    body += "records again.";
    showWarning(head, body);
    return;
  }

  // Set `PERF_NUM_CBS_TODO_FILE` and `PERF_NUM_CBS_DONE_FILE`
  int numPhotosToMake;
  numPhotosToMake  = getNumPhotos();
  numPhotosToMake -= PERF_FILES.size();
  numPhotosToMake  = Math.max(0, numPhotosToMake);
  // We're going to count returns from attachFile too, hence multiplication by 2
  PERF_NUM_CBS_TODO_FILE = new AtomicInteger(2*numPhotosToMake);
  PERF_NUM_CBS_DONE_FILE = new AtomicInteger(0);

  // Make records
  for (int i = 0; i < numPhotosToMake; i++) {
    String fileName = attachFile(
        PERF_TEST_IMG,
        false,
        null,
        fun2str("checkEnqueueTestFilesIsDone", cb)
    );

    PERF_FILES.add(fileName);
    checkEnqueueTestFilesIsDone(cb);
  }
}

void checkEnqueueTestFilesIsDone(String onDone) {
  int cbsDone = PERF_NUM_CBS_DONE_FILE.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_FILE.get();
  if (cbsTodo == cbsDone)
    execute(onDone);
}

PerfImageDownloader() {
  void run() {
    if (isInUnitTestTime())
      return;

    String filStr = "/sdcard/faims/modules/" + getModuleId() +
        "/files/app/test.jpg";
    String urlStr = "https://raw.githubusercontent.com/FAIMS/FAIMS-Tools/" +
        "master/test-images/construction-2894x1924.jpg";

    if (detectFile(filStr))
      return;

    try {
      URL           urlObj = new URL(urlStr);
      URLConnection urlCon = urlObj.openConnection();

      new File(filStr).getParentFile().mkdirs();

      InputStream      is  = urlCon.getInputStream();
      FileOutputStream fos = new FileOutputStream(filStr);

      byte[] buffer = new byte[4096];
      int len;

      // While we have availble data, continue downloading and storing to local
      // file
      while ((len = is.read(buffer)) > 0)
        fos.write(buffer, 0, len);

      if (is  != null) is .close();
      if (fos != null) fos.close();
    } catch (Exception e) {
      Log.e("PerfImageDownloader.run()", e.getMessage());
    }

    // Set `PERF_TEST_IMG` if the file was created successfully
    detectFile(filStr);
  }

  void start() {
    Runnable r = PerfImageDownloader();
    new Thread(r).start();
  }

  boolean detectFile(String filStr) {
    File newImg = new File(filStr);
    if (newImg.length() > 0) {
      PERF_TEST_IMG = filStr;
      return true;
    }
    return false;
  }

  return this;
}

void verifyEnableRecordCreation() {
  String q = "";
  q += " SELECT userid, fname, lname, email, password";
  q += "   FROM user";
  q += "  WHERE fname = 'Faims'";
  q += "    AND lname = 'Admin'";

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      String userId    = result.get(0);
      String nameFirst = result.get(1);
      String nameLast  = result.get(2);
      String email     = result.get(3);
      String password  = result.get(4);

      User user = new User(userId, nameFirst, nameLast, email, password);
      setUser(user);

      showVerifyUserDialog("enableRecordCreation()");
    }
  };

  fetchOne(q, callback);
}

void enableRecordCreation() {
  PERF_ALLOW_CREATION = true;
  setUpPerfActionBarItems();

  showWarning("{perf_create_on_head}", "{perf_create_on_body}");
}

boolean isInPerfTestTime() {
  return false;
}

// Produce entity number specification
void setUpDummyRecordCreation() {
  int n = PERF_TYPE_TREE.getNumNodes()
      - 1; // Ignore root node

  PERF_NUM_CBS_TODO_SET = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SET = new AtomicInteger(0);

  setUpDummyRecordCreation(PERF_TYPE_TREE, "");
}

String getBreadCrumbs(node) {
  return node.getAncestorRefString(" › ", "label");
}

String typeToReadableType(String type) {
  if (type.equals("")) return "{this_module}";
  else                 return "{each} " + type;
}

void setUpDummyRecordCreation(tree, String parentType) {
  String type = tree.label;

  for (child : tree.getChildren())
    setUpDummyRecordCreation(child, type);

  if (!type.equals("")) {
    // Make head and body for `showTextAlert`
    String treeRef = tree.getAncestorRefString();
    String head    = getBreadCrumbs(tree);
    String body    = "{perf_rec_num_body_1} %s {perf_rec_num_body_2} %s " +
                     "{perf_rec_num_body_3}";
    body = replaceFirst(body, type);
    body = replaceFirst(body, typeToReadableType(parentType));

    promptSetDummyRecordQuantity(treeRef, head, body);
  }
}

void promptSetDummyRecordQuantity(String treeRef, String head, String body) {
  String cb = "setDummyRecordQuantity(\"%s\", \"%s\", \"%s\")";
  cb = replaceFirst(cb, treeRef);
  cb = replaceFirst(cb, head);
  cb = replaceFirst(cb, escape(body));

  showTextAlert(head, body, cb, "checkSetDummyRecordQuantityIsDone()");
}

void setDummyRecordQuantity(
    String treeRef,
    String failHead,
    String failBody
) {
  // Parse data as int
  int intData;
  try {
    intData = Integer.parseInt(getLastTextAlertInput());
  } catch (Exception e) {
    promptSetDummyRecordQuantity(treeRef, failHead, failBody);
    return;
  }

  PERF_TYPE_TREE.getDescendant(treeRef).data = intData;
  checkSetDummyRecordQuantityIsDone();
}

void checkSetDummyRecordQuantityIsDone() {
  int cbsDone = PERF_NUM_CBS_DONE_SET.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_SET.get();
  if (cbsTodo == cbsDone) {
    String totalRecs = getNumDummyRecords() + "";
    String treeString = PERF_TYPE_TREE.toString();
    String treeStringNoRoot = treeString.substring(
        "\n-  (1)".length(),
        treeString.length()
    );

    String head = "{perf_update_head}";
    String body =
         "{perf_update_body_1} " + treeStringNoRoot +
        " {perf_update_body_2} " + totalRecs +
        " {perf_update_body_3}";

    showAlert(head, body, "createDummyRecords()", "");
  }
}

void verifyCreateDummyRecords() {
  // Unless syncing is disabled, 'database locked' errors will happen
  setFileSyncEnabled(false);
  setSyncEnabled    (false);

  if (isSyncEnabled()) {
    showWarning("{perf_dummy_err_head}", "{perf_dummy_err_body}");
    return;
  }

  showAlert(
      "{perf_wiz_head}",
      "{perf_wiz_body}",
      "setUpDummyRecordCreation()",
      ""
  );
}

void setUpPerfActionBarItems() {
  removeActionBarItem("create_dummy_records");
  removeActionBarItem("display_record_digest");
  removeActionBarItem("enable_record_creation");

  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);
  if (!isDisplayed(userMenuTabGroup)) {
    PERF_ALLOW_CREATION = false;
    return;
  }
  if (!isInPerfTestTime())
    return;

  ActionButtonCallback createDummyRecords = new ActionButtonCallback() {
      actionOnLabel() {
        "{create_dummy_records}";
      }
      actionOn() {
        verifyCreateDummyRecords();
      }
  };

  ActionButtonCallback displayRecordDigest = new ActionButtonCallback() {
      actionOnLabel() {
        "{display_record_digest}";
      }
      actionOn() {
        displayRecordDigest();
      }
  };

  ActionButtonCallback enableRecordCreation = new ActionButtonCallback() {
      actionOnLabel() {
        "{enable_record_creation}";
      }
      actionOn() {
        verifyEnableRecordCreation();
      }
  };

  // Careful! The `if` statements are weirdly formatted
  addActionBarItem("display_record_digest",  displayRecordDigest);
  if (PERF_ALLOW_CREATION)
  addActionBarItem("create_dummy_records",   createDummyRecords);
  if (!PERF_ALLOW_CREATION)
  addActionBarItem("enable_record_creation", enableRecordCreation);
}

void setUpPerfTestMode() {
  if (!isInPerfTestTime())
    return;

  // Download test image
  PerfImageDownloader().start();

  // Display performance testing notification
  showWarning("{perf_mode_head}", "{perf_mode_body}");
}

if (!isNull(USER_MENU_PATH)) {
  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);

  setUpPerfTestMode();
  addOnEvent(userMenuTabGroup, "show",  "setUpPerfActionBarItems()");
  addOnEvent(userMenuTabGroup, "leave", "setUpPerfActionBarItems()");
}

/******************************************************************************/
/*                           LOCALSETTINGS UPDATES                            */
/******************************************************************************/
void insertIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

void insertIntoLocalSettings(String key, String val, boolean doOverwrite) {
  if (val == null) val = "";

  String q;
  if (doOverwrite) q = "REPLACE INTO localSettings(key, value) VALUES(%s, %s)";
  else             q = "INSERT  INTO localSettings(key, value) VALUES(%s, %s)";

  q = dbReplaceFirst(q, key);
  q = dbReplaceFirst(q, val);
  fetchOne(q);
}

void insertIntoLocalSettings(String key, String val) {
  insertIntoLocalSettings(key, val, true);
}

void insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

void insertIntoLocalSettingsOnChange(String ref) {
  String val = getFieldValue(ref);

  String insertCallback = fun2str("insertIntoLocalSettings", ref);

  addOnEvent(ref, "blur",  insertCallback);
  addOnEvent(ref, "click", insertCallback);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite,
    String defaultVal
) {
  String val = getFieldValue(ref);
  if (!isNull(val) && !doOverwrite) {
    return;
  }

  String q = "SELECT value FROM localSettings WHERE key = %s";
  q = dbReplaceFirst(q, key);

  FetchCallback set = new FetchCallback() {
    onFetch(result) {
      if (result != null && result.size() >= 1) {
        setFieldValue(ref, result.get(0));
      } else if (defaultVal != null) {
        setFieldValue(ref, defaultVal);
      }
    }
  };

  fetchOne(q, set);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite
) {
  setFieldValueFromLocalSettings(key, ref, doOverwrite, null);
}

void setFieldValueFromLocalSettings(
    String  ref,
    boolean doOverwrite,
    String  defaultVal
) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite, defaultVal);
}

void setFieldValueFromLocalSettings(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite);
}

void setFieldValueFromLocalSettings(String key, String ref) {
  setFieldValueFromLocalSettings(key, ref, false);
}

void setFieldValueFromLocalSettings(String ref) {
  setFieldValueFromLocalSettings(ref, false);
}

void setFieldValueFromLocalSettingsOnEvent(
    String ref,
    boolean doOverwrite,
    String defaultVal,
    String event
) {
  String cb = fun2str(
      "setFieldValueFromLocalSettings",
      new Object[]{ref, doOverwrite, defaultVal}
  );

  addOnEvent(getTabGroupRef(ref), event, cb);
}

void setFieldValueFromLocalSettingsOnShow(
    String ref,
    boolean doOverwrite,
    String defaultVal
) {
  setFieldValueFromLocalSettingsOnEvent(ref, doOverwrite, defaultVal, "show");
}

void setFieldValueFromLocalSettingsOnShow(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite, (String) null);
}

/* Causes the value of the field given by `ref` to be saved each time it is
 * modified (on blur). The value of the field is restored when the tab group
 * containing the field is displayed.
 *
 * This function depends on `addOnEvent`. Therefore this function must be called
 * after `addOnEvent` is defined, but before `bindOnEvents` is called. This will
 * be so if the call is made in the autogenerator's `logic` tags.
 */
void persistOverSessions(String ref, boolean doOverwrite, String defaultVal) {
  String tabGroupRef = getTabGroupRef(ref);
  boolean isData = !isFlaggedNodata(tabGroupRef);

  String event;
  if (isData) event = "create";
  else        event = "show";

  setFieldValueFromLocalSettingsOnEvent(ref, doOverwrite, defaultVal, event);
  insertIntoLocalSettingsOnChange      (ref);
}

void persistOverSessions(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, String defaultVal) {
  persistOverSessions(ref, false, defaultVal);
}

void persistOverSessions(String ref) {
  persistOverSessions(ref, false, (String) null);
}

persistOverSessions("Project/Start/Station_Deposit", false);
persistOverSessions("Project/Start/Project", false);
persistOverSessions("Project/Start/Area", false);
persistOverSessions("Project/Start/Sample_Prefix", false);

/******************************************************************************/
/*                           FIELD COPYING HELPERS                            */
/*                                                                            */
/* Provides an easy way to copy field values, even between vocabs.            */
/******************************************************************************/
boolean isSelected(String ref, String vocabName) {
  String vocabNameActual = getMenuValue(ref);

  if (vocabNameActual == null)
    return vocabNameActual == vocabName;
  else
    return vocabNameActual.equals(vocabName);
}

boolean setMenuValue(String ref, String vocabName) {
  String attrName = getAttributeName(ref);
  String vocabId = getVocabId(attrName, vocabName);

  if (isNull(vocabId))
    return false;

  setFieldValue(ref, vocabId);
  return isSelected(ref, vocabName);
}

boolean copyFieldValue(String src, String dst) {
  Boolean doFindVocabId = true;
  return copyFieldValue(src, dst, doFindVocabId);
}

/* `src`           The ref of the source field.
 * `dst`           The ref of the destination field.
 * `doFindVocabId` If this is true, and the properties/attributes of `src` and
 *                 `dst` are different, `copyFieldValue` treats `src` and `dst`
 *                 as if they were menus. Therefore, to copy the value seen by
 *                 the user (i.e. the vocabName of `src`), a database query is
 *                 performed. The query determines the which vocabId of `dst`
 *                 will make it display the same vocabName as `src`.
 *
 *                 If `doFindVocabId` is false, the value returned by
 *                 `getFieldValue` is copied, without any database accesses.
 */
boolean copyFieldValue(String src, String dst, Boolean doFindVocabId) {
  String vocabIdSrc   = getFieldValue(src);
  String vocabNameSrc = getFieldValue(src, true);

  String attrNameSrc = getAttributeName(src);
  String attrNameDst = getAttributeName(dst);

  if (attrNameSrc.equals(attrNameDst) || !doFindVocabId) {
    setFieldValue(dst, vocabIdSrc);
    return true;
  }

  if (setMenuValue(dst, vocabNameSrc))
    return true;

  // Fall back to dumb field copying
  copyFieldValue(src, dst, false);
  return false;
}

void clearField(String ref) {
  switch(getType(ref)) {
    case "dropdown": setFieldValue(ref, null); break;
    case "list":     return;
    default:         setFieldValue(ref, "");
  }
}

/* Copies the value from the field at `src` to the field at `dst` whenever the
 * a new record containing `dst` is created.
 *
 * `doCheckParent` If this is true, the value is only copied when the parent tab
 *                 group of the tab group referred to by `dst` is equal to the
 *                 tab group referred to by `src`. This is a way of checking
 *                 whether the field referred to by `src` has been loaded.
 * `doFindVocabId` Same as the `doFindVocabId` argument for the `copyFieldValue`
 *                 function.
 */
void inheritFieldValue(
    String src,
    String dst,
    boolean doCheckParent,
    boolean doFindVocabId
) {
  String fun = "";
  fun += "if (!{check} || getDisplayedTabGroup().equals(\"{parent}\"))";
  fun += "  copyFieldValue(\"{src}\", \"{dst}\", {find})";

  fun = replaceFirst(fun, "{check}",  doCheckParent + "");
  fun = replaceFirst(fun, "{parent}", getTabGroupRef(src));
  fun = replaceFirst(fun, "{src}",    src);
  fun = replaceFirst(fun, "{dst}",    dst);
  fun = replaceFirst(fun, "{find}",   doFindVocabId + "");


  String dstParent = getTabGroupRef(dst);
  if (isFlaggedNodata(dstParent)) addOnEvent(dstParent, "show",   fun);
  else                            addOnEvent(dstParent, "create", fun);
}

/* If `doCheckParent`, then the value at `src` will only be inherited to `dst`
 * if `getTabGroupRef(src)` was the previously displayed tab group.
 */
void inheritFieldValue(String src, String dst, boolean doCheckParent) {
  inheritFieldValue(src, dst, doCheckParent, true);
}

void inheritFieldValue(String src, String dst) {
  inheritFieldValue(src, dst, true);
}

inheritFieldValue("Project/Start/Sample_Prefix", "Water_Sample/Basic_Info/Water_Sample_Prefix", true);
inheritFieldValue("Project/Start/Station_Deposit", "Water_Sample/Basic_Info/Station_Deposit", true);
inheritFieldValue("Project/Start/Project", "Water_Sample/Basic_Info/Project", true);
inheritFieldValue("Project/Start/Area", "Water_Sample/Basic_Info/Area", true);
inheritFieldValue("Project/Start/Sample_Prefix", "Plant_Sample/Basic_Info/Plant_Sample_Prefix", true);
inheritFieldValue("Project/Start/Station_Deposit", "Plant_Sample/Basic_Info/Station_Deposit", true);
inheritFieldValue("Project/Start/Project", "Plant_Sample/Basic_Info/Project", true);
inheritFieldValue("Project/Start/Area", "Plant_Sample/Basic_Info/Area", true);
inheritFieldValue("Project/Start/Sample_Prefix", "Soil_Sample/Basic_Info/Soil_Sample_Prefix", true);
inheritFieldValue("Project/Start/Station_Deposit", "Soil_Sample/Basic_Info/Station_Deposit", true);
inheritFieldValue("Project/Start/Project", "Soil_Sample/Basic_Info/Project", true);
inheritFieldValue("Project/Start/Area", "Soil_Sample/Basic_Info/Area", true);
inheritFieldValue("Project/Start/Sample_Prefix", "Rock_Sample/Basic_Info/Rock_Sample_Prefix", true);
inheritFieldValue("Project/Start/Station_Deposit", "Rock_Sample/Basic_Info/Station_Deposit", true);
inheritFieldValue("Project/Start/Project", "Rock_Sample/Basic_Info/Project", true);
inheritFieldValue("Project/Start/Area", "Rock_Sample/Basic_Info/Area", true);

/******************************************************************************/
/*                            NEW TAB REDIRECTION                             */
/*                                                                            */
/* Causes a call to `newTab("tab/path")` to take the user to the specified    */
/* tab.                                                                       */
/******************************************************************************/
void newTab(String ref, Boolean resolveTabs) {
  if (!resolveTabs) {
    newTab(ref);
    return;
  }

  if (isTab(ref))
    redirectTab = ref;

  String tabGroupRef = getTabGroupRef(ref);
  if (isDisplayed(tabGroupRef))
    resolveNewTab();
  else
    newTabGroup(tabGroupRef);
}

void resolveNewTab() {
  if (isNull(redirectTab))
    return;
  if (!isTab(redirectTab))
    return;

  newTab(redirectTab);
  redirectTab = "";
}

for (String ref : getTabGroups()) {
  addOnEvent(ref, "show", "resolveNewTab()");
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String DROPDOWN_ITEM_VALUE = null;

String getDropdownItemValue() {
  return DROPDOWN_ITEM_VALUE;
}

for (entry : REF_TO_TYPE.entrySet()) {
  String type = entry.getValue();
  String ref  = entry.getKey();
  String evt  = "click";
  String stmt = "DROPDOWN_ITEM_VALUE = getFieldValue(\"%s\")";
  stmt = replaceFirst(stmt, ref);

  if (!type.equals("dropdown"))
    continue;
  if (hasNoUi(ref))
    continue;

  addOnEvent(ref, evt, stmt);
}

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/* Deprecated: Fetches the contents of a specifed vocabulary and stores it in
 * the given list.
 */
void fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}

void fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      if (isNull(result))
        result = new ArrayList();

      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
String getMakeVocabType(String ref) {
  if (isHier(ref)) return "hierarchical" + getType(ref);
  else             return ""             + getType(ref);
}

void makeVocabs() {
  for (String ref : DATA_REFS)
    if (!hasNoUi(ref))
      makeVocab(ref);
  for (String ref : VP_REF_TO_REF.keySet())
    if (!hasNoUi(ref))
      makeVocab(ref);
}

void makeVocab(String ref) {
  if (!hasMenuType(ref))
    return;

  if (hasVpRef(ref))
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(getVpRef(ref)));
  else
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(ref));
}

void makeVocab(String type, String ref, String attrName) {
  makeVocab(type, ref, attrName, null);
}
void makeVocab(String type, String ref, String attrName, List vocabExclusions) {
    makeVocab(type, ref, attrName, vocabExclusions, null);
}

/* Populates the ref specified vocabulary from the database based on the given
 * attribute name, where type is the type of the vocab to populate (checkbox,
 * dropdown, hierarchicaldropdown, hierarchicalpicture, list, picture, radio).
 * */
void makeVocab(
    String type,
    String ref,
    String attrName,
    List   vocabExclusions,
    String callbackFunction
){
  if (
      isNull(type) ||
      isNull(ref) ||
      isNull(attrName)
  ) {
    Log.e(
        "makeVocab()",
        "Can't make populate vocab whose type, ref or attribute is null"
    );
    return;
  }

  if (!isModuleLoaded()) {
    String head = "Logic Error";
    String body = "makeVocab called before module loaded";
    showWarning(head, body);
    return;
  }

  // Make a filtered vocab
  List menuEntries = getMenuEntries(attrName);
  if (vocabExclusions == null) vocabExclusions = new ArrayList();

  List filteredVocab = new ArrayList();
  for(item : menuEntries) {
    if (vocabExclusions.contains(item.get(1))) {
      Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
    } else {
      filteredVocab.add(item);
    }
  }

  // Determine whether to include a null option in the menu
  Boolean hasNull =
         !vocabExclusions.contains("")
      && !vocabExclusions.contains(null);

  // Populate menu
  populateMenu(type, ref, attrName, filteredVocab, hasNull);

  // Execute callback
  if (!isNull(callbackFunction))
    execute(callbackFunction);
}

boolean populateMenu(
    String  type,
    String  ref,
    String  attrName,
    List    entries,
    boolean hasNull
) {
  if (isNull(type))
    type = getMakeVocabType(ref);

  switch(type) {
    case "checkbox":
    case "CheckBoxGroup":
      populateCheckBoxGroup             (ref, entries);           break;
    case "dropdown":
    case "DropDown":
      populateDropDown                  (ref, entries, hasNull);  break;
    case "hierarchicaldropdown":
    case "HierarchicalDropDown":
      populateHierarchicalDropDown      (ref, attrName, hasNull); break;
    case "hierarchicalpicture":
    case "HierarchicalPictureGallery":
      populateHierarchicalPictureGallery(ref, attrName);          break;
    case "List":
    case "list":
      populateList                      (ref, entries);           break;
    case "picture":
    case "PictureGallery":
      populatePictureGallery            (ref, entries);           break;
    case "radio":
    case "RadioGroup":
      populateRadioGroup                (ref, entries);           break;
    default:
      Log.e(
          "populateMenu()",
          "Can't populate vocab; type not recognised"
      );
      return false;
  }
  return true;
}

boolean populateMenu(String ref, List entries) {
  return populateMenu(null, ref, "", entries, true);
}

/******************************************************************************/
/*                             MENU VALUE GETTER                              */
/*                                                                            */
/* Provides simple ways of getting a menu's vocabname as opposed to the       */
/* default, which is the vocabid.                                             */
/******************************************************************************/
// Map from vocabid to vocabname. Populated by `fetchMenuValues()`.
Map VOCABID_TO_VOCABNAME        = new HashMap();
Map VOCABNAME_TO_VOCABID        = new HashMap();
Map ATTRIB_NAME_TO_VOCABIDS     = new HashMap();
Map ATTRIB_NAME_TO_MENU_ENTRIES = new HashMap();

void setVocabId(String attrName, String vocabName, String vocabId) {
  String key = attrName + SEP + vocabName;
  String val = vocabId;

  VOCABNAME_TO_VOCABID.put(key, val);
}

String getVocabId(String attrName, String vocabName) {
  return VOCABNAME_TO_VOCABID.get(attrName + SEP + vocabName);
}

void addVocabId(String attrName, String vocabId) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attrName);
  if (vocabIds == null) {
    vocabIds = new ArrayList();
    ATTRIB_NAME_TO_VOCABIDS.put(attrName, vocabIds);
  }

  vocabIds.add(vocabId);
}

void addMenuEntry(
    String attrName,
    String vocabId,
    String vocabName,
    String picUrl
) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    ATTRIB_NAME_TO_MENU_ENTRIES.put(attrName, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(vocabId);
  menuEntry.add(vocabName);
  menuEntry.add(picUrl);

  menuEntries.add(menuEntry);
}

List getMenuEntries(String attrName) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) return new ArrayList();
  else                     return menuEntries;
}

List getVocabIdsFromAttribName(String attribName) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attribName);
  if (vocabIds == null) return new ArrayList();
  else                  return vocabIds;
}

List getVocabIdsFromRef(String ref) {
  String attribName = getAttributeName(ref);
  return getVocabIdsFromAttribName(attribName);
}

/*
 * Initialises `VOCABID_TO_VOCABNAME` with the (vocabid -> vocabname) mapping of
 * every menu.
 */
void fetchMenuValues() {
  String q = "";
  q += "   SELECT vocabid, vocabname, attributename, pictureurl";
  q += "     FROM vocabulary";
  q += "     JOIN attributekey USING (attributeid)";
  q += " ORDER BY vocabcountorder";

  FetchCallback populateHashMap = new FetchCallback() {
    onFetch(List result) {
      if (result == null)
        result = new ArrayList();

      for (List row : result) {
        String vocabId   = row.get(0);
        String vocabName = row.get(1);
        String attrName  = row.get(2);
        String picUrl    = row.get(3);

        // Populate VOCABID_TO_VOCABNAME
        VOCABID_TO_VOCABNAME.put(vocabId, vocabName);

        // Populate VOCABNAME_TO_VOCABID
        setVocabId(attrName, vocabName, vocabId);

        // Populate ATTRIB_NAME_TO_VOCABIDS
        addVocabId(attrName, vocabId);

        // Populate ATTRIB_NAME_TO_MENU_ENTRIES
        addMenuEntry(attrName, vocabId, vocabName, picUrl);
      }

      decAndExecIfModuleLoaded();
    }
  };

  incJobsTillLoaded();
  fetchAll(q, populateHashMap);
}

addOnEvent("module", "load", "makeVocabs()");
fetchMenuValues();

/* Returns a menu's vocabname, instead of the (counter-intuitive) vocabid.
 */
String getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  String val       = getFieldValue(ref);
  String vocabName = VOCABID_TO_VOCABNAME.get(val);

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

/* Shorthand for writing getFieldValue(ref, true). This function's use is
 * discouraged in favour of writing `getFieldValue(ref, true)`.
 */
String getMenuValue(String ref) {
  return getFieldValue(ref, true);
}

HashMap NODATA_DROPDOWNS = new HashMap(); // ref -> menu entries
void addNodataDropdownEntry(String ref, String entryKey, String entryVal) {
  List menuEntries = NODATA_DROPDOWNS.get(ref);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    NODATA_DROPDOWNS.put(ref, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(entryKey);
  menuEntry.add(entryVal);

  menuEntries.add(menuEntry);
}

addNodataDropdownEntry("Project/Start/Sample_Type", "{Water_Sample}", "{Water_Sample}");
addNodataDropdownEntry("Project/Start/Sample_Type", "{Plant_Sample}", "{Plant_Sample}");
addNodataDropdownEntry("Project/Start/Sample_Type", "{Soil_Sample}", "{Soil_Sample}");
addNodataDropdownEntry("Project/Start/Sample_Type", "{Rock_Sample}", "{Rock_Sample}");

for (entry : NODATA_DROPDOWNS.entrySet()) {
  String ref = entry.getKey();
  List   entries = entry.getValue();
  populateMenu(ref, entries);
}

/******************************************************************************/
/*                                  GPS/MAP                                   */
/******************************************************************************/
addOnEvent("Project/Start/GPS_Status", "show", "updateGPSDiagnostics()");

void updateGPSDiagnostics() {
  String diagnosticsRef = "Project/Start/GPS_Status";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

final String MAP_REF = "Project/Map/Map";
void centerMe() { centerOnCurrentPosition(MAP_REF); }
addOnEvent("Project/Map/Center_Me_1", "click", "centerMe()");

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/
void populateListForUsers(){
  String q = "";
  q  = " SELECT          userid ";
  q += "        ||'\\0'||fname ";
  q += "        ||'\\0'||lname ";
  q += "        ||'\\0'||email ";
  q += "        ||'\\0'||password ";
  q += "        ,        fname ";
  q += "        || ' ' ||lname ";
  q += "   FROM user ";
  q += "  WHERE userdeleted is null";

  fetchAll(q, new FetchCallback() {
    onFetch(result) {
      populateMenu(USER_MENU_PATH, result);
    }
  });
}

String getUserMenuValue(int i) {
  String selectedUser = getListItemValue();
  if (selectedUser == null)
    return "";

  String[] splitted = selectedUser.split("\\\\0");
  if (i < splitted.length) return splitted[i];
  else                     return "";

}

void resetUser() {
  userId   = "";
  username = "";
  User user = new User(userId, "", "", "", "");
  setUser(user);
}

void selectUser() {
  userId           = getUserMenuValue(0);
  String nameFirst = getUserMenuValue(1);
  String nameLast  = getUserMenuValue(2);
  String email     = getUserMenuValue(3);
  String password  = getUserMenuValue(4);
  username         = nameFirst + " " + nameLast;

  User user = new User(userId, nameFirst, nameLast, email, password);
  setUser(user);
}

void onClickSignup__ () {
  setSyncEnabled(true);
  showCreateUserDialog("onSignupSuccessful()");
}

void onSignupSuccessful() {
  showWarning("{signup_head}", "{signup_body}");
  populateListForUsers();
}

if (!isNull(USER_MENU_PATH)) {
  addOnEvent(getTabGroupRef(USER_MENU_PATH), "show", "resetUser()");

  addOnEvent(USER_MENU_PATH, "show",  "populateListForUsers()");
  addOnEvent(USER_MENU_PATH, "click", "selectUser()");
}



/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/ref to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
List fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

List fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
boolean isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
String validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "{please_fill_out_the_following_fields}";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "{all_fields_contain_valid_data}";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

void validateProject() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Project/Vars/Next_Water_Sample_ID", "{Next_Water_Sample_ID}"));
  f.add(fieldPair("Project/Vars/Next_Plant_Sample_ID", "{Next_Plant_Sample_ID}"));
  f.add(fieldPair("Project/Vars/Next_Soil_Sample_ID", "{Next_Soil_Sample_ID}"));
  f.add(fieldPair("Project/Vars/Next_Rock_Sample_ID", "{Next_Rock_Sample_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateWaterSample() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Water_Sample/pH_Eh/Temperature", "{Temperature}"));
  f.add(fieldPair("Water_Sample/pH_Eh/Conductivity", "{Conductivity}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}


/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map tabgroupToUuid = Collections.synchronizedMap(new HashMap());

String getUuid(String tabgroup) {
  return tabgroupToUuid.get(tabgroup);
}

void setUuid(String tabgroup, String uuid) {
  tabgroupToUuid.put(tabgroup, uuid);
}

void saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

void saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave      = true;
  String  id                  = getUuid(tabgroup);
  String  parentTabgroup_     = parentTabgroup;
  String  parentTabgroupUuid_ = getUuid(parentTabgroup_);
  Boolean userWasSet          = !username.equals("");

  callback += "; " + fun2str("executeOnEvent", new Object[]{tabgroup, "save"});

  parentTabgroup = null;

  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          callback
        );
      } else {
        execute(callback);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup, callback);
      }

    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(
      tabgroup,
      id,
      autoSaveGeo,
      autoSaveAttrs,
      saveCallback,
      enableAutosave
  );

  // Reset global variables
  autoSaveGeo   = null;
  autoSaveAttrs = null;
}

void setAutoSaveGeometry(List geometry) {
  autoSaveGeo = geometry;
}

void setToTimestampNow(String ref) {
  String now = getTimestampNow();
  setFieldValue(ref, now);
}

String getTimestampNow() {
  String fmt = "yyyy-MM-dd HH:mm:ssZ";
  return getTimestampNow(fmt);
}

String getTimestampNow(String fmt, boolean doInsertColon) {
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  // Insert colon into timezone (e.g. +1000 -> +10:00)
  if (doInsertColon) {
    String left; String right;

    left    = dateStr.substring(0, dateStr.length() - 2);
    right   = dateStr.substring(   dateStr.length() - 2);
    dateStr = left + ":" + right;
  }

  return dateStr;
}

String getTimestampNow(String fmt) {
  return getTimestampNow(fmt, true);
}

void populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  tabgroupToAuthor.put("Project", "Project/Start/Project_author");
  tabgroupToAuthor.put("Water_Sample", "Water_Sample/Basic_Info/Water_Sample_author");
  tabgroupToAuthor.put("Plant_Sample", "Plant_Sample/Basic_Info/Plant_Sample_author");
  tabgroupToAuthor.put("Soil_Sample", "Soil_Sample/Basic_Info/Soil_Sample_author");
  tabgroupToAuthor.put("Rock_Sample", "Rock_Sample/Basic_Info/Rock_Sample_author");
  tabgroupToTimestamp.put("Photolog", "Photolog/Photolog/Photolog_timestamp");
  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  if (!isNull(authorPath))    setFieldValue(authorPath,    username);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, getTimestampNow());
}

void onShowWaterSample () {
  saveTabGroup("Water_Sample");
}

void onShowPlantSample () {
  saveTabGroup("Plant_Sample");
}

void onShowSoilSample () {
  saveTabGroup("Soil_Sample");
}

void onShowRockSample () {
  saveTabGroup("Rock_Sample");
}

void onShowpH () {
  saveTabGroup("pH");
}

void onShowEh () {
  saveTabGroup("Eh");
}

void onShowPhotolog () {
  saveTabGroup("Photolog");
}

void onShowShape () {
  saveTabGroup("Shape");
}

addOnEvent("Water_Sample", "show", "onShowWaterSample()");
addOnEvent("Plant_Sample", "show", "onShowPlantSample()");
addOnEvent("Soil_Sample", "show", "onShowSoilSample()");
addOnEvent("Rock_Sample", "show", "onShowRockSample()");
addOnEvent("pH", "show", "onShowpH()");
addOnEvent("Eh", "show", "onShowEh()");
addOnEvent("Photolog", "show", "onShowPhotolog()");
addOnEvent("Shape", "show", "onShowShape()");

void onClickLogoLogin () {
  newTab("User", true);
}

void onClickUserUsers () {
  newTab("Project", true);
}

void onClickProjectCreateShape () {
  parentTabgroup__ = "Project";
  newShape();
}

void onClickProjectNewWaterSample () {
  parentTabgroup__ = "Project";
  newWaterSample();
}

void onClickProjectNewPlantSample () {
  parentTabgroup__ = "Project";
  newPlantSample();
}

void onClickProjectNewSoilSample () {
  parentTabgroup__ = "Project";
  newSoilSample();
}

void onClickProjectNewRockSample () {
  parentTabgroup__ = "Project";
  newRockSample();
}







void onClickWaterSampleNewPhotolog () {
  newPhotolog("Water_Sample");
}

void onClickPlantSampleNewPhotolog () {
  newPhotolog("Plant_Sample");
}

void onClickSoilSampleNewPhotolog () {
  newPhotolog("Soil_Sample");
}

void onClickRockSampleNewPhotolog () {
  newPhotolog("Rock_Sample");
}
addOnEvent("Logo/Logo_Tab/Login", "click", "onClickLogoLogin()");
addOnEvent("User/User/Users", "click", "onClickUserUsers()");
addOnEvent("Project/Map/Create_Shape", "click", "onClickProjectCreateShape()");
addOnEvent("Project/Vars/New_Water_Sample", "click", "onClickProjectNewWaterSample()");
addOnEvent("Project/Vars/New_Plant_Sample", "click", "onClickProjectNewPlantSample()");
addOnEvent("Project/Vars/New_Soil_Sample", "click", "onClickProjectNewSoilSample()");
addOnEvent("Project/Vars/New_Rock_Sample", "click", "onClickProjectNewRockSample()");
addOnEvent("Water_Sample/Photolog/New_Photolog", "click", "onClickWaterSampleNewPhotolog()");
addOnEvent("Plant_Sample/Photolog/New_Photolog", "click", "onClickPlantSampleNewPhotolog()");
addOnEvent("Soil_Sample/Photolog/New_Photolog", "click", "onClickSoilSampleNewPhotolog()");
addOnEvent("Rock_Sample/Photolog/New_Photolog", "click", "onClickRockSampleNewPhotolog()");

/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/
addOnEvent("Water_Sample/Basic_Info/Photos_Button_1", "click", "attachPictureTo(\"Water_Sample/Basic_Info/Photos\")");
addOnEvent("Plant_Sample/Basic_Info/Photos_Button_1", "click", "attachPictureTo(\"Plant_Sample/Basic_Info/Photos\")");
addOnEvent("Soil_Sample/Basic_Info/Photos_Button_1", "click", "attachPictureTo(\"Soil_Sample/Basic_Info/Photos\")");
addOnEvent("Rock_Sample/Lithological_Info/Photos_Button_1", "click", "attachPictureTo(\"Rock_Sample/Lithological_Info/Photos\")");
addOnEvent("Water_Sample/Basic_Info/Sketches_Button_1", "click", "attachFileTo(\"Water_Sample/Basic_Info/Sketches\")");
addOnEvent("Plant_Sample/Basic_Info/Sketches_Button_1", "click", "attachFileTo(\"Plant_Sample/Basic_Info/Sketches\")");
addOnEvent("Soil_Sample/Basic_Info/Sketches_Button_1", "click", "attachFileTo(\"Soil_Sample/Basic_Info/Sketches\")");
addOnEvent("Rock_Sample/Lithological_Info/Sketches_Button_1", "click", "attachFileTo(\"Rock_Sample/Lithological_Info/Sketches\")");

/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/
addOnEvent("Water_Sample/Basic_Info/View_Sketch", "click", "viewArchEntAttachedFiles(getUuid(\"Water_Sample\"))");
addOnEvent("Plant_Sample/Basic_Info/View_Sketch", "click", "viewArchEntAttachedFiles(getUuid(\"Plant_Sample\"))");
addOnEvent("Soil_Sample/Basic_Info/View_Sketch", "click", "viewArchEntAttachedFiles(getUuid(\"Soil_Sample\"))");
addOnEvent("Rock_Sample/Lithological_Info/View_Sketch", "click", "viewArchEntAttachedFiles(getUuid(\"Rock_Sample\"))");

/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
void removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

void addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Project");
  tabgroupsToValidate.add("Water_Sample");
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(isNull(getUuid(tabgroup))) {
        showAlert(
            "{Warning}",
            "{The_current_record_has_not_been_saved_yet}",
            fun2str("newRecord", new Object[]{tabgroup, true}),
            ""
        );
      } else {
        newRecord(tabgroup, true);
        showToast("{New_record_created}");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
        duplicateRecord(tabgroup);
      } else {
        showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
void saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
void saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
void saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;
  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb);
      addReln(entity2, rel_id, e2verb);
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  });
}

// Makes a new record of the given tabgroup
void newRecord(String tabgroup) {
  boolean doUpdateRelVars = false;
  newRecord(tabgroup, doUpdateRelVars);
}

void newRecord(String tabgroup, String parentTabGroup) {
  parentTabgroup   = parentTabGroup;
  parentTabgroup__ = parentTabGroup;
  newRecord(tabgroup, false);
}

void newRecord(String tabgroup, boolean doUpdateRelVars) {
  if (doUpdateRelVars) {
    String uuidOld = getUuid(getDisplayedTabGroup());
    String q       = getDuplicateRelnQuery(uuidOld); // We're not duplicating
                                                     // anything, just getting
                                                     // the parent's UUID.

    cancelTabGroup(tabgroup, false);

    FetchCallback updateRelVars = new FetchCallback() {
      onFetch(result) {
        if (result != null && result.size() >= 1) {
          parentTabgroup   = result.get(0).get(4);
          parentTabgroup   = parentTabgroup.replaceAll(" ", "_");
          parentTabgroup__ = parentTabgroup;
        }

        newRecord(tabgroup, false);
      }
    };
    fetchAll(q, updateRelVars);
    return;
  }

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
void deleteRecord(String tabgroup) {
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert(
        "{Confirm_Deletion}",
        "{Press_OK_to_Delete_this_Record}",
        fun2str("reallyDeleteRecord", tabgroup),
        "doNotDelete()"
    );
  }

  Log.d("deleteRecord", tabgroup);
}

void reallyDeleteRecord(String tabgroup) {
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  executeOnEvent(tabgroup, "delete");
}

// Duplicates the current record of the given tabgroup
void duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
String getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

String getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid, parentaenttypename, childaenttypename"+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

void makeDuplicateRelationships(fetchedAttributes, String newUuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String parentUuid             = savedAttribute.get(3);
    String childArchEntType       = savedAttribute.get(5);

    String onSaveRel              = "onSave" + childArchEntType.replaceAll(" ", "") + "__()";

    saveEntitiesToHierRel(
        relntypename,
        parentUuid,
        newUuid,
        parentparticipatesverb,
        childparticipatesverb,
        onSaveRel
    );
  }
}

// generic get extra attributes
List getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

void loadEntity() {
  loadEntity(false);
}
void loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

void loadEntityFrom(String entityID) {
  loadEntityFrom(entityID, "");
}

void loadEntityFrom(String entityID, String onFail) {
  if (isNull(entityID)) {
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      if (
          result               == null ||
          result       .size() == 0    ||
          result.get(0).size() == 0
      ) {
        String head  = "{err_load_entity_head}";
        String body  = "{err_load_entity_body}";
        showWarning(head, body);
        execute(onFail);
        return;
      }

      String archEntName = result.get(0).get(0).replaceAll(" ", "");
      String loadFunction = "load" + archEntName + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}


void newWaterSample(String parent){
  String tabgroup = "Water_Sample";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  if (isNull("Project/Vars/Next_Water_Sample_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Water_Sample/Basic_Info/Water_Sample_ID");

  executeOnEvent(tabgroup, "create");
}

void newWaterSample (){
  newWaterSample(null);
}

void newPlantSample(String parent){
  String tabgroup = "Plant_Sample";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  if (isNull("Project/Vars/Next_Plant_Sample_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Plant_Sample/Basic_Info/Plant_Sample_ID");

  executeOnEvent(tabgroup, "create");
}

void newPlantSample (){
  newPlantSample(null);
}

void newSoilSample(String parent){
  String tabgroup = "Soil_Sample";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  if (isNull("Project/Vars/Next_Soil_Sample_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Soil_Sample/Basic_Info/Soil_Sample_ID");

  executeOnEvent(tabgroup, "create");
}

void newSoilSample (){
  newSoilSample(null);
}

void newRockSample(String parent){
  String tabgroup = "Rock_Sample";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  if (isNull("Project/Vars/Next_Rock_Sample_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Rock_Sample/Basic_Info/Rock_Sample_ID");

  executeOnEvent(tabgroup, "create");
}

void newRockSample (){
  newRockSample(null);
}

void newpH(String parent){
  String tabgroup = "pH";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newpH (){
  newpH(null);
}

void newEh(String parent){
  String tabgroup = "Eh";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newEh (){
  newEh(null);
}

void newPhotolog(String parent){
  String tabgroup = "Photolog";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newPhotolog (){
  newPhotolog(null);
}

void newShape(String parent){
  String tabgroup = "Shape";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newShape (){
  newShape(null);
}
void duplicateWaterSample(){
  String tabgroup = "Water_Sample";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Water_Sample/Basic_Info/Water_Sample_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Water_Sample/Basic_Info/Photos", new ArrayList());
  populateFileList("Water_Sample/Basic_Info/Sketches", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photos");
      excludeAttributes.add("Sketches");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicatePlantSample(){
  String tabgroup = "Plant_Sample";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Plant_Sample/Basic_Info/Plant_Sample_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Plant_Sample/Basic_Info/Photos", new ArrayList());
  populateFileList("Plant_Sample/Basic_Info/Sketches", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photos");
      excludeAttributes.add("Sketches");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateSoilSample(){
  String tabgroup = "Soil_Sample";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Soil_Sample/Basic_Info/Soil_Sample_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Soil_Sample/Basic_Info/Photos", new ArrayList());
  populateFileList("Soil_Sample/Basic_Info/Sketches", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photos");
      excludeAttributes.add("Sketches");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateRockSample(){
  String tabgroup = "Rock_Sample";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Rock_Sample/Basic_Info/Rock_Sample_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Rock_Sample/Lithological_Info/Photos", new ArrayList());
  populateFileList("Rock_Sample/Lithological_Info/Sketches", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photos");
      excludeAttributes.add("Sketches");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicatepH(){
  String tabgroup = "pH";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateEh(){
  String tabgroup = "Eh";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicatePhotolog(){
  String tabgroup = "Photolog";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateShape(){
  String tabgroup = "Shape";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
addOnEvent("Water_Sample", "save", "populateEntityListsOfArchEnt(\"Water_Sample\")");
addOnEvent("Plant_Sample", "save", "populateEntityListsOfArchEnt(\"Plant_Sample\")");
addOnEvent("Soil_Sample", "save", "populateEntityListsOfArchEnt(\"Soil_Sample\")");
addOnEvent("Rock_Sample", "save", "populateEntityListsOfArchEnt(\"Rock_Sample\")");
addOnEvent("pH", "save", "populateEntityListsOfArchEnt(\"pH\")");
addOnEvent("Eh", "save", "populateEntityListsOfArchEnt(\"Eh\")");
addOnEvent("Photolog", "save", "populateEntityListsOfArchEnt(\"Photolog\")");
addOnEvent("Shape", "save", "populateEntityListsOfArchEnt(\"Shape\")");

void doNotDelete(){
  showToast("{Delete_Cancelled}");
}

addOnEvent("Logo", "show", "removeNavigationButtons()");
addOnEvent("User", "show", "removeNavigationButtons()");
addOnEvent("Project", "show", "removeNavigationButtons()");
addOnEvent("Water_Sample", "show", "removeNavigationButtons()");
addOnEvent("Plant_Sample", "show", "removeNavigationButtons()");
addOnEvent("Soil_Sample", "show", "removeNavigationButtons()");
addOnEvent("Rock_Sample", "show", "removeNavigationButtons()");
addOnEvent("pH", "show", "removeNavigationButtons()");
addOnEvent("Eh", "show", "removeNavigationButtons()");
addOnEvent("Photolog", "show", "removeNavigationButtons()");
addOnEvent("Shape", "show", "removeNavigationButtons()");
addOnEvent("Water_Sample", "show", "addNavigationButtons(\"Water_Sample\")");
addOnEvent("Plant_Sample", "show", "addNavigationButtons(\"Plant_Sample\")");
addOnEvent("Soil_Sample", "show", "addNavigationButtons(\"Soil_Sample\")");
addOnEvent("Rock_Sample", "show", "addNavigationButtons(\"Rock_Sample\")");
addOnEvent("pH", "show", "addNavigationButtons(\"pH\")");
addOnEvent("Eh", "show", "addNavigationButtons(\"Eh\")");
addOnEvent("Photolog", "show", "addNavigationButtons(\"Photolog\")");
addOnEvent("Shape", "show", "addNavigationButtons(\"Shape\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Project/Search"               , "show"  , "search()");
addOnEvent("Project/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Project/Search/Search_Button" , "click" , "search()");
addOnEvent("Project/Search/Search_Term"   , "click" , "clearSearch()");

addOnEvent("Project/Search/Entity_Types"  , "click" , "search()");
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Water_Sample}", "Water Sample"));
entityTypes.add(new NameValuePair("{Plant_Sample}", "Plant Sample"));
entityTypes.add(new NameValuePair("{Soil_Sample}", "Soil Sample"));
entityTypes.add(new NameValuePair("{Rock_Sample}", "Rock Sample"));
entityTypes.add(new NameValuePair("{pH}", "pH"));
entityTypes.add(new NameValuePair("{Eh}", "Eh"));
entityTypes.add(new NameValuePair("{Photolog}", "Photolog"));
entityTypes.add(new NameValuePair("{Shape}", "Shape"));
populateDropDown("Project/Search/Entity_Types", entityTypes);

void clearSearch(){
  setFieldValue("Project/Search/Search_Term","");
}

void search(){
  String refEntityList  = "Project/Search/Entity_List";
  String refSearchTerm  = "Project/Search/Search_Term";
  String refEntityTypes = "Project/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE {term}||'%'  "+
                       "                   AND ( aenttypename = {type} OR '' = {type} ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("Project");

  Log.d("Module", "Search query: " + searchQuery);
}

void loadWaterSampleFrom(String uuid) {
  String tabgroup = "Water_Sample";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadPlantSampleFrom(String uuid) {
  String tabgroup = "Plant_Sample";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadSoilSampleFrom(String uuid) {
  String tabgroup = "Soil_Sample";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadRockSampleFrom(String uuid) {
  String tabgroup = "Rock_Sample";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadpHFrom(String uuid) {
  String tabgroup = "pH";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadEhFrom(String uuid) {
  String tabgroup = "Eh";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadPhotologFrom(String uuid) {
  String tabgroup = "Photolog";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadShapeFrom(String uuid) {
  String tabgroup = "Shape";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}

/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("Water_Sample/Basic_Info/Take_From_GPS_1", "click", "takePoint(\"Water_Sample\")");
addOnEvent("Plant_Sample/Basic_Info/Take_From_GPS_1", "click", "takePoint(\"Plant_Sample\")");
addOnEvent("Soil_Sample/Basic_Info/Take_From_GPS_1", "click", "takePoint(\"Soil_Sample\")");
addOnEvent("Rock_Sample/Basic_Info/Take_From_GPS_1", "click", "takePoint(\"Rock_Sample\")");

Map getTakeFromGpsMappings() {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Water_Sample", "Water_Sample/Basic_Info");
tabgroupToTabRef.put("Plant_Sample", "Plant_Sample/Basic_Info");
tabgroupToTabRef.put("Soil_Sample", "Soil_Sample/Basic_Info");
tabgroupToTabRef.put("Rock_Sample", "Rock_Sample/Basic_Info");
  return tabgroupToTabRef;
}

/* Takes the current point using gps. */
void takePoint(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = tabgroup.replaceAll("_", " ");
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)){
    showToast("{Please_enter_data_first}");
    return;
  }

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy", accuracy);

  saveArchEnt(currentUuid, archEntType, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      print("[takePoint()] Added geometry: " + geolist);
      fillInGPS(tabgroup);
    }
  });
}

/* Sets the value of GPS views for the given tab ref. */
void fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing"  , result.get(3));
    }
  });
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Accuracy"  , "");
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
  setFieldValue(tabRef + "/Easting"   , "");
  setFieldValue(tabRef + "/Northing"  , "");
}

/******************************************************************************/
/*               LOADING AND CREATION OF RECORDS FROM QR CODES                */
/******************************************************************************/
import java.util.regex.Pattern;
import java.util.regex.Matcher;


void bindQrScanning(String refButton, String refChild, boolean isChild) {
  String event = "click";

  String parentTabGroup;
  if (isChild) parentTabGroup = getTabGroupRef(refButton);
  else         parentTabGroup = null;

  String stmt = fun2str(
      "scanRecordFromQrCode",
      new Object[]{parentTabGroup, refChild}
  );

  addOnEvent(refButton, event, stmt);
}

void scanRecordFromQrCode(String parentTabGroup, String refChild) {
  String callback = fun2str(
      "loadOrCreateEntityFromScannedAttrib",
      new Object[]{parentTabGroup, refChild}
  );
  scanCode(callback);
}

void loadOrCreateEntityFromScannedAttrib(
    String parentTabGroup,
    String refChild
) {
  String code = getLastScanContents();

  String  uuidString  = "";
  Pattern uuidPattern = Pattern.compile("(\\d{19})");
  Matcher matcher     = uuidPattern.matcher(code);
  while (matcher.find())
    uuidString = matcher.group(1);

  if (isNull(uuidString)) {
    showWarning("{load_scanned_err_head}", "{load_scanned_err_body}");
    return;
  }

  loadEntityFrom(uuidString);
}



/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
Map AUTONUM_DEST_TO_SOURCE = new HashMap();
AUTONUM_DEST_TO_SOURCE.put("Water_Sample/Basic_Info/Water_Sample_ID", "Project/Vars/Next_Water_Sample_ID");
AUTONUM_DEST_TO_SOURCE.put("Plant_Sample/Basic_Info/Plant_Sample_ID", "Project/Vars/Next_Plant_Sample_ID");
AUTONUM_DEST_TO_SOURCE.put("Soil_Sample/Basic_Info/Soil_Sample_ID", "Project/Vars/Next_Soil_Sample_ID");
AUTONUM_DEST_TO_SOURCE.put("Rock_Sample/Basic_Info/Rock_Sample_ID", "Project/Vars/Next_Rock_Sample_ID");

/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
Integer incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
Integer incField(String ref) {
  return incField(ref, 1);
}

for (String ref : getStartingIdRefs())
  persistOverSessions(ref, "1");

void incAutoNum(String destPath) {
  String sourcePath = AUTONUM_DEST_TO_SOURCE.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}
/******************************************************************************/
/*                         POPULATION VIA <MARKDOWN>                          */
/******************************************************************************/
populateWebViewHtml("Logo/Logo_Tab/CSIRO_Logo", "<div class=\"figure\">\n<img src=\"files/data/CSIRO_Grad_RGB_hr.jpg\" />\n\n</div>\n<p>This module was generated by the FAIMS Team for CSIRO, Nathan Reid and Jens Klump and is distributed under a GPL v3 license.</p>\n");

/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `ref`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
void populateMenuWithEntities (
  String ref,
  String parentUuid,
  String entType,
  String relType
) {
  String viewType = getType(ref);

  String limit;
  switch (viewType) {
    case "dropdown": limit = "";                   break;
    case "list":     limit = " LIMIT ? OFFSET ? "; break;
  }

  String getChildEntitiesQ = "" +
    "SELECT childuuid, response " +
    "  FROM (select childuuid, createdat" +
    "          from (select childuuid, createdat, relationshipid" +
    "                    from parentchild" +
    "                   where parentuuid = '" + parentUuid + "' " +
    "                   and (childaenttypename = '"+entType+"')" +
    "                   order by createdat           " +
    "                   )" +
    "          JOIN (SELECT relationshipid   " +
    "                  FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  " +
    "                 WHERE relntypename = '"+relType+"') USING (relationshipid)" +
    "          order by createdat desc" +
    limit +
    "        )  " +
    "  JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)   " +
    "  order by createdat desc";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response " +
    limit;

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result, true);
    }
  };

  String q;
  if (relType.equals("")) q = getEntitiesQ;
  else                    q = getChildEntitiesQ;

  switch (viewType) {
    case "dropdown": fetchAll(q, cbPopulateDropDown); break;
    case "list":     populateCursorList(ref, q, 25); break;
  }
}

void populateEntityListsInTabGroup(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  for (m : ENTITY_MENUS) {
    String ref          = m[0];
    String menuTabGroup = getTabGroupRef(ref);
    String functionCall = getEntityMenuPopulationFunction(m);

    if (menuTabGroup.equals(tabGroup))
      execute(functionCall);
  }
}

/* Populates each list containing records whose archent type is the same as that
 * of `tabGroup`.
 */
void populateEntityListsOfArchEnt(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  String archEntTypeToPopulate = getArchEntType(tabGroup);

  for (m : ENTITY_MENUS) {
    String archEntType  = m[2];
    String functionCall = getEntityMenuPopulationFunction(m);

    if (archEntType.equals(archEntTypeToPopulate))
      execute(functionCall);
  }
}

String getEntityMenuPopulationFunction(String[] menuDescriptor) {
  String ref            = menuDescriptor[0];
  String parentUuidCall = menuDescriptor[1];
  String entType        = menuDescriptor[2];
  String relType        = menuDescriptor[3];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + ref            + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  return functionCall;
}

ENTITY_MENUS = new ArrayList();
ENTITY_MENUS.add(new String[] {
    "Water_Sample/Photolog/Existing_Photologs",
    "getUuid(\"Water_Sample\")",
    "Photolog",
    "Water Sample - Photolog"
});
ENTITY_MENUS.add(new String[] {
    "Plant_Sample/Photolog/Existing_Photologs",
    "getUuid(\"Plant_Sample\")",
    "Photolog",
    "Plant Sample - Photolog"
});
ENTITY_MENUS.add(new String[] {
    "Soil_Sample/Photolog/Existing_Photologs",
    "getUuid(\"Soil_Sample\")",
    "Photolog",
    "Soil Sample - Photolog"
});
ENTITY_MENUS.add(new String[] {
    "Rock_Sample/Photolog/Existing_Photologs",
    "getUuid(\"Rock_Sample\")",
    "Photolog",
    "Rock Sample - Photolog"
});
for (m : ENTITY_MENUS) {
  String functionCall = getEntityMenuPopulationFunction(m);
  execute(functionCall);
}
for (m : ENTITY_MENUS) {
  String menuRef = m[0];

  String ref = getTabRef(menuRef);
  String evt = "show";
  String cmd = "clearField(\"{menuRef}\")";
  cmd = replaceFirst(cmd, "{menuRef}", menuRef);

  addOnEvent(ref, evt, cmd);
}

addOnEvent("Water_Sample/Photolog/Existing_Photologs", "click", "loadEntity()");
addOnEvent("Plant_Sample/Photolog/Existing_Photologs", "click", "loadEntity()");
addOnEvent("Soil_Sample/Photolog/Existing_Photologs", "click", "loadEntity()");
addOnEvent("Rock_Sample/Photolog/Existing_Photologs", "click", "loadEntity()");
/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/************************************ MAP *************************************/
DATA_ENTRY_LAYER    = "Data Entry Layer";
DATA_ENTRY_LAYER_ID = createCanvasLayer(MAP_REF, DATA_ENTRY_LAYER);

setSelectedLayer(MAP_REF, DATA_ENTRY_LAYER);
setMapZoom(MAP_REF, 15.0f);

isEntity = true;
queryName = "Shape";
querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Shape'";
ps = createPointStyle(10, Color.YELLOW, 0.2f, 0.5f);
ls = createLineStyle(10, Color.YELLOW, 0.05f, 0.3f, null);
pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
ts = createTextStyle(10, Color.YELLOW, 30, Typeface.SANS_SERIF);
showDatabaseLayer(MAP_REF, "Shape Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);

void refreshMap() {
  refreshMap(MAP_REF);
}

addOnEvent("Project/Map", "show",  "refreshMap()");
/*********************************** SHAPE ************************************/
void clearGeometry() {
  List geometry = getGeometryList(MAP_REF, DATA_ENTRY_LAYER_ID);

  if (geometry == null)     return;
  if (geometry.size() == 0) return;

  for (geom : geometry) {
    print("Geometry cleared:" + geom.userData.geomId);
    clearGeometry(MAP_REF, geom.userData.geomId);
  }
}

boolean checkForGeometry() {
  List geometry = getGeometryList(MAP_REF, DATA_ENTRY_LAYER_ID);
  if (geometry == null || geometry.size() == 0) {
    String head = "Cannot Create Shape";
    String body = "At least one shape must be present on the data entry layer.";
    showWarning(head, body);

    return false;
  } else {
    return true;
  }
}

addOnEventCond("Project/Map/Create_Shape", "click", "checkForGeometry()");
addOnEvent(
    "Project/Map/Create_Shape",
    "click",
    "setAutoSaveGeometry(getGeometryList(MAP_REF, DATA_ENTRY_LAYER_ID))",
    Integer.MAX_VALUE
);
addOnEvent("Shape", "save", "clearGeometry()");
/****************************** SEARCH EXTENSION ******************************/
/* Implements an extension to the search page which allows users to           */
/* constrain their searches by user.                                          */
/******************************************************************************/
delOnEvent("Project/Search", "show", "search()");
addOnEvent("Project/Search", "show", "populateSelectUser()");

addOnEvent("Project/Search/Select_User", "click", "search()");

void populateSelectUser(){
  String refSearchUsers = "Project/Search/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null "+
                                   " UNION " +
                                   "SELECT -1, '{All}'";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
      search();
    }
  });
}


// Overrides auto-generated definition
void search(){
  String tabgroup = "Project";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";
  String refSelectUser  = tabgroup + "/Search/Select_User";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String user = getFieldValue(refSelectUser);
  if (isNull(user)) return;
  String searchQuery = "SELECT uuid, response " +
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  " +
                       " WHERE uuid in (SELECT uuid " +
                       "                  FROM latestNonDeletedArchEntIdentifiers " +
                       "                 WHERE measure LIKE '{term}%'  " +
                       "                   AND ( aenttypename LIKE '{type}' OR '' = '{type}' ) " +
                       "                   AND ( userid = {user} OR -1 = {user}) " +
                       "                ) " +
                       " ORDER BY response " +
                       " LIMIT ? " +
                       "OFFSET ? ";
  searchQuery = replaceFirst(searchQuery, "{term}", term);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{user}", user);
  searchQuery = replaceFirst(searchQuery, "{user}", user);

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}
/***************************** DUPLICATE CHECKING *****************************/

void checkForDuplicates() {
  String query = "select uuid, response || ' created at: ' || datetime(createdAt, 'localtime') || ' created by: '||createdBy " + 
      "from latestNonDeletedArchEntFormattedIdentifiers join createdModifiedAtBy using (uuid) " +
      "where response in ( " +
      "select response from latestNonDeletedArchEntFormattedIdentifiers group by response having count(response) > 1) " +
      " and aenttypename like '%Sample';";
  fetchAll(query, new FetchCallback() {
    onFetch(result) {
      if (isNull(result)) {
        showToast("{Valid_Starting_Sample_ID}");
        result = new ArrayList();
        result.add(new NameValuePair("{No_Duplicates_Found}", ""));
      } else {
        showToast(result.size() + " {Duplicate_IDs_Found}");
      }
      print("[checkForDuplicates()] Checking for duplicates: " + result);
      populateList("Project/Start/Duplicate_ID_List", result);
      refreshTabgroupCSS("Project");
    }
  });
}

populateMenu("Project/Start/Duplicate_ID_List", new ArrayList());
addOnEvent("Project/Start/Check_for_Duplicates", "click", "checkForDuplicates();");
onEvent("Project/Start/Duplicate_ID_List", "click", "loadEntity();");
/************************** CREATE NEW SAMPLE BUTTON **************************/
void onClickCreateNewSample() {
  String refType = "Project/Start/Sample_Type";
  String refPre  = "Project/Start/Sample_Prefix";
  String refId   = "Project/Start/Sample_Starting_ID";

  String valType = getFieldValue(refType);
  String valPre  = getFieldValue(refPre );
  String valId   = getFieldValue(refId  );

  if (isNull(valType)) {
    String head = "'Sample Type' Must Be Selected to Proceed";
    String body = "Please select a Sample Type.";
    showWarning(head, body);
    return;
  }

  if (isNull(valPre)) {
    String head = "'Sample Prefix' Must Be Entered to Proceed";
    String body = "Please enter a Sample Prefix.";
    showWarning(head, body);
    return;
  }

  if (isNull(valId)) {
    String head = "'Sample Starting ID' Must Be Entered to Proceed";
    String body = "Please enter a Sample Starting ID.";
    showWarning(head, body);
    return;
  }

  if ("{Water_Sample}".equals(valType)) onClickProjectNewWaterSample();
  if ("{Plant_Sample}".equals(valType)) onClickProjectNewPlantSample();
  if ("{Rock_Sample}" .equals(valType)) onClickProjectNewRockSample();
  if ("{Soil_Sample}" .equals(valType)) onClickProjectNewSoilSample();
}

addOnEvent(
    "Project/Start/Create_New_Sample",
    "click",
    "onClickCreateNewSample()"
);
/******************************* AUTONUMBERING ********************************/
final String AUTONUM_SOURCE = "Project/Start/Sample_Starting_ID";

assert(isValidRef(AUTONUM_SOURCE));

for (k : AUTONUM_DEST_TO_SOURCE.keySet())
  AUTONUM_DEST_TO_SOURCE.put(k, AUTONUM_SOURCE);

persistOverSessions(AUTONUM_SOURCE, "1");
/******************************* PROJECT AUTHOR *******************************/
populateProjectAuthorAndTimestamp() {
  populateAuthorAndTimestamp("Project");
}

addOnEvent("Project", "show", "populateProjectAuthorAndTimestamp()");
/********************************* TIMESTAMPS *********************************/

String getFmtStrTimestamp() {
  String dateStr = getTimestampNow("ddMMMyy", false);
  dateStr = replaceFirst(dateStr, ".", "");
  return dateStr;
}

String getFieldTimestamp() {
  String dateStr = getTimestampNow("yyyy-MM-dd HH:mm:ss z", false);
  dateStr = replaceFirst(dateStr, ".", "");
  return dateStr;
}

void setTimestamps(String tabgroup) {
  String refField  = tabgroup + "/Basic_Info/Timestamp_Field";
  String refFmtStr = tabgroup + "/Vars/Timestamp";

  setFieldValue(refField,  getFieldTimestamp());
  setFieldValue(refFmtStr, getFmtStrTimestamp());
}

Callable SetTimestamps(String tabgroup) {
  void call() { setTimestamps(tabgroup); }
  return this;
}

addOnEvent("Water_Sample", "create", SetTimestamps("Water_Sample"));
addOnEvent("Soil_Sample",  "create", SetTimestamps("Soil_Sample"));
addOnEvent("Plant_Sample", "create", SetTimestamps("Plant_Sample"));
addOnEvent("Rock_Sample",  "create", SetTimestamps("Rock_Sample"));
/********************************* DYNAMIC UI *********************************/
// TODO: Put into autogen
getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  val = getFieldValue(ref);
  vocabName = null;

  if (val instanceof String) {
    vocabName = VOCABID_TO_VOCABNAME.get(val);
  } else if (val instanceof List) {
    vocabName = new ArrayList();
    for (NameValuePair pair : pairs) {
      String name = pair.getName();
      name = VOCABID_TO_VOCABNAME.get(name);

      vocabName.add(name);
    }
  }

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

boolean hasValueInField(List vals, String ref) {
  // Get field value(s)
  fieldVals = null;
  if (hasMenuType(ref)) fieldVals = getMenuValue (ref);
  else                  fieldVals = getFieldValue(ref);

  // Convert field value into a list
  if (!(fieldVals instanceof List)) {
    List fieldVals_ = new ArrayList();
    fieldVals_.add(fieldVals);
    fieldVals = fieldVals_;
  }

  // Check if `vals` and `fieldVals` are intersecting sets
  for (String fieldVal : fieldVals) {
    for (String val : vals) {
      if (fieldVal.equals(val))
        return true;
    }
  }

  return false;
}

void hideDynamicField(String ref) {
  print("hiding...");
  String uuid       = getUuid(getTabGroupRef(ref));
  String attribName = getAttributeName(ref);
  String valView;

  if (hasView(ref)) {
    valView = getFieldValue(ref);
    removeView(ref);
  }

  if (!isNull(valView)) {
    // Flag Feature Type as `deleted`.
    q  = " INSERT INTO aentvalue (UUID, UserID, AttributeID, Deleted)";
    q += " SELECT '{uuid}', {userId}, attributeid, 1";
    q += " FROM  attributekey";
    q += " WHERE attributename = '{attributename}'";
    q  = replaceFirst(q, "{uuid}", uuid);
    q  = replaceFirst(q, "{userId}", userId);
    q  = replaceFirst(q, "{attributename}", attribName);

    fetchOne(q);
  }
}

void showDynamicField(String ref) {
  print("showing...");
  String refGroup = ref + "_Group";

  if (hasView(ref)) return;

  String label      = guessArch16nVal (ref);
  String attribName = getAttributeName(ref);

  // Create view
  FormInputDef viewDef = createViewDef();
  viewDef.createTextField     ("decimal");
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("measure");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);

  createView(ref, viewDef, refGroup);
}

void updateDynamicField(String refToUpdate, String refToCheck, List vals) {
  if (hasValueInField(vals, refToCheck))
    showDynamicField(refToUpdate);
  else
    hideDynamicField(refToUpdate);
}

Callable ShowDynamicField(String ref) {
  void call() {
    showDynamicField(ref);
  }
  return this;
}

Callable UpdateDynamicField(
    String refToUpdate,
    String refToCheck,
    List vals,
    boolean enableDuringFetchEvent
) {
  void call() {
    print("is doing: " + isDoingFetchEvent());
    if (!isDoingFetchEvent() || enableDuringFetchEvent)
      updateDynamicField(refToUpdate, refToCheck, vals);
  }
  return this;
}

Callable UpdateDynamicField(
    String refToUpdate,
    String refToCheck,
    List vals
) {
  return UpdateDynamicField(refToUpdate, refToCheck, vals, true);
}

// TODO: Add to autogen
List parseList(String listString) {
  Matcher m = Pattern.compile("(?<!\\\\)'(.*?)(?<!\\\\)'").matcher(listString);

  List matches = new ArrayList();
  while(m.find())
    matches.add(m.group(1));

  return matches;
}

// TODO: Add to autogen
String getArch16nKeyFromVal(String val, boolean doAddCurlies) {
  if (isNull(val)) return "";
  val = val.replaceAll("[^0-9a-zA-Z]", "_");
  if (doAddCurlies)
    val = "{" + val + "}";
  return val;
}

// TODO: Add to autogen
String getArch16nKeyFromVal(String val) {
  return getArch16nKeyFromVal(val, true);
}

void showFieldIfEqual(String refToShow, String refToCheck, List vals) {
  Callable fetchUpdate = UpdateDynamicField(refToShow, refToCheck, vals);
  Callable clickUpdate = UpdateDynamicField(refToShow, refToCheck, vals, false);
  Callable show        = ShowDynamicField  (refToShow);

  addOnEvent(getTabGroupRef(refToShow), "prefetch", show);
  addOnEvent(getTabGroupRef(refToShow), "fetch",    fetchUpdate);
  addOnEvent(refToCheck,                "click",    clickUpdate);
}

void showFieldIfEqual(String refToShow, String refToCheck, String vals) {
  List valsList = parseList(vals);
  for (int i = 0; i < valsList.size(); i++) {
    String val = valsList.get(i);
    val = getArch16nKeyFromVal(val);
    valsList.set(i, val);
  }

  showFieldIfEqual(refToShow, refToCheck, valsList);
}

showFieldIfEqual(
    "Water_Sample/Basic_Info/Location_Number",
    "Water_Sample/Basic_Info/Observation_Type",
    "'Observation Only'"
);

showFieldIfEqual(
    "Plant_Sample/Basic_Info/Location_Number",
    "Plant_Sample/Basic_Info/Observation_Type",
    "'Observation Only'"
);

showFieldIfEqual(
    "Soil_Sample/Basic_Info/Location_Number",
    "Soil_Sample/Basic_Info/Observation_Type",
    "'Observation Only'"
);
/*** pH/Eh ***/

ph_count = 0;
eh_count = 0;
preferred_ph = null;
preferred_eh = null;

onEvent("Water_Sample/pH_Eh", "show", "renderpHEhPage();");

/*********************************************************************************\
 *                                                                               *
 * WARNING: Do NOT re-use the following renderpHEhPage() code in future modules. *
 *                                                                               *
\*********************************************************************************/

/* Renders the pH/Eh tab using dynamic UI. */
renderpHEhPage() {
    executeViewTask(new ViewTask() {
        doTask() {
            removeAllViewsAndContainers("Water_Sample");
            style1 = "orientation";
            style2 = "even";
            createContainer("Water_Sample/pH_Eh/container3", "orientation");
            createContainer("Water_Sample/pH_Eh/child1", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/pH_Container", "even", "Water_Sample/pH_Eh/child1");

            createContainer("Water_Sample/pH_Eh/child2", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/Eh_Container", "even", "Water_Sample/pH_Eh/child2");
            
            ph_count = 0;
            eh_count = 0;
            ArrayList ph_list = new ArrayList();
            ArrayList eh_list = new ArrayList();
            fetchAll("select uuid, group_concat(measure,'|') " +
                    "from ( " +
                    "select uuid, measure, attributename, aentcountorder " +
                    "from latestnondeletedaentvalue " +
                    "join latestnondeletedarchent using (uuid) " +
                    "join aenttype using (aenttypeid) " +
                    "join idealaent using (aenttypeid, attributeid) " +
                    "join attributekey using (attributeid)  " +
                    "where aenttypename = 'pH' " +
                    "and attributename in ('pH', 'Time') " +
                    "and uuid in (select a.uuid " +
                    "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                    "where a.uuid != b.uuid " +
                    "and b.uuid = "+ getUuid("Water_Sample") +") " +
                    "order by uuid, aentcountorder) " +
                    "group by uuid  " +
                    "order by uuid; ", new FetchCallback() {
                    onFetch(ph_list) {
                        print("[renderpHEhPage()] ph list: " + ph_list);
                        fetchAll("select uuid, group_concat(measure,'|') " +
                                "from ( " +
                                "select uuid, measure, attributename, aentcountorder " +
                                "from latestnondeletedaentvalue " +
                                "join latestnondeletedarchent using (uuid) " +
                                "join aenttype using (aenttypeid) " +
                                "join idealaent using (aenttypeid, attributeid) " +
                                "join attributekey using (attributeid)  " +
                                "where aenttypename = 'Eh' " +
                                "and attributename in ('Eh', 'Time') " +
                                "and uuid in (select a.uuid " +
                                "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                                "where a.uuid != b.uuid " +
                                "and b.uuid = "+ getUuid("Water_Sample") +") " +
                                "order by uuid, aentcountorder) " +
                                "group by uuid " +
                                "order by uuid, aentcountorder; ",  new FetchCallback() {
                            onFetch(eh_list) {
                                print("[renderpHEhPage()] eh list: " + eh_list);
                                for(ph : ph_list) {
                                    createContainer("Water_Sample/pH_Eh/pH_Row_" + ph_count, "orientation", "Water_Sample/pH_Eh/pH_Container");
                                    createContainer("Water_Sample/pH_Eh/Check_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createContainer("Water_Sample/pH_Eh/pH_Value_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createContainer("Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createView("Water_Sample/pH_Eh/Check_pH_" + ph_count, createViewDef().createRadioGroup().addChoice("", "1"), "Water_Sample/pH_Eh/Check_pH_Container_" + ph_count);
                                    createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/pH_Value_Container_" + ph_count);
                                    createView("Water_Sample/pH_Eh/Delete_pH_" + ph_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count);

                                    String ph_value = ph.get(1).split("[|]")[0];
                                    String ph_time = ph.get(1).split("[|]")[1];
                                    String ph_id = ph.get(0);
                                    int index = ph_count;

                                    if(ph_id.equals(preferred_ph)) {
                                        setFieldValue("Water_Sample/pH_Eh/Check_pH_" + ph_count, "1");
                                    }
                                    setFieldValue("Water_Sample/pH_Eh/pH_Value_" + ph_count, ph_value);
                                    
                                    onEvent("Water_Sample/pH_Eh/Check_pH_" + ph_count, "click", "setPreferredpH(\"" + ph_id + "\", \"" + ph_value + "\", \"" + ph_time + "\", " + ph_count + ");");
                                    onEvent("Water_Sample/pH_Eh/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\");");
                                    ph_count++;
                                }
                                for(eh : eh_list) {
                                    createContainer("Water_Sample/pH_Eh/Eh_Row_" + eh_count, "orientation", "Water_Sample/pH_Eh/Eh_Container");
                                    createContainer("Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createContainer("Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createContainer("Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Check_Eh_" + eh_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count);
                                    String eh_value = eh.get(1).split("[|]")[0];
                                    String eh_time = eh.get(1).split("[|]")[1];
                                    String eh_id = eh.get(0);
                                    int index = eh_count;

                                    if(eh_id.equals(preferred_eh)) {
                                        setFieldValue("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "");
                                    }
                                    setFieldValue("Water_Sample/pH_Eh/Eh_Value_" + eh_count, eh_value);

                                    onEvent("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "click", "setPreferredEh(\"" + eh_id + "\", \"" + eh_value + "\", \"" + eh_time + "\", " + eh_count + ");");
                                    onEvent("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, "click", "deleteEh(\"" + eh_id + "\");");
                                    eh_count++;
                                }
                                createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{pH}"), "Water_Sample/pH_Eh/child1");
                                createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{Eh}"), "Water_Sample/pH_Eh/child2");
                                
                                createView("Water_Sample/pH_Eh/New_pH", createViewDef().createButton().setLabel("{Add_New_pH}"), "Water_Sample/pH_Eh/child1");
                                createView("Water_Sample/pH_Eh/New_Eh", createViewDef().createButton().setLabel("{Add_New_Eh}"), "Water_Sample/pH_Eh/child2");
                                onEvent("Water_Sample/pH_Eh/New_pH", "delayclick", "addNewpH(getFieldValue(\"Water_Sample/pH_Eh/pH_Value_\" + ph_count));");
                                onEvent("Water_Sample/pH_Eh/New_Eh", "delayclick", "addNewEh(getFieldValue(\"Water_Sample/pH_Eh/Eh_Value_\" + eh_count));");
                                refreshTabgroupCSS("Water_Sample");
                            }
                            onError(message) {
                                showToast(message);
                            }
                        });
                    }
                    onError(message) {
                        showToast(message);
                    }
                });
        }
    });
}

/********************************************************************************\
 *                                                                              *
 * WARNING: Do NOT re-use the previous renderpHEhPage() code in future modules. *
 *                                                                              *
\********************************************************************************/

/* Adds a new pH value, saves the entity and updates the dynamic UI. */
addNewpH(String ph_value) {
    if(isNull(ph_value)) {
        showToast("{Please_Fill_In_PH}");
        return;
    }
    List attributes = createAttributeList();
    ph_time = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z").format(new Date());
    attributes.add(createEntityAttribute("pH", null, null, ph_value, null));
    attributes.add(createEntityAttribute("Time", null, null, ph_time, null));

    saveArchEnt(null, "pH", null, attributes, new SaveCallback() {
        onSave(ph_id, newRecord) {
            saveEntitiesToRel("Water Sample pH", getUuid("Water_Sample"), ph_id);
            removeView("Water_Sample/pH_Eh/pH_Value_" + ph_count);
            removeView("Water_Sample/pH_Eh/New_pH");

            createContainer("Water_Sample/pH_Eh/pH_Row_" + ph_count, "orientation", "Water_Sample/pH_Eh/pH_Container");
            createContainer("Water_Sample/pH_Eh/Check_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/pH_Value_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createView("Water_Sample/pH_Eh/Check_pH_" + ph_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_pH_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/pH_Value_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/Delete_pH_" + ph_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count);
            setFieldValue("Water_Sample/pH_Eh/pH_Value_" + ph_count, ph_value);

            int index = ph_count;
            onEvent("Water_Sample/pH_Eh/Check_pH_" + ph_count, "click", "setPreferredpH(\"" + ph_id + "\", \"" + ph_value + "\", \"" + ph_time + "\", " + ph_count + ");");
            onEvent("Water_Sample/pH_Eh/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\");");
            ph_count++;

            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{pH}"), "Water_Sample/pH_Eh/child1");
            createView("Water_Sample/pH_Eh/New_pH", createViewDef().createButton().setLabel("{Add_New_pH}"), "Water_Sample/pH_Eh/child1");
            onEvent("Water_Sample/pH_Eh/New_pH", "delayclick", "addNewpH(getFieldValue(\"Water_Sample/pH_Eh/pH_Value_\" + ph_count));");
            refreshTabgroupCSS("Water_Sample");
        }
    });
}

/* Adds a new Eh value, saves the entity and updates the dynamic UI. */
addNewEh(String eh_value) {
    if(isNull(eh_value)) {
        showToast("{Please_Fill_In_EH}");
        return;
    }
    List attributes = createAttributeList();
    eh_time = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z").format(new Date());
    attributes.add(createEntityAttribute("Eh", null, null, eh_value, null));
    attributes.add(createEntityAttribute("Time", null, null, eh_time, null));

    saveArchEnt(null, "Eh", null, attributes, new SaveCallback() {
        onSave(eh_id, newRecord) {
            saveEntitiesToRel("Water Sample Eh", getUuid("Water_Sample"), eh_id);
            removeView("Water_Sample/pH_Eh/Eh_Value_" + eh_count);
            removeView("Water_Sample/pH_Eh/New_Eh");

            createContainer("Water_Sample/pH_Eh/Eh_Row_" + eh_count, "orientation", "Water_Sample/pH_Eh/Eh_Container");
            createContainer("Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createContainer("Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createContainer("Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createView("Water_Sample/pH_Eh/Check_Eh_" + eh_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count);
            createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count);
            createView("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count);
            setFieldValue("Water_Sample/pH_Eh/Eh_Value_" + eh_count, eh_value);

            int index = eh_count;
            onEvent("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "click", "setPreferredEh(\"" + eh_id + "\", \"" + eh_value + "\", \"" + eh_time + "\", " + eh_count + ");");
            onEvent("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, "click", "deleteEh(\"" + eh_id + "\");");
            eh_count++;

            createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{Eh}"), "Water_Sample/pH_Eh/child2");
            createView("Water_Sample/pH_Eh/New_Eh", createViewDef().createButton().setLabel("{Add_New_Eh}"), "Water_Sample/pH_Eh/child2");
            onEvent("Water_Sample/pH_Eh/New_Eh", "delayclick", "addNewEh(getFieldValue(\"Water_Sample/pH_Eh/Eh_Value_\" + eh_count));");
            refreshTabgroupCSS("Water_Sample");
        }
    });
}

/* Sets the preferred pH and time for the given pH ID and saves to the database. */
setPreferredpH(String ph_id, String ph_value, String ph_time, int index) {
    if(ph_id == preferred_ph) return;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, null, null));
    saveArchEnt(preferred_ph, "pH", null, attributes, null);

    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, "1", null));
    saveArchEnt(ph_id, "pH", null, attributes, null);

    preferred_ph = ph_id;
    for(int i = 0; i < ph_count; i++) {
        if(i == index) continue;
        setFieldValue("Water_Sample/pH_Eh/Check_pH_" + i, (String) null);
    }
    fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
    toFormat = new java.text.SimpleDateFormat("HH:mm");
    Date preferred_ph_time = fromFormat.parse(ph_time);
    setFieldValue("Water_Sample/pH_Eh/Preferred_pH", ph_value);
    setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", toFormat.format(preferred_ph_time));
    setFieldValue("Water_Sample/Hidden/Preferred_pH_Time", ph_time);
}

/* Sets the preferred Eh and time for the given Eh ID and saves to the database. */
setPreferredEh(String eh_id, String eh_value, String eh_time, int index) {
    if(eh_id == preferred_eh) return;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, null, null));
    saveArchEnt(preferred_eh, "Eh", null, attributes, null);

    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, "1", null));
    saveArchEnt(eh_id, "Eh", null, attributes, null);

    preferred_eh = eh_id;
    for(int i = 0; i < eh_count; i++) {
        if(i == index) continue;
        setFieldValue("Water_Sample/pH_Eh/Check_Eh_" + i, (String) null);
    }
    fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
    toFormat = new java.text.SimpleDateFormat("HH:mm");
    Date preferred_eh_time = fromFormat.parse(eh_time);
    setFieldValue("Water_Sample/pH_Eh/Preferred_Eh", eh_value);
    setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", toFormat.format(preferred_eh_time));
    setFieldValue("Water_Sample/Hidden/Preferred_Eh_Time", eh_time);
}

/* Generates a confirmation prompt to delete the given pH. */
deletepH(String ph_id) {
    showAlert("{Confirm_Deletion}", "{Press_To_Delete} {pH}!", "reallyDeletepH(\"" + ph_id + "\")", "doNotDelete()");
}

/* Deletes the given pH. */
reallyDeletepH(String ph_id) {
    deleteArchEnt(ph_id, new DeleteCallback() {
        onDelete(uuid) {
            if(ph_id == preferred_ph) {
                preferred_ph = null;
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH", "");
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", "");
                setFieldValue("Water_Sample/Hidden/Preferred_pH_Time", "");
            }
            showTab("Water_Sample/Codes");
            showTab("Water_Sample/pH_Eh");
        }
    });
}

/* Generates a confirmation prompt to delete the given pH. */
deleteEh(String eh_id) {
    showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Eh}!", "reallyDeleteEh(\"" + eh_id + "\")", "doNotDelete()");
}

/* Deletes the given Eh. */
reallyDeleteEh(String eh_id) {
    deleteArchEnt(eh_id, new DeleteCallback() {
        onDelete(uuid) {
            if(eh_id == preferred_eh) {
                preferred_eh = null;
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh", "");
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", "");
                setFieldValue("Water_Sample/Hidden/Preferred_Eh_Time", "");
            }
            showTab("Water_Sample/Codes");
            showTab("Water_Sample/pH_Eh");
        }
    });
}

void onFetchWaterSample() {
    fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
    toFormat = new java.text.SimpleDateFormat("HH:mm");
    if(!isNull(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"))) {
        Date preferred_ph_time = fromFormat.parse(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"));
        setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", toFormat.format(preferred_ph_time));
    }
    if(!isNull(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"))) {
        Date preferred_eh_time = fromFormat.parse(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"));
        setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", toFormat.format(preferred_eh_time));
    }           
    fetchOne("select uuid " + 
            "from latestnondeletedaentvalue " +
            "join latestnondeletedarchent using (uuid) " +
            "join aenttype using (aenttypeid) " +
            "join attributekey using (attributeid)  " +
            "where attributename = 'Preferred'  " +
            "and aenttypename = 'pH' " +
            "and measure=1 " +
            "and uuid in (select a.uuid " +
            "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
            "where a.uuid != b.uuid " +
            "and b.uuid = " + getUuid("Water_Sample") + ");", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) {
                preferred_ph = result.get(0);
            }
        }
    });
    fetchOne("select uuid " +
            "from latestnondeletedaentvalue " +
            "join latestnondeletedarchent using (uuid) " +
            "join aenttype using (aenttypeid) " +
            "join attributekey using (attributeid)  " +
            "where attributename = 'Preferred'  " +
            "and aenttypename = 'Eh' " +
            "and measure=1 " +
            "and uuid in (select a.uuid " +
            "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
            "where a.uuid != b.uuid " +
            "and b.uuid = " + getUuid("Water_Sample") + ") ;", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) { 
                preferred_eh = result.get(0);
            }
        }
    });
}

addOnEvent("Water_Sample", "fetch", "onFetchWaterSample()");
void fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String srid = getSrid(tabgroup);

  String query = "SELECT x(transform(geospatialcolumn,     4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,     4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+srid+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+srid+")) as northing " +
                 "  FROM latestnondeletedarchent " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing"  , result.get(3));
    }
  });
}

void setSrid(String tabgroup) {
  String ref = tabgroup + "/Basic_Info/SRID";
  String sridTarget   = getArch16nKeyFromVal(getModuleSrid());
  String sridFallback = getArch16nKeyFromVal("28350");
  if (!setMenuValue(ref, sridTarget))
    setMenuValue(ref, sridFallback);
}

Callable SetSrid(String tabgroup) {
  void call() { setSrid(tabgroup); }
  return this;
}

String getSrid(String tabgroup) {
  String ref = tabgroup + "/Basic_Info/SRID";
  String key = getMenuValue(ref);
  if (isNull(key)) {
    setSrid(tabgroup);
    key = getMenuValue(ref);
  }

  key = guessArch16nValFromKey(key);
  return key;
}

addOnEvent("Water_Sample", "create", SetSrid("Water_Sample"));
addOnEvent("Soil_Sample",  "create", SetSrid("Soil_Sample"));
addOnEvent("Plant_Sample", "create", SetSrid("Plant_Sample"));
addOnEvent("Rock_Sample",  "create", SetSrid("Rock_Sample"));


/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
decAndExecIfModuleLoaded();
