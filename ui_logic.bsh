/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;

print("Very first line of logic after the import lines");

User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view latestNonDeletedArchEntFormattedIdentifiers;");
    fetchOne("CREATE VIEW latestNonDeletedArchEntFormattedIdentifiers as " +
              "select uuid, aenttypeid, aenttypename, group_concat(response, '') as response, null as deleted " +
              "from ( " +
                "select uuid, aenttypeid, aenttypename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, null as deleted, aentcountorder " +
                "from ( " +
                  "select uuid, aenttypeid, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, null as deleted, aentcountorder, vocabcountorder, attributeid " +
                  "from latestNonDeletedArchent " +
                    "JOIN aenttype using (aenttypeid) " +
                    "JOIN (select * from idealaent where isIdentifier='true') using (aenttypeid) " +
                    "join attributekey  using (attributeid) " +
                    "join latestNonDeletedAentValue using (uuid, attributeid) " +
                    "left outer join vocabulary using (attributeid, vocabid) " +
                  "order by uuid, aentcountorder, vocabcountorder " +
                ") " +
                "group by uuid, attributeid " +
                "having response is not null " +
                "order by uuid, aentcountorder) " +
              "group by uuid " +
              "order by uuid;"
    );


}
makeLocalID();

/** Action Bar **/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Sync_Enabled}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Sync_Disabled}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Internal_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Internal_GPS_Disabled}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{External_GPS_Enabled}";
    }
    actionOn() {
        stopGPS();
        showToast("{GPS_Disabled}");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{External_GPS_Disabled}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.isActionOff();
        }
    }
});

// Flag used for onShow tab redirects
Boolean redirectFlag = false;
navigateToMap() {
    redirectFlag = true;
    showTabGroup("Project");
}
onEvent("Project/Start", "show", "print(\"[project onShow] map redirect flag: \" + redirectFlag);if(redirectFlag){showTab(\"Project/Map\");redirectFlag=false;}");

/*** Shape Tab Group ***/
onEvent("Shape/Shape_Note/shape_return", "delayclick", "cancelTabGroup(\"Shape\", false);navigateToMap();");
onEvent("Shape/Shape_Note/shape_delete", "click", "deleteShape(shapeUUID);");

/*** Project Tab Group ***/

/* Event Handling */
onEvent("Project", "show", "removeNavigationButtons();");
onEvent("Project", "load", "populateList(\"Project/Start/Duplicate_ID_List\", new ArrayList());");

onEvent("Project/Start", "show", "loadSamplePrefix(); loadSampleStartingID(); updateGPSStatus(); clearDuplicatesList();");
onEvent("Project/Start/New_Sample", "delayclick", "newSample();");
onEvent("Project/Start/Check_For_Duplicates", "click", "checkForDuplicates();");
onEvent("Project/Start/Duplicate_ID_List", "click", "loadSample();");

onEvent("Project/Search", "show", "loadSearch();");
onEvent("Project/Search/Sample_Types", "click", "loadSearch();");
onEvent("Project/Search/Sample_List", "click", "loadSample();");

onEvent("Project/Map", "show", "renderDynamicMapViews();");
onEvent("Project/Map/Centre_Map", "click", "centreMap();");
onEvent("Project/Map/Save_Map_Settings", "click", "saveMapSettings();");
onEvent("Project/Map/Create_Shape", "click", "createShape();");

/* Generates of sample types for dropdown selection. */
sample_types = new ArrayList();
sample_types.add(new NameValuePair("{Water_Sample}", "Water Sample"));
sample_types.add(new NameValuePair("{Plant_Sample}", "Plant Sample"));
sample_types.add(new NameValuePair("{Soil_Sample}", "Soil Sample"));
sample_types.add(new NameValuePair("{Rock_Sample}", "Rock Sample"));
populateDropDown("Project/Start/Sample_Types", sample_types);
sample_types.add(0, new NameValuePair("{All}", "Sample"));
populateDropDown("Project/Search/Sample_Types", sample_types);

/* Sets the sample prefix to the given value. */
setSamplePrefix(String samplePrefix) {
    setFieldValue("Project/Start/Sample_Prefix", samplePrefix);
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Sample Prefix', '" + samplePrefix + "');", null);
}

/* Sets the sample starting ID to the given value. */
setSampleStartingID(String sampleStartingID) {
    setFieldValue("Project/Start/Sample_Starting_ID", sampleStartingID);
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Sample Starting ID', '" + sampleStartingID + "');", null);
}

/* Loads the sample prefix if one exists. */
loadSamplePrefix() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Sample Prefix';", new FetchCallback() {
        onFetch(result) {
            print("[loadSamplePrefix()] fetched sample prefix from localSettings: " + result);
            if (!isNull(result)) {
                samplePrefix = result.get(0);
                setFieldValue("Project/Start/Sample_Prefix", samplePrefix);
                print("[loadSamplePrefix()] set sample prefix to: " + samplePrefix);
            }
        }
    });
}

/* Loads the sample starting ID if one exists, otherwise defaults to '1'. */
loadSampleStartingID() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Sample Starting ID';", new FetchCallback() {
        onFetch(result) {
            print("[loadSampleStartingID()] fetched sample ID from localSettings: " + result);
            if (isNull(result)) {
                sampleStartingID = "1";
                setSampleStartingID(sampleStartingID);
            } else {
                sampleStartingID = result.get(0);
                setFieldValue("Project/Start/Sample_Starting_ID", sampleStartingID);
                print("[loadSampleStartingID()] set sample starting ID to: " + sampleStartingID);
            }
        }
    });
}

/* Updates the GPS_Status view on the Start tab of the Project tabgroup. */
updateGPSStatus() {
    String status = "";
    String previousStatus = getFieldValue("Project/Start/GPS_Status");
    String notInitialised = "GPS is not initialised";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            status = "GPS is no longer initailised. Previous status: \n" + previousStatus;
        } else {
            status = notInitialised;
        }
    } else {
        status += "Internal GPS: ";
        if (isInternalGPSOn()) {status += "on";} else {status += "off";}
        status += "\n External GPS: ";
        if (isExternalGPSOn()) {if (isBluetoothConnected()) {status += "on and bluetooth connected";} else {status += "on and bluetooth disconnected";}} else {status += "off";}
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\n Latitude: " + position.getLatitude();
            status += "   Longitude: " + position.getLongitude();
            status += "\n Northing: " + projPosition.getLatitude();
            status += "   Easting: " + projPosition.getLongitude();
            status += "\n Accuracy: " + getGPSEstimatedAccuracy();
            // status += "\n Heading: " + getGPSHeading();
        } else {
            status += "\n Position: no GPS position could be found";
        }
    }
    print("[updateGPSStatus()] GPS status: " + status);
    setFieldValue("Project/Start/GPS_Status", status);
}

/* Clears the duplicate sample ID list. */
clearDuplicatesList() {
    populateList("Project/Start/Duplicate_ID_List", new ArrayList());
    refreshTabgroupCSS("Project");
}

/* Checks the db for duplicate sample ID duplicates */
checkForDuplicates() {
    String query = "select uuid, response || ' created at: ' || datetime(createdAt, 'localtime') || ' created by: '||createdBy " + 
            "from latestNonDeletedArchEntFormattedIdentifiers join createdModifiedAtBy using (uuid) " +
            "where response in ( " +
            "select response from latestNonDeletedArchEntFormattedIdentifiers group by response having count(response) > 1) " +
            " and aenttypename like '%Sample';";
    fetchAll(query, new FetchCallback() {
        onFetch(result) {
            if (isNull(result)) {
                showToast("{Valid_Starting_Sample_ID}");
                result = new ArrayList();
                result.add(new NameValuePair("{No_Duplicates_Found}", ""));
            } else {
                showToast(result.size() + " {Duplicate_IDs_Found}");
            }
            print("[checkForDuplicates()] Checking for duplicates: " + result);
            populateList("Project/Start/Duplicate_ID_List", result);
            refreshTabgroupCSS("Project");
        }
    });
}

/* Validates the sample prefix for the right length. Returns true if the prefix is valid or false otherwise. */
boolean validSamplePrefix() {
    prefix = getFieldValue("Project/Start/Sample_Prefix");
    if (isNull(prefix)) {
        showWarning("{Warning}", "{Error_New_Sample_No_Prefix}");
        return false;
    } 
    if (prefix.length() > 5) {
        showWarning("{Warning}", "{Error_Prefix_Too_Long}");
        return false;
    }
    return true;
}

/* Validates the sample starting ID, returns true if ID is valid or false otherwise. */
boolean validStartingSampleID() {
    String sampleID = getFieldValue("Project/Start/Sample_Starting_ID");
    if (isNull(sampleID)) {
        showWarning("{Warning}", "{Error_New_Sample_No_ID}");
        return false;
    }
    return true;
}

/* Returns the String representation of the sample type. */
String getSampleType() {
    print("[getSampleType()] Sample Type is: " + getFieldValue("Project/Start/Sample_Types"));
    return getFieldValue("Project/Start/Sample_Types");
}

/* Returns the tabgroup path for the currently selected sample type. */
String getSampleTypePath() {
    String tabgroup = null;
    String type = getSampleType();
    if(type.equals("Water Sample")) {
        tabgroup = "Water_Sample";
    } else if(type.equals("Plant Sample")) {
        tabgroup = "Plant_Sample";
    } else if(type.equals("Soil Sample")) {
        tabgroup = "Soil_Sample";
    } else if(type.equals("Rock Sample")) {
        tabgroup = "Rock_Sample";
    }
    print("[getSampleTypePath()] Tabgroup is: " + tabgroup);
    return tabgroup;
}

// default SRID set to srid 28350.
String defaultSRID = null;
fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'SRID' and vocabname = '28350';", new FetchCallback() {
    onFetch(result) {
        if (!isNull(result)) {
            defaultSRID = result.get(0);
        }
        print("[global default SRID] SRID 3850 vocab id: " + defaultSRID);
    }
});

// uuid for the curent sample.
String currentSampleUUID = null;

// flag to track when a new sample is made to add the location number attribute
Boolean newSampleFlag = false;

/* Creates a new sample based on selected type. */
newSample() {
    // Validate the entered sample prefix and ID before making a new sample.
    if (!validSamplePrefix() || !validStartingSampleID()) {       
        print("[newSample()] sample prefix or starting id not valid");
        showTabGroup("Project");
        showTab("Project/Start");
        return;
    } else {
        print("[newSample()] sample prefix and starting id are valid");
    }

    // Set the sample prefix and starting ID in-case the user changed them.
    setSamplePrefix(getFieldValue("Project/Start/Sample_Prefix"));
    setSampleStartingID(getFieldValue("Project/Start/Sample_Starting_ID"));

    // Determine the type of sample required.
    String tabgroup = getSampleTypePath();

    // Populate sample field values and perform any initialisation required.
    if (tabgroup == "Water_Sample") {
        initWaterValidationGlobals();
    }
    photolog_id = null;

    newTabGroup(tabgroup);
    fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Observation Type' and vocabname =  '{Sampling_Location}';", 
     new FetchCallback() {
        onFetch(result) {
            setFieldValue(tabgroup + "/Basic_Info/Observation_Type", result.get(0));
        }
    });
    setTimestamp(tabgroup + "/Basic_Info/Timestamp");
    setFieldValue(tabgroup + "/Basic_Info/Author_Name", getFieldValue("Project/Start/Author_Name"));
    setFieldValue(tabgroup + "/Basic_Info/Station_Deposit", getFieldValue("Project/Start/Station_Deposit"));
    setFieldValue(tabgroup + "/Basic_Info/Project", getFieldValue("Project/Start/Project"));
    setFieldValue(tabgroup + "/Basic_Info/Area", getFieldValue("Project/Start/Area"));
    srid = Integer.parseInt(getModuleSrid());
    print("[newSample()] Module SRID: " + srid);
    if(srid >= 28349 && srid <= 29356) {
        fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'SRID' and vocabname = '" + getModuleSrid() + "';",
         new FetchCallback() {
            onFetch(result) {
                setFieldValue(tabgroup + "/Basic_Info/SRID", result.get(0)); // BUG: module SRID doesn't match the vocab ID
            }
        });
    } else {
        setFieldValue(tabgroup + "/Basic_Info/SRID", defaultSRID);
    }
    print("[newSample()] Set SRID: " + getFieldValue(tabgroup + "/Basic_Info/SRID"));

    // Set the sample ID and prefix.
    currentSampleUUID = null;
    samplePrefix = getFieldValue("Project/Start/Sample_Prefix");
    sampleID = getFieldValue("Project/Start/Sample_Starting_ID");
    setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_Prefix", samplePrefix);
    setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_ID", sampleID);
    print("[newSample()] Making a new sample.\nPrefix: "+samplePrefix+"\nID: "+sampleID+"\nTimestamp: "+getFieldValue(tabgroup+"/Basic_Info/Timestamp"));
    keepTabGroupChanges(tabgroup);

    // Increment the sample starting ID for the next sample.
    setSampleStartingID(Integer.toString(Integer.parseInt(sampleID) + 1));
    newSampleFlag = true;
    showToast("{New} " + getSampleType() + " {Created}");
}

/* Generates and returns the date attribute for the current sample type. */
List getSampleDateAttributeList() {
    attributes = createAttributeList();
    print("[getSampleDateAttributeList()] created an attribute list: " + attributes);
    sampleDate = new java.text.SimpleDateFormat("ddMMMyy").format(new Date());
    print("[getSampleDateAttributeList()] grabbed the date: " + sampleDate);
    entityAttribute = createEntityAttribute(getSampleType() + " Date", null, null, sampleDate, null);
    print("[getSampleDateAttributeList()] created the entity attribute: " + entityAttribute);
    attributes.add(entityAttribute);
    print("[getSampleDateAttributeList()] added to the attribute list, the attributes: " + attributes);
    return attributes;
}

/* Renders a plotFromMap or showMap button depending on how many points have been drawn on the map. */
// renderMapButton() {
//     executeViewTask(new ViewTask() {
//         doTask() {
//             String tabgroup = getSampleTypePath();
//             buttonDef = null;
//             print("[renderMapButton()] Rendering show map button.");     
//             buttonDef = createViewDef().createButton().setLabel("Show map");
//             createView(tabgroup + "/Basic_Info/showMap", buttonDef, tabgroup + "/Basic_Info/containerTakePoint/child2");
//             onEvent(tabgroup + "/Basic_Info/showMap", "delayclick", "arrivedFromSample=true;redirectFlag=true;showTabGroup(\"Project\");");
//         }
//     });
// }

/* Saves the sample archent with geometry equal to the single point drawn on the map. */
getPointFromMap() {
    showToast("{Not_Implemented}");
}

onEvent("Water_Sample/Basic_Info/Observation_Type", "click", "print(\"render on click\");renderLocationNumber()");
onEvent("Plant_Sample/Basic_Info/Observation_Type", "click", "print(\"render on click\");renderLocationNumber()");
onEvent("Soil_Sample/Basic_Info/Observation_Type", "click", "print(\"render on click\");renderLocationNumber()");
onEvent("Rock_Sample/Basic_Info/Observation_Type", "click", "print(\"render on click\");renderLocationNumber()");

// onEvent("Water_Sample/Basic_Info", "show", "print(\"render on show\");renderLocationNumber();");
// onEvent("Plant_Sample/Basic_Info", "show", "print(\"render on show\");renderLocationNumber();");
// onEvent("Soil_Sample/Basic_Info", "show", "print(\"render on show\");renderLocationNumber();");
// onEvent("Rock_Sample/Basic_Info", "show", "print(\"render on show\");renderLocationNumber();");

onEvent("Water_Sample", "load", "waterLocationNumberRendered=false;");
onEvent("Plant_Sample", "load", "plantLocationNumberRendered=false;");
onEvent("Soil_Sample", "load", "soilLocationNumberRendered=false;");
onEvent("Rock_Sample", "load", "rockLocationNumberRendered=false;");

Boolean waterLocationNumberRendered = false;
Boolean plantLocationNumberRendered = false;
Boolean soilLocationNumberRendered = false;
Boolean rockLocationNumberRendered = false;
Boolean mapButtonRendered = false;

/* Renders the location number dynamic view for the specified tabgroup. */
renderTabGroupLocationNumber(String tabgroup) {
    print("[renderTabGroupLocationNumber()] Dynamically creating the Location Number view.");
    // fetch any saved value for location number and set the field value to that.
    fetchOne ("select measure from latestnondeletedaentvalue join attributekey using (attributeid) where attributename = 'Location Number' and uuid = '" + currentSampleUUID + "';", 
     new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                print("[renderTabGroupLocationNumber()] fetched saved location number value: " + result);
                setFieldValue(tabgroup + "/Basic_Info/Location_Number", result.get(0));
            }
        }
    });

    // render the view
    textDef = createViewDef().createTextField().setLabel("{Location_Number}").setAttributeName("Location Number").setAttributeType("measure");
    createView(tabgroup + "/Basic_Info/Location_Number", textDef, tabgroup + "/Basic_Info/Location_Number_Container");
}

/* Renders the location number dynamic view if obervation only is selected for the current sample and the view isn't already rendered. */ 
renderLocationNumber() {
    fetchOne("select vocabid from vocabulary join attributekey using (attributeid) where attributename = 'Observation Type' and vocabname =  '{Observation_Only}';", 
     new FetchCallback() {
        onFetch(result) {
            String tabgroup = getSampleTypePath();
            observationOnly = result.get(0);
            selectedObservationType = getFieldValue(tabgroup + "/Basic_Info/Observation_Type");
            // if the observation only radio button is selected then create and display the location number field, otherwise remove that field.
            executeViewTask(new ViewTask() {
                doTask() {
                    if (selectedObservationType.equals(observationOnly)) {
                        if (tabgroup.equals("Water_Sample")) {
                            if (!waterLocationNumberRendered) {
                                renderTabGroupLocationNumber(tabgroup);
                                waterLocationNumberRendered = true;
                            }
                        } else if (tabgroup.equals("Plant_Sample")) {
                            if (!plantLocationNumberRendered) {
                                renderTabGroupLocationNumber(tabgroup);
                                plantLocationNumberRendered = true;
                            }
                        } else if (tabgroup.equals("Soil_Sample")) {
                            if (!soilLocationNumberRendered) {
                                renderTabGroupLocationNumber(tabgroup);
                                soilLocationNumberRendered = true;
                            }
                        } else if (tabgroup.equals("Rock_Sample")) {
                            if (!rockLocationNumberRendered) {
                                renderTabGroupLocationNumber(tabgroup);
                                rockLocationNumberRendered = true;
                            }
                        }
                    } else {
                        print("[renderLocationNumber()] Dynamically removing all views for the tabgroup.");
                        //removeView(tabgroup + "/Basic_Info/Location_Number");
                        removeAllViewsAndContainers(tabgroup);
                         if (tabgroup.equals("Water_Sample")) {
                            waterLocationNumberRendered = false;
                        } else if (tabgroup.equals("Plant_Sample")) {
                            plantLocationNumberRendered = false;
                        } else if (tabgroup.equals("Soil_Sample")) {
                            soilLocationNumberRendered = false;
                        } else if (tabgroup.equals("Rock_Sample")) {
                            rockLocationNumberRendered = false;
                        }
                        mapButtonRendered = false;
                    }
                    // render the map button after the location number, due to issues with view removal and timing/ordering.
                    // if (!mapButtonRendered) {
                    //     renderMapButton();
                    //     mapButtonRendered = true;
                    // }
                }
            });
        }
    });
}

/* Autosaves the current sample using the provided attribute list. */
autoSaveSample(attributeList) {
    enable_autosave = true;
    tabgroup = getSampleTypePath();
    // check if a new sample was made, and if so then add the workaround fix for the location number view save
    if (newSampleFlag) {                                                                                // BUG: when new sample button is sidebar is the location number value is not saved as an attribute
        if (attributeList != null) {
            print("[autoSaveSample(attributeList)] Autosaving with attributes: " + attributeList);
            workaround = createEntityAttribute("Location Number", null, null, null, null);
            attributeList.add(workaround);
            print("[autoSaveSample(attributeList)] Autosaving with attributes: " + attributeList);
        } else {print("[autoSaveSample(attributeList)] Attribute list is null.");}
        newSampleFlag = false;
    }
    print("[autoSaveSample(attributeList)] Autosaving uuid " + currentSampleUUID + "with the attributes: " + attributeList);
    saveTabGroup(tabgroup, currentSampleUUID, null, attributeList, new SaveCallback() {
        onSave(uuid, newRecord) {
            currentSampleUUID = uuid;
            print("[autoSaveSample(attributeList)] Autosaved sample uuid: "+currentSampleUUID);
            if (newRecord) {
                 print("[autoSaveSample(attributeList)] new record created");
            }
            attributeList = null;
        }
        onError(message) {
            showToast(message);
        }  
    }, enable_autosave);
}

/* Autosaves the current sample. */
autoSaveSample() {
    /* If the sample is a new record then the current sample uuid would have been set to null to generate a new record. 
        If that is the case, then generate the date attribute for the sample. However if an existing sample is being saved, 
        then don't overrite any previous date attributes. */
    print("[autoSaveSample()] Saving sample id: " + currentSampleUUID);
    if (isNull(currentSampleUUID)) {
        autoSaveSample(getSampleDateAttributeList());
    } else {
        autoSaveSample(null);
    }   
}

/* Creates sidebar navigation for the sample. */
addSampleNavigation() {
    tabgroup = getSampleTypePath();
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_" + tabgroup + "}";
        }
        actionOn() {
            print("[Sidebar New Sample] Attempting to make a new sample");
            if(!isNull(currentSampleUUID)) {
                newSample();
                autoSaveSample();

            } else {
                String newSampleLogic = "newSample();" + "autoSaveSample();";
                showAlert("{Warning}", "{Lose_Unsaved_Changes}!", newSampleLogic, "");
            }
        }
    }, "success");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "{Duplicate_" + tabgroup + "}";
        }
        actionOn() {
            if(!isNull(currentSampleUUID)) {
                // duplicateSample();
                dupeSample3();
            } else {
                showWarning("{Warning}", "{Sample_Not_Duplicated}");
            }
        }
    }, "primary");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_" + tabgroup + "}";
        }
        actionOn() {
            deleteSample();
        }
    }, "danger");    

}

/* Generates a confirmation prompt for deleting the current sample. */
deleteSample() {
    tabgroup = getSampleTypePath();
    print("[deleteSample()] Prompting a sample deletion, currentSampleUUID = " + currentSampleUUID);
    if (!isNull(currentSampleUUID)) {
        print("[deleteSample()] Confirming a sample deletion");
        showAlert("{Confirm_Deletion}", "{Press_To_Delete} {" + tabgroup + "}!", "reallyDeleteSample()", "doNotDelete()");
    } else {
        cancelTabGroup(tabgroup, true);
        print("[deleteSample()] Cancelling a sample deletion.");
    }
}

/* Deletes the current water sample. */
reallyDeleteSample() {
    print("[reallyDeleteSample()] Really deleting the sample.");
    tabgroup = getSampleTypePath();
    deleteArchEnt(currentSampleUUID, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup(tabgroup, false);
        }
    });
}

/* Removes sidebar buttons. */
removeNavigationButtons() {
    removeNavigationButton("new");
    removeNavigationButton("duplicate");
    removeNavigationButton("delete");
}

/* Loads a list view of existing samples. */
loadSearch() {
    String type = getFieldValue("Project/Search/Sample_Types");
    
    /*
    fetchAll("select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;", 
        new FetchCallback() {
            onFetch(result) {
                if (isNull(result)) {
                    result = new ArrayList();
                    result.add(new NameValuePair("{No_records_found}", ""));
                }
                populateCursorList("Project/Search/Sample_List", result, 10);
                print("[loadSearch()]" + result);
            }
        });
        
        */
        
    populateCursorList("Project/Search/Sample_List", "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;", 25);
}

/* Loads the most recetly clicked on existing sample for editing. */
loadSample() {
    String sampleID = getListItemValue();
    if (!isNull(sampleID)) {
        fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + sampleID + "';", 
         new FetchCallback() {
            onFetch(result) {
                // Perform any sample initialisation 
                currentSampleUUID = sampleID;
                photolog_id = null;

                print("[loadSample()] Loading a sample, currentSampleUUID = " + currentSampleUUID);
                if (result.get(0).get(0).equals("Water Sample")) {
                    setFieldValue("Project/Start/Sample_Types", "Water Sample");
                    loadWaterSampleFrom(sampleID);
                } else if (result.get(0).get(0).equals("Plant Sample")) {
                    setFieldValue("Project/Start/Sample_Types", "Plant Sample");
                    loadPlantSampleFrom(sampleID);
                } else if (result.get(0).get(0).equals("Soil Sample")) {
                    setFieldValue("Project/Start/Sample_Types", "Soil Sample");
                    loadSoilSampleFrom(sampleID);
                } else {
                    setFieldValue("Project/Start/Sample_Types", "Rock Sample");
                    loadRockSampleFrom(sampleID);
                }
            }
        });
    }    
}

/* Returns a name value pair for the given attribute. */
copyAttribute(String attrib) {
    value = getFieldValue(attrib);
    pair = new ArrayList();
    pair.add(attrib);
    pair.add(value);
    return pair;   
}

// /* Duplicates the current sample excluding any attachments or pictures */
// duplicateSample() {
//     // Validate the entered sample prefix and ID before duplicating the sample and using the prefix and ID from the project start tab.
//     if (!validSamplePrefix() || !validStartingSampleID()) {       
//         print("[duplicateSample()] sample prefix or starting id not valid");
//         showTabGroup("Project");
//         showTab("Project/Start");
//         return;
//     } 

//     tabgroup = getSampleTypePath();
//     cancelTabGroup(tabgroup, false);
//     currentSampleUUID = null;
//     print("[duplicateSample] Before changing values for duplicate sample.");
    
//     // Update any required fields and reset any undesired duplicate attributes.
    
//     setSampleStartingID(getFieldValue("Project/Start/Sample_Starting_ID"));
//     // String sampleID = getFieldValue("Project/Start/Sample_Starting_ID");
//     // setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_ID", sampleID);
//     setSampleStartingID(Integer.toString(Integer.parseInt(getFieldValue("Project/Start/Sample_Starting_ID")) + 1));
//     print("[duplicateSample()] new ID value: " + getFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_ID"));
    
//     setSamplePrefix(getFieldValue("Project/Start/Sample_Prefix"));
//     // String samplePrefix = getFieldValue("Project/Start/Sample_Prefix");
//     // setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_Prefix", samplePrefix);
//     print("[duplicateSample()] new prefix value: " + getFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_Prefix"));
    
//     if (!tabgroup.equals("Rock_Sample")) {
//         setFieldValue(tabgroup + "/Basic_Info/Photos", new ArrayList());
//         setFieldValue(tabgroup + "/Basic_Info/Sketches", new ArrayList()); 
//         // setFieldValue(tabgroup + "/Basic_Info/Photos", null);
//         // setFieldValue(tabgroup + "/Basic_Info/Sketches", null); 
//         print("[duplicateSample()] new Photos value: " + getFieldValue(tabgroup + "/Basic_Info/Photos"));       // BUG: field value not reset properly, shows old data, should show empty list
//         print("[duplicateSample()] new Sketches value: " + getFieldValue(tabgroup + "/Basic_Info/Sketches"));   // BUG: field value not reset properly, shows old data, should show empty list
//     } else {
//         setFieldValue("Rock_Sample/Lithological_Info/Photos", new ArrayList());
//         setFieldValue("Rock_Sample/Lithological_Info/Sketches", new ArrayList());
//         print("[duplicateSample()] new Photos value: " + getFieldValue("Rock_Sample/Lithological_Info/Photos"));
//         print("[duplicateSample()] new Sketches value: " + getFieldValue("Rock_Sample/Lithological_Info/Sketches"));
//     }    

//     // force an initial save of the duplicate sample
//     attributeList = getSampleDateAttributeList();
//     String locationNumberValue = null;
//     if ( (tabgroup.equals("Water_Sample") && waterLocationNumberRendered) || 
//          (tabgroup.equals("Plant_Sample") && plantLocationNumberRendered) ||
//          (tabgroup.equals("Soil_Sample") && soilLocationNumberRendered) ||
//          (tabgroup.equals("Rock_Sample") && rockLocationNumberRendered)
//         ) {
//         locationNumberValue = getFieldValue(tabgroup+"/Basic_Info/Location_Number");
//     }
//     attributeList.add(createEntityAttribute("Location Number", null, null, locationNumberValue, null));
//     saveArchEnt(currentSampleUUID, getSampleType(), null, attributeList, new SaveCallback() {
//         onSave(uuid, newRecord) {
//             currentSampleUUID = uuid;
//             print("[duplicateSample()] Saved sample uuid: "+currentSampleUUID);

//             // show the tabgroup for the new sample to enable autosaving through existing event listeners.
//             newSampleFlag = false;
//             showTabGroup(tabgroup);
//             showToast(getSampleType() + " {Duplicated}");
            
//             print("[duplicateSample()] Keeping tabgroup changes");
//             keepTabGroupChanges(tabgroup); 
//         }
//     });
// }

// /* Duplicates the current sample excluding any attachments or pictures */
// dupeSample2() {
//     // Validate the entered sample prefix and ID before duplicating the sample and using the prefix and ID from the project start tab.
//     if (!validSamplePrefix() || !validStartingSampleID()) {       
//         print("[dupeSample2()] sample prefix or starting id not valid");
//         showTabGroup("Project");
//         showTab("Project/Start");
//         return;
//     } 

//     // cancel the tabgroup and gather neccessary data before proceeding
//     tabgroup = getSampleTypePath();
//     cancelTabGroup(tabgroup, false);
//     currentSampleUUID = null;
//     newSampleFlag = false;
//     print("[dupeSample2()] Cancelled tabgroup and set currentSampleUUID to null");

//     // set the values of any dynamic views using an attribute list
//     attributeList = getSampleDateAttributeList();
//     String locationNumberValue = null;
//     if ( (tabgroup.equals("Water_Sample") && waterLocationNumberRendered) || 
//          (tabgroup.equals("Plant_Sample") && plantLocationNumberRendered) ||
//          (tabgroup.equals("Soil_Sample") && soilLocationNumberRendered) ||
//          (tabgroup.equals("Rock_Sample") && rockLocationNumberRendered)
//         ) {
//         locationNumberValue = getFieldValue(tabgroup+"/Basic_Info/Location_Number");
//     }
//     attributeList.add(createEntityAttribute("Location Number", null, null, locationNumberValue, null));

//     // reset or remove the value of any views that are not intended for duplication
//     if (!tabgroup.equals("Rock_Sample")) {
//         setFieldValue(tabgroup + "/Basic_Info/Photos", new ArrayList());
//         setFieldValue(tabgroup + "/Basic_Info/Sketches", new ArrayList()); 
//     } else {
//         setFieldValue("Rock_Sample/Lithological_Info/Photos", new ArrayList());
//         setFieldValue("Rock_Sample/Lithological_Info/Sketches", new ArrayList());
//     }    

//     // update the values of any static views (such as autoincrementing ID)
//     String newID = getFieldValue("Project/Start/Sample_Starting_ID");
//     String newPrefix = getFieldValue("Project/Start/Sample_Prefix");
//     setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_ID", Integer.parseInt(newID));
//     setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_Prefix", newPrefix);
//     setFieldValue("Project/Start/Sample_Starting_ID", Integer.parseInt(newID) + 1); // Increment the starting sample ID

//     // duplicate any database entity relationships (such as sample and photolog, water sample and ph/eh relationship)


//     // force an initial save of the duplicate sample
//     saveArchEnt(currentSampleUUID, getSampleType(), null, attributeList, new SaveCallback() {
//         onSave(uuid, newRecord) {
//             currentSampleUUID = uuid;
//             print("[dupeSample2()] Saved sample uuid: "+currentSampleUUID);
//             keepTabGroupChanges(tabgroup); 

//             // show the tabgroup of the newly duplicated sample
//             showTabGroup(tabgroup);
//             showToast(getSampleType() + " {Duplicated}");
//         }
//     });
// }

/* Duplicates the current sample excluding any attachments or pictures */
dupeSample3() {
    // Validate the entered sample prefix and ID before duplicating the sample and using the prefix and ID from the project start tab.
    if (!validSamplePrefix() || !validStartingSampleID()) {       
        print("[dupeSample2()] sample prefix or starting id not valid");
        showTabGroup("Project");
        showTab("Project/Start");
        return;
    } 

    // cancel the tabgroup and gather neccessary data before proceeding
    tabgroup = getSampleTypePath();
    cancelTabGroup(tabgroup, false);
    currentSampleUUID = null;
    newSampleFlag = false;
    print("[dupeSample2()] Cancelled tabgroup and set currentSampleUUID to null");

    // set the values of any dynamic views using an attribute list
    attributes = getSampleDateAttributeList();
    String locationNumberValue = null;
    if ( (tabgroup.equals("Water_Sample") && waterLocationNumberRendered) || 
         (tabgroup.equals("Plant_Sample") && plantLocationNumberRendered) ||
         (tabgroup.equals("Soil_Sample") && soilLocationNumberRendered) ||
         (tabgroup.equals("Rock_Sample") && rockLocationNumberRendered)
        ) {
        locationNumberValue = getFieldValue(tabgroup+"/Basic_Info/Location_Number");
    }
    attributes.add(createEntityAttribute("Location Number", null, null, locationNumberValue, null));

    // add the value of all static views to the attribute list
    if (tabgroup.equals("Water_Sample")) {

if (!isNull(getFieldValue("Shape/Shape_Note/label"))){
    print(getFieldValue("Shape/Shape_Note/label")); 
    attributes.add(createEntityAttribute("Label", getFieldAnnotation("Shape/Shape_Note/label"), null, getFieldValue("Shape/Shape_Note/label"), getFieldCertainty("Shape/Shape_Note/label")));
}

if (!isNull(getFieldValue("Shape/Shape_Note/note"))){
    print(getFieldValue("Shape/Shape_Note/note")); 
    attributes.add(createEntityAttribute("Note", getFieldAnnotation("Shape/Shape_Note/note"), null, getFieldValue("Shape/Shape_Note/note"), getFieldCertainty("Shape/Shape_Note/note")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Water_Sample_Prefix"))){
    print(getFieldValue("Water_Sample/Basic_Info/Water_Sample_Prefix")); 
    attributes.add(createEntityAttribute("Water Sample Prefix", getFieldAnnotation("Water_Sample/Basic_Info/Water_Sample_Prefix"), null, getFieldValue("Water_Sample/Basic_Info/Water_Sample_Prefix"), getFieldCertainty("Water_Sample/Basic_Info/Water_Sample_Prefix")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Water_Sample_ID"))){
    print(getFieldValue("Water_Sample/Basic_Info/Water_Sample_ID")); 
    attributes.add(createEntityAttribute("Water Sample ID", getFieldAnnotation("Water_Sample/Basic_Info/Water_Sample_ID"), null, getFieldValue("Water_Sample/Basic_Info/Water_Sample_ID"), getFieldCertainty("Water_Sample/Basic_Info/Water_Sample_ID")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Station_Deposit"))){
    print(getFieldValue("Water_Sample/Basic_Info/Station_Deposit")); 
    attributes.add(createEntityAttribute("Station", getFieldAnnotation("Water_Sample/Basic_Info/Station_Deposit"), null, getFieldValue("Water_Sample/Basic_Info/Station_Deposit"), getFieldCertainty("Water_Sample/Basic_Info/Station_Deposit")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Project"))){
    print(getFieldValue("Water_Sample/Basic_Info/Project")); 
    attributes.add(createEntityAttribute("Project", getFieldAnnotation("Water_Sample/Basic_Info/Project"), null, getFieldValue("Water_Sample/Basic_Info/Project"), getFieldCertainty("Water_Sample/Basic_Info/Project")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Area"))){
    print(getFieldValue("Water_Sample/Basic_Info/Area")); 
    attributes.add(createEntityAttribute("Area", getFieldAnnotation("Water_Sample/Basic_Info/Area"), null, getFieldValue("Water_Sample/Basic_Info/Area"), getFieldCertainty("Water_Sample/Basic_Info/Area")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Site_Name"))){
    print(getFieldValue("Water_Sample/Basic_Info/Site_Name")); 
    attributes.add(createEntityAttribute("Site Name", getFieldAnnotation("Water_Sample/Basic_Info/Site_Name"), null, getFieldValue("Water_Sample/Basic_Info/Site_Name"), getFieldCertainty("Water_Sample/Basic_Info/Site_Name")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Observation_Type"))){
    print(getFieldValue("Water_Sample/Basic_Info/Observation_Type")); 
    attributes.add(createEntityAttribute("Observation Type", getFieldAnnotation("Water_Sample/Basic_Info/Observation_Type"), getFieldValue("Water_Sample/Basic_Info/Observation_Type"), null, getFieldCertainty("Water_Sample/Basic_Info/Observation_Type")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Latitude"))){
    print(getFieldValue("Water_Sample/Basic_Info/Latitude")); 
    attributes.add(createEntityAttribute("Latitude", getFieldAnnotation("Water_Sample/Basic_Info/Latitude"), null, getFieldValue("Water_Sample/Basic_Info/Latitude"), getFieldCertainty("Water_Sample/Basic_Info/Latitude")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Longitude"))){
    print(getFieldValue("Water_Sample/Basic_Info/Longitude")); 
    attributes.add(createEntityAttribute("Longitude", getFieldAnnotation("Water_Sample/Basic_Info/Longitude"), null, getFieldValue("Water_Sample/Basic_Info/Longitude"), getFieldCertainty("Water_Sample/Basic_Info/Longitude")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Northing"))){
    print(getFieldValue("Water_Sample/Basic_Info/Northing")); 
    attributes.add(createEntityAttribute("Northing", getFieldAnnotation("Water_Sample/Basic_Info/Northing"), null, getFieldValue("Water_Sample/Basic_Info/Northing"), getFieldCertainty("Water_Sample/Basic_Info/Northing")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Easting"))){
    print(getFieldValue("Water_Sample/Basic_Info/Easting")); 
    attributes.add(createEntityAttribute("Easting", getFieldAnnotation("Water_Sample/Basic_Info/Easting"), null, getFieldValue("Water_Sample/Basic_Info/Easting"), getFieldCertainty("Water_Sample/Basic_Info/Easting")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Elevation"))){
    print(getFieldValue("Water_Sample/Basic_Info/Elevation")); 
    attributes.add(createEntityAttribute("Elevation", getFieldAnnotation("Water_Sample/Basic_Info/Elevation"), null, getFieldValue("Water_Sample/Basic_Info/Elevation"), getFieldCertainty("Water_Sample/Basic_Info/Elevation")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Water_Table"))){
    print(getFieldValue("Water_Sample/Basic_Info/Water_Table")); 
    attributes.add(createEntityAttribute("Water Table", getFieldAnnotation("Water_Sample/Basic_Info/Water_Table"), null, getFieldValue("Water_Sample/Basic_Info/Water_Table"), getFieldCertainty("Water_Sample/Basic_Info/Water_Table")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Sample_Depth"))){
    print(getFieldValue("Water_Sample/Basic_Info/Sample_Depth")); 
    attributes.add(createEntityAttribute("Sample Depth", getFieldAnnotation("Water_Sample/Basic_Info/Sample_Depth"), null, getFieldValue("Water_Sample/Basic_Info/Sample_Depth"), getFieldCertainty("Water_Sample/Basic_Info/Sample_Depth")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Bottom_Of_Hole"))){
    print(getFieldValue("Water_Sample/Basic_Info/Bottom_Of_Hole")); 
    attributes.add(createEntityAttribute("Bottom of Hole", getFieldAnnotation("Water_Sample/Basic_Info/Bottom_Of_Hole"), null, getFieldValue("Water_Sample/Basic_Info/Bottom_Of_Hole"), getFieldCertainty("Water_Sample/Basic_Info/Bottom_Of_Hole")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Notes"))){
    print(getFieldValue("Water_Sample/Basic_Info/Notes")); 
    attributes.add(createEntityAttribute("Notes", getFieldAnnotation("Water_Sample/Basic_Info/Notes"), null, getFieldValue("Water_Sample/Basic_Info/Notes"), getFieldCertainty("Water_Sample/Basic_Info/Notes")));
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Samples_Collected"))){
    print(getFieldValue("Water_Sample/Basic_Info/Samples_Collected")); 

    for (listItem : getFieldValue("Water_Sample/Basic_Info/Samples_Collected")){
        print(listItem.getName());
        attributes.add(createEntityAttribute("Samples Collected", null, listItem.getName(), null, null));
    }       

}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Photos"))){
    print(getFieldValue("Water_Sample/Basic_Info/Photos")); 
}

if (!isNull(getFieldValue("Water_Sample/Basic_Info/Sketches"))){
    print(getFieldValue("Water_Sample/Basic_Info/Sketches")); 
}

if (!isNull(getFieldValue("Water_Sample/Codes/Hole_Type"))){
    print(getFieldValue("Water_Sample/Codes/Hole_Type")); 
    attributes.add(createEntityAttribute("Hole Type", getFieldAnnotation("Water_Sample/Codes/Hole_Type"), getFieldValue("Water_Sample/Codes/Hole_Type"), null, getFieldCertainty("Water_Sample/Codes/Hole_Type")));
}

if (!isNull(getFieldValue("Water_Sample/Codes/Hole_Lining"))){
    print(getFieldValue("Water_Sample/Codes/Hole_Lining")); 
    attributes.add(createEntityAttribute("Hole Lining", getFieldAnnotation("Water_Sample/Codes/Hole_Lining"), getFieldValue("Water_Sample/Codes/Hole_Lining"), null, getFieldCertainty("Water_Sample/Codes/Hole_Lining")));
}

if (!isNull(getFieldValue("Water_Sample/Codes/Hole_Open_Closed"))){
    print(getFieldValue("Water_Sample/Codes/Hole_Open_Closed")); 
    attributes.add(createEntityAttribute("Hole Open or Closed", getFieldAnnotation("Water_Sample/Codes/Hole_Open_Closed"), getFieldValue("Water_Sample/Codes/Hole_Open_Closed"), null, getFieldCertainty("Water_Sample/Codes/Hole_Open_Closed")));
}

if (!isNull(getFieldValue("Water_Sample/Codes/Pipes_In_Hole"))){
    print(getFieldValue("Water_Sample/Codes/Pipes_In_Hole")); 
    attributes.add(createEntityAttribute("Pipes In Hole", getFieldAnnotation("Water_Sample/Codes/Pipes_In_Hole"), getFieldValue("Water_Sample/Codes/Pipes_In_Hole"), null, getFieldCertainty("Water_Sample/Codes/Pipes_In_Hole")));
}

if (!isNull(getFieldValue("Water_Sample/Codes/Hole_Angle"))){
    print(getFieldValue("Water_Sample/Codes/Hole_Angle")); 
    attributes.add(createEntityAttribute("Hole Angle", getFieldAnnotation("Water_Sample/Codes/Hole_Angle"), getFieldValue("Water_Sample/Codes/Hole_Angle"), null, getFieldCertainty("Water_Sample/Codes/Hole_Angle")));
}

if (!isNull(getFieldValue("Water_Sample/Codes/Estimated_Angle"))){
    print(getFieldValue("Water_Sample/Codes/Estimated_Angle")); 
    attributes.add(createEntityAttribute("Estimated Angle", getFieldAnnotation("Water_Sample/Codes/Estimated_Angle"), null, getFieldValue("Water_Sample/Codes/Estimated_Angle"), getFieldCertainty("Water_Sample/Codes/Estimated_Angle")));
}

if (!isNull(getFieldValue("Water_Sample/Codes/Outflow_Present"))){
    print(getFieldValue("Water_Sample/Codes/Outflow_Present")); 
    attributes.add(createEntityAttribute("Outflow Present", getFieldAnnotation("Water_Sample/Codes/Outflow_Present"), getFieldValue("Water_Sample/Codes/Outflow_Present"), null, getFieldCertainty("Water_Sample/Codes/Outflow_Present")));
}

if (!isNull(getFieldValue("Water_Sample/Codes/Sampling_Issues"))){
    print(getFieldValue("Water_Sample/Codes/Sampling_Issues")); 
    attributes.add(createEntityAttribute("Sampling Issues", getFieldAnnotation("Water_Sample/Codes/Sampling_Issues"), getFieldValue("Water_Sample/Codes/Sampling_Issues"), null, getFieldCertainty("Water_Sample/Codes/Sampling_Issues")));
}

if (!isNull(getFieldValue("Water_Sample/pH_Eh/Temperature"))){
    print(getFieldValue("Water_Sample/pH_Eh/Temperature")); 
    attributes.add(createEntityAttribute("Temperature", getFieldAnnotation("Water_Sample/pH_Eh/Temperature"), null, getFieldValue("Water_Sample/pH_Eh/Temperature"), getFieldCertainty("Water_Sample/pH_Eh/Temperature")));
}

if (!isNull(getFieldValue("Water_Sample/pH_Eh/Conductivity"))){
    print(getFieldValue("Water_Sample/pH_Eh/Conductivity")); 
    attributes.add(createEntityAttribute("Conductivity", getFieldAnnotation("Water_Sample/pH_Eh/Conductivity"), null, getFieldValue("Water_Sample/pH_Eh/Conductivity"), getFieldCertainty("Water_Sample/pH_Eh/Conductivity")));
}

if (!isNull(getFieldValue("Water_Sample/pH_Eh/Preferred_pH"))){
    print(getFieldValue("Water_Sample/pH_Eh/Preferred_pH")); 
    attributes.add(createEntityAttribute("Preferred pH", getFieldAnnotation("Water_Sample/pH_Eh/Preferred_pH"), null, getFieldValue("Water_Sample/pH_Eh/Preferred_pH"), getFieldCertainty("Water_Sample/pH_Eh/Preferred_pH")));
}

if (!isNull(getFieldValue("Water_Sample/pH_Eh/Preferred_Eh"))){
    print(getFieldValue("Water_Sample/pH_Eh/Preferred_Eh")); 
    attributes.add(createEntityAttribute("Preferred Eh", getFieldAnnotation("Water_Sample/pH_Eh/Preferred_Eh"), null, getFieldValue("Water_Sample/pH_Eh/Preferred_Eh"), getFieldCertainty("Water_Sample/pH_Eh/Preferred_Eh")));
}

if (!isNull(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"))){
    print(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time")); 
    attributes.add(createEntityAttribute("Preferred pH Time", getFieldAnnotation("Water_Sample/Hidden/Preferred_pH_Time"), null, getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"), getFieldCertainty("Water_Sample/Hidden/Preferred_pH_Time")));
}

if (!isNull(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"))){
    print(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time")); 
    attributes.add(createEntityAttribute("Preferred Eh Time", getFieldAnnotation("Water_Sample/Hidden/Preferred_Eh_Time"), null, getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"), getFieldCertainty("Water_Sample/Hidden/Preferred_Eh_Time")));
}

    } else if (tabgroup.equals("Plant_Sample")) {
        attributes.add(createEntityAttribute("Plant Sample Prefix", getFieldAnnotation("Plant_Sample/Basic_Info/Plant_Sample_Prefix"), null, getFieldValue("Plant_Sample/Basic_Info/Plant_Sample_Prefix"), getFieldCertainty("Plant_Sample/Basic_Info/Plant_Sample_Prefix")));
        attributes.add(createEntityAttribute("Plant Sample ID", getFieldAnnotation("Plant_Sample/Basic_Info/Plant_Sample_ID"), null, getFieldValue("Plant_Sample/Basic_Info/Plant_Sample_ID"), getFieldCertainty("Plant_Sample/Basic_Info/Plant_Sample_ID")));
        attributes.add(createEntityAttribute("Station", getFieldAnnotation("Plant_Sample/Basic_Info/Station_Deposit"), null, getFieldValue("Plant_Sample/Basic_Info/Station_Deposit"), getFieldCertainty("Plant_Sample/Basic_Info/Station_Deposit")));
        attributes.add(createEntityAttribute("Project", getFieldAnnotation("Plant_Sample/Basic_Info/Project"), null, getFieldValue("Plant_Sample/Basic_Info/Project"), getFieldCertainty("Plant_Sample/Basic_Info/Project")));
        attributes.add(createEntityAttribute("Area", getFieldAnnotation("Plant_Sample/Basic_Info/Area"), null, getFieldValue("Plant_Sample/Basic_Info/Area"), getFieldCertainty("Plant_Sample/Basic_Info/Area")));
        attributes.add(createEntityAttribute("Observation Type", getFieldAnnotation("Plant_Sample/Basic_Info/Observation_Type"), getFieldValue("Plant_Sample/Basic_Info/Observation_Type"), null, getFieldCertainty("Plant_Sample/Basic_Info/Observation_Type")));
        attributes.add(createEntityAttribute("Plant Species", getFieldAnnotation("Plant_Sample/Basic_Info/Plant_Species"), null, getFieldValue("Plant_Sample/Basic_Info/Plant_Species"), getFieldCertainty("Plant_Sample/Basic_Info/Plant_Species")));
        attributes.add(createEntityAttribute("Latitude", getFieldAnnotation("Plant_Sample/Basic_Info/Latitude"), null, getFieldValue("Plant_Sample/Basic_Info/Latitude"), getFieldCertainty("Plant_Sample/Basic_Info/Latitude")));
        attributes.add(createEntityAttribute("Longitude", getFieldAnnotation("Plant_Sample/Basic_Info/Longitude"), null, getFieldValue("Plant_Sample/Basic_Info/Longitude"), getFieldCertainty("Plant_Sample/Basic_Info/Longitude")));
        attributes.add(createEntityAttribute("Northing", getFieldAnnotation("Plant_Sample/Basic_Info/Northing"), null, getFieldValue("Plant_Sample/Basic_Info/Northing"), getFieldCertainty("Plant_Sample/Basic_Info/Northing")));
        attributes.add(createEntityAttribute("Easting", getFieldAnnotation("Plant_Sample/Basic_Info/Easting"), null, getFieldValue("Plant_Sample/Basic_Info/Easting"), getFieldCertainty("Plant_Sample/Basic_Info/Easting")));
        attributes.add(createEntityAttribute("Elevation", getFieldAnnotation("Plant_Sample/Basic_Info/Elevation"), null, getFieldValue("Plant_Sample/Basic_Info/Elevation"), getFieldCertainty("Plant_Sample/Basic_Info/Elevation")));
        attributes.add(createEntityAttribute("Plant Height", getFieldAnnotation("Plant_Sample/Basic_Info/Plant_Height"), null, getFieldValue("Plant_Sample/Basic_Info/Plant_Height"), getFieldCertainty("Plant_Sample/Basic_Info/Plant_Height")));
        attributes.add(createEntityAttribute("Plant Width", getFieldAnnotation("Plant_Sample/Basic_Info/Plant_Width"), null, getFieldValue("Plant_Sample/Basic_Info/Plant_Width"), getFieldCertainty("Plant_Sample/Basic_Info/Plant_Width")));
        attributes.add(createEntityAttribute("Soil Description", getFieldAnnotation("Plant_Sample/Basic_Info/Soil_Description"), getFieldValue("Plant_Sample/Basic_Info/Soil_Description"), null, getFieldCertainty("Plant_Sample/Basic_Info/Soil_Description")));
        attributes.add(createEntityAttribute("Landform Description", getFieldAnnotation("Plant_Sample/Basic_Info/Landform_Description"), getFieldValue("Plant_Sample/Basic_Info/Landform_Description"), null, getFieldCertainty("Plant_Sample/Basic_Info/Landform_Description")));
        attributes.add(createEntityAttribute("Notes", getFieldAnnotation("Plant_Sample/Basic_Info/Notes"), null, getFieldValue("Plant_Sample/Basic_Info/Notes"), getFieldCertainty("Plant_Sample/Basic_Info/Notes")));
        attributes.add(createEntityAttribute("Photos", getFieldAnnotation("Plant_Sample/Basic_Info/Photos"), getFieldValue("Plant_Sample/Basic_Info/Photos"), null, getFieldCertainty("Plant_Sample/Basic_Info/Photos")));
        attributes.add(createEntityAttribute("Sketch", getFieldAnnotation("Plant_Sample/Basic_Info/Sketches"), getFieldValue("Plant_Sample/Basic_Info/Sketches"), null, getFieldCertainty("Plant_Sample/Basic_Info/Sketches")));
    } else if (tabgroup.equals("Soil_Sample")) {
        attributes.add(createEntityAttribute("Soil Sample Prefix", getFieldAnnotation("Soil_Sample/Basic_Info/Soil_Sample_Prefix"), null, getFieldValue("Soil_Sample/Basic_Info/Soil_Sample_Prefix"), getFieldCertainty("Soil_Sample/Basic_Info/Soil_Sample_Prefix")));
        attributes.add(createEntityAttribute("Soil Sample ID", getFieldAnnotation("Soil_Sample/Basic_Info/Soil_Sample_ID"), null, getFieldValue("Soil_Sample/Basic_Info/Soil_Sample_ID"), getFieldCertainty("Soil_Sample/Basic_Info/Soil_Sample_ID")));
        attributes.add(createEntityAttribute("Station", getFieldAnnotation("Soil_Sample/Basic_Info/Station_Deposit"), null, getFieldValue("Soil_Sample/Basic_Info/Station_Deposit"), getFieldCertainty("Soil_Sample/Basic_Info/Station_Deposit")));
        attributes.add(createEntityAttribute("Project", getFieldAnnotation("Soil_Sample/Basic_Info/Project"), null, getFieldValue("Soil_Sample/Basic_Info/Project"), getFieldCertainty("Soil_Sample/Basic_Info/Project")));
        attributes.add(createEntityAttribute("Area", getFieldAnnotation("Soil_Sample/Basic_Info/Area"), null, getFieldValue("Soil_Sample/Basic_Info/Area"), getFieldCertainty("Soil_Sample/Basic_Info/Area")));
        attributes.add(createEntityAttribute("Observation Type", getFieldAnnotation("Soil_Sample/Basic_Info/Observation_Type"), getFieldValue("Soil_Sample/Basic_Info/Observation_Type"), null, getFieldCertainty("Soil_Sample/Basic_Info/Observation_Type")));
        attributes.add(createEntityAttribute("Latitude", getFieldAnnotation("Soil_Sample/Basic_Info/Latitude"), null, getFieldValue("Soil_Sample/Basic_Info/Latitude"), getFieldCertainty("Soil_Sample/Basic_Info/Latitude")));
        attributes.add(createEntityAttribute("Longitude", getFieldAnnotation("Soil_Sample/Basic_Info/Longitude"), null, getFieldValue("Soil_Sample/Basic_Info/Longitude"), getFieldCertainty("Soil_Sample/Basic_Info/Longitude")));
        attributes.add(createEntityAttribute("Northing", getFieldAnnotation("Soil_Sample/Basic_Info/Northing"), null, getFieldValue("Soil_Sample/Basic_Info/Northing"), getFieldCertainty("Soil_Sample/Basic_Info/Northing")));
        attributes.add(createEntityAttribute("Easting", getFieldAnnotation("Soil_Sample/Basic_Info/Easting"), null, getFieldValue("Soil_Sample/Basic_Info/Easting"), getFieldCertainty("Soil_Sample/Basic_Info/Easting")));
        attributes.add(createEntityAttribute("Elevation", getFieldAnnotation("Soil_Sample/Basic_Info/Elevation"), null, getFieldValue("Soil_Sample/Basic_Info/Elevation"), getFieldCertainty("Soil_Sample/Basic_Info/Elevation")));
        attributes.add(createEntityAttribute("Depth", getFieldAnnotation("Soil_Sample/Basic_Info/Depth"), null, getFieldValue("Soil_Sample/Basic_Info/Depth"), getFieldCertainty("Soil_Sample/Basic_Info/Depth")));
        attributes.add(createEntityAttribute("Colour", getFieldAnnotation("Soil_Sample/Basic_Info/Colour"), null, getFieldValue("Soil_Sample/Basic_Info/Colour"), getFieldCertainty("Soil_Sample/Basic_Info/Colour")));
        attributes.add(createEntityAttribute("Lag", getFieldAnnotation("Soil_Sample/Basic_Info/Lag"), getFieldValue("Soil_Sample/Basic_Info/Lag"), null, getFieldCertainty("Soil_Sample/Basic_Info/Lag")));
        attributes.add(createEntityAttribute("Soil Texture", getFieldAnnotation("Soil_Sample/Basic_Info/Soil_Texture"), getFieldValue("Soil_Sample/Basic_Info/Soil_Texture"), null, getFieldCertainty("Soil_Sample/Basic_Info/Soil_Texture")));
        attributes.add(createEntityAttribute("Geology", getFieldAnnotation("Soil_Sample/Basic_Info/Geology"), getFieldValue("Soil_Sample/Basic_Info/Geology"), null, getFieldCertainty("Soil_Sample/Basic_Info/Geology")));
        attributes.add(createEntityAttribute("Drainage", getFieldAnnotation("Soil_Sample/Basic_Info/Drainage"), getFieldValue("Soil_Sample/Basic_Info/Drainage"), null, getFieldCertainty("Soil_Sample/Basic_Info/Drainage")));
        attributes.add(createEntityAttribute("Contamination", getFieldAnnotation("Soil_Sample/Basic_Info/Contamination"), getFieldValue("Soil_Sample/Basic_Info/Contamination"), null, getFieldCertainty("Soil_Sample/Basic_Info/Contamination")));
        attributes.add(createEntityAttribute("Regolith Type", getFieldAnnotation("Soil_Sample/Basic_Info/Regolith_Type"), getFieldValue("Soil_Sample/Basic_Info/Regolith_Type"), null, getFieldCertainty("Soil_Sample/Basic_Info/Regolith_Type")));
        attributes.add(createEntityAttribute("Landform", getFieldAnnotation("Soil_Sample/Basic_Info/Landform"), getFieldValue("Soil_Sample/Basic_Info/Landform"), null, getFieldCertainty("Soil_Sample/Basic_Info/Landform")));
        attributes.add(createEntityAttribute("Vegetation", getFieldAnnotation("Soil_Sample/Basic_Info/Vegetation"), null, getFieldValue("Soil_Sample/Basic_Info/Vegetation"), getFieldCertainty("Soil_Sample/Basic_Info/Vegetation")));
        attributes.add(createEntityAttribute("Notes", getFieldAnnotation("Soil_Sample/Basic_Info/Notes"), null, getFieldValue("Soil_Sample/Basic_Info/Notes"), getFieldCertainty("Soil_Sample/Basic_Info/Notes")));
        attributes.add(createEntityAttribute("Photos", getFieldAnnotation("Soil_Sample/Basic_Info/Photos"), getFieldValue("Soil_Sample/Basic_Info/Photos"), null, getFieldCertainty("Soil_Sample/Basic_Info/Photos")));
        attributes.add(createEntityAttribute("Sketch", getFieldAnnotation("Soil_Sample/Basic_Info/Sketches"), getFieldValue("Soil_Sample/Basic_Info/Sketches"), null, getFieldCertainty("Soil_Sample/Basic_Info/Sketches")));
    } else if (tabgroup.equals("Rock_Sample")) {
        attributes.add(createEntityAttribute("Rock Sample Prefix", getFieldAnnotation("Rock_Sample/Basic_Info/Rock_Sample_Prefix"), null, getFieldValue("Rock_Sample/Basic_Info/Rock_Sample_Prefix"), getFieldCertainty("Rock_Sample/Basic_Info/Rock_Sample_Prefix")));
        attributes.add(createEntityAttribute("Rock Sample ID", getFieldAnnotation("Rock_Sample/Basic_Info/Rock_Sample_ID"), null, getFieldValue("Rock_Sample/Basic_Info/Rock_Sample_ID"), getFieldCertainty("Rock_Sample/Basic_Info/Rock_Sample_ID")));
        attributes.add(createEntityAttribute("Station", getFieldAnnotation("Rock_Sample/Basic_Info/Station_Deposit"), null, getFieldValue("Rock_Sample/Basic_Info/Station_Deposit"), getFieldCertainty("Rock_Sample/Basic_Info/Station_Deposit")));
        attributes.add(createEntityAttribute("Project", getFieldAnnotation("Rock_Sample/Basic_Info/Project"), null, getFieldValue("Rock_Sample/Basic_Info/Project"), getFieldCertainty("Rock_Sample/Basic_Info/Project")));
        attributes.add(createEntityAttribute("Area", getFieldAnnotation("Rock_Sample/Basic_Info/Area"), null, getFieldValue("Rock_Sample/Basic_Info/Area"), getFieldCertainty("Rock_Sample/Basic_Info/Area")));
        attributes.add(createEntityAttribute("Observation Type", getFieldAnnotation("Rock_Sample/Basic_Info/Observation_Type"), getFieldValue("Rock_Sample/Basic_Info/Observation_Type"), null, getFieldCertainty("Rock_Sample/Basic_Info/Observation_Type")));
        attributes.add(createEntityAttribute("Core ID", getFieldAnnotation("Rock_Sample/Basic_Info/Core_ID"), null, getFieldValue("Rock_Sample/Basic_Info/Core_ID"), getFieldCertainty("Rock_Sample/Basic_Info/Core_ID")));
        attributes.add(createEntityAttribute("Latitude", getFieldAnnotation("Rock_Sample/Basic_Info/Latitude"), null, getFieldValue("Rock_Sample/Basic_Info/Latitude"), getFieldCertainty("Rock_Sample/Basic_Info/Latitude")));
        attributes.add(createEntityAttribute("Longitude", getFieldAnnotation("Rock_Sample/Basic_Info/Longitude"), null, getFieldValue("Rock_Sample/Basic_Info/Longitude"), getFieldCertainty("Rock_Sample/Basic_Info/Longitude")));
        attributes.add(createEntityAttribute("Northing", getFieldAnnotation("Rock_Sample/Basic_Info/Northing"), null, getFieldValue("Rock_Sample/Basic_Info/Northing"), getFieldCertainty("Rock_Sample/Basic_Info/Northing")));
        attributes.add(createEntityAttribute("Easting", getFieldAnnotation("Rock_Sample/Basic_Info/Easting"), null, getFieldValue("Rock_Sample/Basic_Info/Easting"), getFieldCertainty("Rock_Sample/Basic_Info/Easting")));
        attributes.add(createEntityAttribute("Elevation", getFieldAnnotation("Rock_Sample/Basic_Info/Elevation"), null, getFieldValue("Rock_Sample/Basic_Info/Elevation"), getFieldCertainty("Rock_Sample/Basic_Info/Elevation")));
        attributes.add(createEntityAttribute("Strike Of Bedding", getFieldAnnotation("Rock_Sample/Measurements/Strike_Of_Bedding"), null, getFieldValue("Rock_Sample/Measurements/Strike_Of_Bedding"), getFieldCertainty("Rock_Sample/Measurements/Strike_Of_Bedding")));
        attributes.add(createEntityAttribute("Dip Of Bedding", getFieldAnnotation("Rock_Sample/Measurements/Dip_Of_Bedding"), null, getFieldValue("Rock_Sample/Measurements/Dip_Of_Bedding"), getFieldCertainty("Rock_Sample/Measurements/Dip_Of_Bedding")));
        attributes.add(createEntityAttribute("Strike Of Cleavage", getFieldAnnotation("Rock_Sample/Measurements/Strike_Of_Cleavage"), null, getFieldValue("Rock_Sample/Measurements/Strike_Of_Cleavage"), getFieldCertainty("Rock_Sample/Measurements/Strike_Of_Cleavage")));
        attributes.add(createEntityAttribute("Dip Of Cleavage", getFieldAnnotation("Rock_Sample/Measurements/Dip_Of_Cleavage"), null, getFieldValue("Rock_Sample/Measurements/Dip_Of_Cleavage"), getFieldCertainty("Rock_Sample/Measurements/Dip_Of_Cleavage")));
        attributes.add(createEntityAttribute("Strike Of Foliation", getFieldAnnotation("Rock_Sample/Measurements/Strike_Of_Foliation"), null, getFieldValue("Rock_Sample/Measurements/Strike_Of_Foliation"), getFieldCertainty("Rock_Sample/Measurements/Strike_Of_Foliation")));
        attributes.add(createEntityAttribute("Dip Of Foliation", getFieldAnnotation("Rock_Sample/Measurements/Dip_Of_Foliation"), null, getFieldValue("Rock_Sample/Measurements/Dip_Of_Foliation"), getFieldCertainty("Rock_Sample/Measurements/Dip_Of_Foliation")));
        attributes.add(createEntityAttribute("Strike Of Veins", getFieldAnnotation("Rock_Sample/Measurements/Strike_Of_Veins"), null, getFieldValue("Rock_Sample/Measurements/Strike_Of_Veins"), getFieldCertainty("Rock_Sample/Measurements/Strike_Of_Veins")));
        attributes.add(createEntityAttribute("Dip Of Veins", getFieldAnnotation("Rock_Sample/Measurements/Dip_Of_Veins"), null, getFieldValue("Rock_Sample/Measurements/Dip_Of_Veins"), getFieldCertainty("Rock_Sample/Measurements/Dip_Of_Veins")));
        attributes.add(createEntityAttribute("Other Structural Measurements", getFieldAnnotation("Rock_Sample/Measurements/Other_Structural_Measurements"), null, getFieldValue("Rock_Sample/Measurements/Other_Structural_Measurements"), getFieldCertainty("Rock_Sample/Measurements/Other_Structural_Measurements")));
        attributes.add(createEntityAttribute("Plunge Of Fold Axis 1", getFieldAnnotation("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_1"), null, getFieldValue("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_1"), getFieldCertainty("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_1")));
        attributes.add(createEntityAttribute("Azimuth Of Fold Axis 1", getFieldAnnotation("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_1"), null, getFieldValue("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_1"), getFieldCertainty("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_1")));
        attributes.add(createEntityAttribute("Plunge Of Fold Axis 2", getFieldAnnotation("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_2"), null, getFieldValue("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_2"), getFieldCertainty("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_2")));
        attributes.add(createEntityAttribute("Azimuth Of Fold Axis 2", getFieldAnnotation("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_2"), null, getFieldValue("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_2"), getFieldCertainty("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_2")));
        attributes.add(createEntityAttribute("Plunge Of Fold Axis 3", getFieldAnnotation("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_3"), null, getFieldValue("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_3"), getFieldCertainty("Rock_Sample/Measurements/Plunge_Of_Fold_Axis_3")));
        attributes.add(createEntityAttribute("Azimuth Of Fold Axis 3", getFieldAnnotation("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_3"), null, getFieldValue("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_3"), getFieldCertainty("Rock_Sample/Measurements/Azimuth_Of_Fold_Axis_3")));
        attributes.add(createEntityAttribute("Plunge Of Mineral Lineation", getFieldAnnotation("Rock_Sample/Measurements/Plunge_Of_Mineral_Lineation"), null, getFieldValue("Rock_Sample/Measurements/Plunge_Of_Mineral_Lineation"), getFieldCertainty("Rock_Sample/Measurements/Plunge_Of_Mineral_Lineation")));
        attributes.add(createEntityAttribute("Azimuth Of Mineral Lineation", getFieldAnnotation("Rock_Sample/Measurements/Azimuth_Of_Mineral_Lineation"), null, getFieldValue("Rock_Sample/Measurements/Azimuth_Of_Mineral_Lineation"), getFieldCertainty("Rock_Sample/Measurements/Azimuth_Of_Mineral_Lineation")));
        attributes.add(createEntityAttribute("Plunge Of Stretching Lineation", getFieldAnnotation("Rock_Sample/Measurements/Plunge_Of_Stretching_Lineation"), null, getFieldValue("Rock_Sample/Measurements/Plunge_Of_Stretching_Lineation"), getFieldCertainty("Rock_Sample/Measurements/Plunge_Of_Stretching_Lineation")));
        attributes.add(createEntityAttribute("Azimuth Of Stretching Lineation", getFieldAnnotation("Rock_Sample/Measurements/Azimuth_Of_Stretching_Lineation"), null, getFieldValue("Rock_Sample/Measurements/Azimuth_Of_Stretching_Lineation"), getFieldCertainty("Rock_Sample/Measurements/Azimuth_Of_Stretching_Lineation")));
        attributes.add(createEntityAttribute("Other Lineation", getFieldAnnotation("Rock_Sample/Measurements/Other_Lineation"), null, getFieldValue("Rock_Sample/Measurements/Other_Lineation"), getFieldCertainty("Rock_Sample/Measurements/Other_Lineation")));
        attributes.add(createEntityAttribute("Lithology", getFieldAnnotation("Rock_Sample/Lithological_Info/Lithology"), getFieldValue("Rock_Sample/Lithological_Info/Lithology"), null, getFieldCertainty("Rock_Sample/Lithological_Info/Lithology")));
        attributes.add(createEntityAttribute("Fineness or Inclusion size", getFieldAnnotation("Rock_Sample/Lithological_Info/Fineness_Inclusion_Size"), getFieldValue("Rock_Sample/Lithological_Info/Fineness_Inclusion_Size"), null, getFieldCertainty("Rock_Sample/Lithological_Info/Fineness_Inclusion_Size")));
        attributes.add(createEntityAttribute("Grain Size", getFieldAnnotation("Rock_Sample/Lithological_Info/Grain_Size"), getFieldValue("Rock_Sample/Lithological_Info/Grain_Size"), null, getFieldCertainty("Rock_Sample/Lithological_Info/Grain_Size")));
        attributes.add(createEntityAttribute("Sorting", getFieldAnnotation("Rock_Sample/Lithological_Info/Sorting"), getFieldValue("Rock_Sample/Lithological_Info/Sorting"), null, getFieldCertainty("Rock_Sample/Lithological_Info/Sorting")));
        attributes.add(createEntityAttribute("Other lithological descriptors", getFieldAnnotation("Rock_Sample/Lithological_Info/Other_Lithological_Descriptors"), null, getFieldValue("Rock_Sample/Lithological_Info/Other_Lithological_Descriptors"), getFieldCertainty("Rock_Sample/Lithological_Info/Other_Lithological_Descriptors")));
        attributes.add(createEntityAttribute("Stratigraphic unit", getFieldAnnotation("Rock_Sample/Lithological_Info/Stratigraphic_Unit"), null, getFieldValue("Rock_Sample/Lithological_Info/Stratigraphic_Unit"), getFieldCertainty("Rock_Sample/Lithological_Info/Stratigraphic_Unit")));
        attributes.add(createEntityAttribute("Large-scale Structure", getFieldAnnotation("Rock_Sample/Lithological_Info/Large_Scale_Structure"), null, getFieldValue("Rock_Sample/Lithological_Info/Large_Scale_Structure"), getFieldCertainty("Rock_Sample/Lithological_Info/Large_Scale_Structure")));
        attributes.add(createEntityAttribute("Alteration", getFieldAnnotation("Rock_Sample/Lithological_Info/Alteration"), null, getFieldValue("Rock_Sample/Lithological_Info/Alteration"), getFieldCertainty("Rock_Sample/Lithological_Info/Alteration")));
        attributes.add(createEntityAttribute("Notes", getFieldAnnotation("Rock_Sample/Lithological_Info/Notes"), null, getFieldValue("Rock_Sample/Lithological_Info/Notes"), getFieldCertainty("Rock_Sample/Lithological_Info/Notes")));
        attributes.add(createEntityAttribute("Photos", getFieldAnnotation("Rock_Sample/Lithological_Info/Photos"), getFieldValue("Rock_Sample/Lithological_Info/Photos"), null, getFieldCertainty("Rock_Sample/Lithological_Info/Photos")));
        attributes.add(createEntityAttribute("Sketch", getFieldAnnotation("Rock_Sample/Lithological_Info/Sketches"), getFieldValue("Rock_Sample/Lithological_Info/Sketches"), null, getFieldCertainty("Rock_Sample/Lithological_Info/Sketches")));

    }


    // reset or remove the value of any views that are not intended for duplication from the attribute list
    // if (!tabgroup.equals("Rock_Sample")) {
    //     setFieldValue(tabgroup + "/Basic_Info/Photos", new ArrayList());
    //     setFieldValue(tabgroup + "/Basic_Info/Sketches", new ArrayList()); 
    // } else {
    //     setFieldValue("Rock_Sample/Lithological_Info/Photos", new ArrayList());
    //     setFieldValue("Rock_Sample/Lithological_Info/Sketches", new ArrayList());
    // }    

    // update the values of any static views (such as autoincrementing ID) to the attribute list
    String newID = getFieldValue("Project/Start/Sample_Starting_ID");
    String newPrefix = getFieldValue("Project/Start/Sample_Prefix");
    // setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_ID", Integer.parseInt(newID));
    // setFieldValue(tabgroup + "/Basic_Info/" + tabgroup + "_Prefix", newPrefix);
    setFieldValue("Project/Start/Sample_Starting_ID", Integer.parseInt(newID) + 1); // Increment the starting sample ID

    // duplicate any database entity relationships (such as sample and photolog, water sample and ph/eh relationship)


    // force an initial save of the duplicate sample
    saveArchEnt(currentSampleUUID, getSampleType(), null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            currentSampleUUID = uuid;
            print("[dupeSample2()] Saved sample uuid: "+currentSampleUUID);
            keepTabGroupChanges(tabgroup); 

            // show the tabgroup of the newly duplicated sample
            showTabGroup(tabgroup);
            showToast(getSampleType() + " {Duplicated}");
        }
    });
}

/** Map GPS **/

// Detect when user has selected a different SRID, update the module srid and update northing/easting. 
onEvent("Water_Sample/Basic_Info", "show", "fillInGPS()");
onEvent("Water_Sample/Basic_Info/SRID", "click", "fillInGPS();");
onEvent("Plant_Sample/Basic_Info", "show", "fillInGPS()");
onEvent("Plant_Sample/Basic_Info/SRID", "click", "fillInGPS();");
onEvent("Soil_Sample/Basic_Info", "show", "fillInGPS()");
onEvent("Soil_Sample/Basic_Info/SRID", "click", "fillInGPS();");
onEvent("Rock_Sample/Basic_Info", "show", "fillInGPS()");
onEvent("Rock_Sample/Basic_Info/SRID", "click", "fillInGPS();");

/* Takes the current point using gps. */
takePoint() {
    Object position = getGPSPosition();
    if (position == null) {
        showToast("{GPS_Not_Initialised}");
        return;
    }
    Object projPosition = getGPSPositionProjected();
    Double latitude = position.getLatitude();
    Double longitude = position.getLongitude();
    Double northing = projPosition.getLatitude();
    Double easting = projPosition.getLongitude();

    samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
    ArrayList geolist = new ArrayList();
    geolist.add(samplePoint);
    saveArchEnt(currentSampleUUID, getSampleType(), geolist, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            print("[takePoint()] Added geometry: " + geolist);
            fillInGPS();
        }  
    });    
}

/* Sets the value of GPS views for the given tab path. */
fillInGPS() {
    if (isNull(currentSampleUUID)) {
        return;
    }
    String tabgroup = getSampleTypePath();
    String query = "select x(transform(geospatialcolumn, 4326)) as longtiude, y(transform(geospatialcolumn, 4326)) as latitude, x(transform(geospatialcolumn, CAST (vocabname AS INTEGER))) as easting, y(transform(geospatialcolumn, CAST (vocabname AS INTEGER))) as northing " +
        "from latestnondeletedarchent, vocabulary " +
        "where uuid = " + currentSampleUUID + " " +
        "and vocabid = " + getFieldValue(tabgroup + "/Basic_Info/SRID") + ";";
    fetchOne(query, new FetchCallback() {
        onFetch(result) {
            print("[fillInGPS()] Fetched DB transformed geometry: " + result);
            setFieldValue(tabgroup + "/Basic_Info/Latitude", result.get(0));
            setFieldValue(tabgroup + "/Basic_Info/Longitude", result.get(1));
            setFieldValue(tabgroup + "/Basic_Info/Northing", result.get(2));
            setFieldValue(tabgroup + "/Basic_Info/Easting", result.get(3));
        }
    });
}

dataEntryLayerID = null;

/* Initialises the map. */
initMap() {
    // Base map layer
    setMapZoom("Project/Map/map", 15.0f);
    // showBaseMap("Project/Map/map", "base map", "files/data/maps/SydneyStreetmap.tif");
    showBaseMap("Project/Map/map", "base map", "files/data/maps/Capricorn.tif");
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(10, Color.BLACK, 40, Typeface.SANS_SERIF);
    
    isEntity = true;
    // Database layers
    waterQueryName = "Water Samples";
    waterQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Water Sample'";
    waterps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    showDatabaseLayer("Project/Map/map", "Water Samples", isEntity, waterQueryName, waterQuerySql, waterps, ls, pos, ts);
        
    plantQueryName = "Plant Samples";
    plantQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Plant Sample'";
    plantps = createPointStyle(10, Color.GREEN, 0.2f, 0.5f);
    showDatabaseLayer("Project/Map/map", "Plant Samples", isEntity, plantQueryName, plantQuerySql, plantps, ls, pos, ts);
    
    soilQueryName = "Soil Samples";
    soilQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Soil Sample'";
    soilps = createPointStyle(10, Color.BLACK, 0.2f, 0.5f);
    showDatabaseLayer("Project/Map/map", "Soil Samples", isEntity, soilQueryName, soilQuerySql, soilps, ls, pos, ts);
    
    rockQueryName = "Rock Samples";
    rockQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Rock Sample'";
    rockps = createPointStyle(10, Color.RED, 0.2f, 0.5f);   
    showDatabaseLayer("Project/Map/map", "Rock Samples", isEntity, rockQueryName, rockQuerySql, rockps, ls, pos, ts);
    
    notesQueryName = "Notes";
    notesQuerySql = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Note'";
    notesps = createPointStyle(10, Color.YELLOW, 0.2f, 0.5f);
    notesls = createLineStyle(10, Color.YELLOW, 0.05f, 0.3f, null);
    notespos = createPolygonStyle(10, Color.YELLOW, createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    showDatabaseLayer("Project/Map/map", "Shape Notes", isEntity, notesQueryName, notesQuerySql, notesps, notesls, notespos, ts);
    // Canvas layers
    dataEntryLayerID = createCanvasLayer("Project/Map/map", "Data Entry Layer");
    setSelectedLayer("Project/Map/map", "Data Entry Layer");
    loadMapSettings();
    print("[initMap()] Finished Initialising the Map.");
}

/* Centres the map on the current position. */
centreMap() {
    if(!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("{GPS_Not_Initialised}");
    } else {
        centerOnCurrentPosition("Project/Map/map");
    }
}

/* Loads a map configuration file if one exists. */
loadMapSettings() {
   jsonFile = getAttachedFilePath("files/data/saved_config.json");
    if(new File(jsonFile).exists()) {
        loadMapViewConfiguration("Project/Map/map", jsonFile, "showToast(\"{Loaded_Map_Configuration}\")");
    }
}

/* Saves the current map configuration. */
saveMapSettings() {
    file = getAttachedFilePath("files/data/saved_config.json");
    saveMapViewConfiguration("Project/Map/map", file, "showToast(\"{Saved_Map_Configuration}\")");
}

shapeUUID = null;
onEvent("Shape/Shape_Note", "show", "saveShape();");

/* Generates a confirmation prompt to delete the given shape note. */
deleteShape(String shapeID) {
    showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Shape_Note}!", "reallyDeleteShape(\"" + shapeID + "\")", "doNotDelete()");
}

/* Deletes the given Shape. */
reallyDeleteShape(String shapeID) {
    deleteArchEnt(shapeID, new DeleteCallback() {
        onDelete(uuid) {
            shapeID = null;
            shapeUUID = shapeID;
            showToast("{Shape_Note_Deleted}");
            navigateToMap();
        }
    });
}

/* Auto saves the shape note entity. */
saveShape() {
    List geolist = getGeometryList("Project/Map/map", dataEntryLayerID);
    print("[saveShape()] saving with geolist: " + geolist);
    Boolean enable_autosave = true;
    saveTabGroup("Shape", shapeUUID, geolist, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            shapeUUID = uuid;
            print("[saveShape()] Autosaved shape uuid: "+shapeUUID);
            // Clear the data entry layer
            if (newRecord && geoList != null && geolist.size() != 0) {
                for (geom : geolist) {
                    print("Geometry cleared:" + geom.userData.geomId);
                    clearGeometry("Project/Map/map", geom.userData.geomId);
                }
                geoList = getGeometryList("Project/Map/map", dataEntryLayerID);
                print("[saveShape()] Cleared geometry list: " + geoList);
            }
        }
        onError(message) {
            showToast(message);
        }  
    }, enable_autosave);
}

/* Saves drawn shapes with an attatched note. */
createShape() {
    shapeUUID = null;
    print("[createShape()] DataEntryLayer ID: " + dataEntryLayerID);
    List geolist = getGeometryList("Project/Map/map", dataEntryLayerID);
    print("[createShape()] geolist: " + geolist);
    if (geolist == null || geolist.size() == 0) {
        showWarning("{Warning}", "{Error_No_Shapes_Present}");
    } else {
        newTabGroup("Shape");
        print("[createShape()] new shape tab group");
    }
}

Boolean arrivedFromSample = false;

/* Renders all the dynamic views for the map tab. */
renderDynamicMapViews() {
    print("[renderDynamicMapViews()] arrived at map from sample: " + arrivedFromSample);
    removeAllViewsAndContainers("Project");
    executeViewTask(new ViewTask() {
        doTask() {
            if (arrivedFromSample) {
                print("[renderDynamicMapViews()] arrived at map from sample.");
                arrivedFromSample = false;
                buttonDef = createViewDef().createButton().setLabel("Return to data recording and save point");
                createView("Project/Map/returnToSample", buttonDef);
                onEvent("Project/Map/returnToSample", "click", "returnToSample();");
            } else {
                print("[renderDynamicMapViews()] arrived at map from somewhere other than a sample.");
            }
        }
    });
}

// // Bind newly created geometry to a geo ID list to use later in clearing.
// ArrayList geometryIDList = new ArrayList();
// onToolEvent("Project/Map/map", "create", "onCreate()");
// onCreate() {
//     geometryIDList.add(getMapGeometryCreated());
//     print("Geometry id list: " + geometryIDList);
// }

/* Returns to the sample from the map after recording a point. */
returnToSample() {
    String tabgroup = getSampleTypePath();

    // Get the geometry from the data layer and proceed only if the geometry is a single point.
    List geolist = getGeometryList("Project/Map/map", dataEntryLayerID);
    print("[returnToSample()] Gemoetry List: " + geolist);
    if (geolist.size() != 1) {
        showAlert("{Alert}", "{Only_One_Point_Allowed}", "", "showTabGroup(\""+tabgroup+"\");");
        return;
    }
    boolean isPoint = false;
    if (geolist.get(0) instanceof Point) {
        isPoint = true;
    }
    if (!isPoint) {
        return;
    }

    // Save the archent with the point as the entity geometry
    saveArchEnt(currentSampleUUID, getSampleType(), geolist, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            print("[returnToSample()] Saved geometry: " + geolist);
            fillInGPS();
            // for (Geometry geomId : geolist) {
            //     clearGeometry("Project/Map/map", geomId);
            // }
        }  
    });

    // Clear the data entry layer and return to the sample tab
    
    // clearGeometryList("Project/Map/map", geolist);
    showTabGroup(tabgroup);
}

initMap();


/*** WATER SAMPLE ***/
onEvent("Water_Sample", "show", "addSampleNavigation();autoSaveSample();");

onEvent("Water_Sample/Basic_Info/Take_GPS", "click", "takePoint()");
onEvent("Water_Sample/Basic_Info/Take_Photo", "click", "attachPictureTo(\"Water_Sample/Basic_Info/Photos\")");
onEvent("Water_Sample/Basic_Info/Attach_Sketch", "click", "attachFileTo(\"Water_Sample/Basic_Info/Sketches\");");
onEvent("Water_Sample/Basic_Info/View_Sketch", "click", "viewArchEntAttachedFiles(currentSampleUUID);");

onEvent("Water_Sample/Codes/Hole_Angle", "click", "populateEstimatedAngle();");

onEvent("Water_Sample/Photolog", "show", "loadRelatedPhotologs(currentSampleUUID, \"Water_Sample\");");
onEvent("Water_Sample/Photolog/New_Photolog", "click", "newPhotolog();");
onEvent("Water_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

onEvent("Water_Sample/Basic_Info", "show", "validateTempConduct()");
onEvent("Water_Sample/Codes", "show", "validateTempConduct()");
onEvent("Water_Sample/Photolog", "show", "validateTempConduct()");
onEvent("Water_Sample/pH_Eh", "show", "seenPhEhTab=true;");
onEvent("Water_Sample", "load", "overrideTempCond=false;");

onEvent("Water_Sample/pH_Eh/Temperature" , "click" , "print(\"Temperature view clicked. Arming validation\");overrideTempCond=false;");
onEvent("Water_Sample/pH_Eh/Conductivity", "click", "print(\"Conductivity view clicked. Arming validation\");overrideTempCond=false;");
/* BUG: click events not always firing on first click*/

boolean overrideTempCond = false;
boolean seenPhEhTab = false;
 
/* Initialises the globals used for temp and conductivity validation. */
initWaterValidationGlobals() {
    overrideTempCond = false;
    seenPhEhTab = false;
    /* BUG: the global flag 'seenPhEhTab' isnt registering as being changed to false before the new sample 
            is created or loaded, if user just left ph tab of another sample before validation message was shown */    
}

/* Validates the temperature and conductivity fields. */
validateTempConduct() {
    temp = getFieldValue("Water_Sample/pH_Eh/Temperature");
    cond = getFieldValue("Water_Sample/pH_Eh/Conductivity");
    // generate a prompt if the fields are empty and the user hasn't overriden the prompt previously.
    if (seenPhEhTab && !overrideTempCond && (isNull(temp) || isNull(cond))) {
        print("[validateTempConduct()] Showing temperature and conductivity validation message. overrideTempCond: " + overrideTempCond + " seenPhEhTab: " + seenPhEhTab);
        String message = "Temperature or Conductivity";
        if (isNull(temp) && !isNull(cond)) {
            message = "Temperature";
        } else if (!isNull(temp) && isNull(cond)){
            message = "Conductivity";
        }
        // showAlert("Alert", "There is no value entered for " + message, "overrideTempValidation()", "overrideTempValidation()");
        showAlert("{Alert}", "{No_Value_Entered} " + message, "overrideTempCond=true;", "overrideTempCond=true;showTab(\"Water_Sample/pH_Eh\");");
    } else {
        print("[validateTempConduct()] seenPhEhTab: " + seenPhEhTab + "\n overrideTempCond: " + overrideTempCond + "\n temperature: " + temp + "\n conductivity: " + cond);
    }
}

/* Loads a specific water sample based on the given ID. */
loadWaterSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Water_Sample_Selected}");
        return;
    }
    // Perform neccessary initialisation
    initWaterValidationGlobals();
    showTabGroup("Water_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            renderLocationNumber();
            fetchOne("select createdBy from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Water_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(createdAt , 'localtime') from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Water_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
            toFormat = new java.text.SimpleDateFormat("HH:mm");
            if(!isNull(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"))) {
                Date preferred_ph_time = fromFormat.parse(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"));
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", toFormat.format(preferred_ph_time));
            }
            if(!isNull(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"))) {
                Date preferred_eh_time = fromFormat.parse(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"));
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", toFormat.format(preferred_eh_time));
            }           
            fetchOne("select uuid " + 
                    "from latestnondeletedaentvalue " +
                    "join latestnondeletedarchent using (uuid) " +
                    "join aenttype using (aenttypeid) " +
                    "join attributekey using (attributeid)  " +
                    "where attributename = 'Preferred'  " +
                    "and aenttypename = 'pH' " +
                    "and measure=1 " +
                    "and uuid in (select a.uuid " +
                    "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                    "where a.uuid != b.uuid " +
                    "and b.uuid = " + archentid + ");", new FetchCallback() {
                onFetch(result) {
                    if(!isNull(result)) {
                        preferred_ph = result.get(0);
                    }
                }
            });
            fetchOne("select uuid " +
                    "from latestnondeletedaentvalue " +
                    "join latestnondeletedarchent using (uuid) " +
                    "join aenttype using (aenttypeid) " +
                    "join attributekey using (attributeid)  " +
                    "where attributename = 'Preferred'  " +
                    "and aenttypename = 'Eh' " +
                    "and measure=1 " +
                    "and uuid in (select a.uuid " +
                    "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                    "where a.uuid != b.uuid " +
                    "and b.uuid = " + archentid + ") ;", new FetchCallback() {
                onFetch(result) {
                    if(!isNull(result)) { 
                        preferred_eh = result.get(0);
                    }
                }
            });
            keepTabGroupChanges("Water_Sample");
        }

            onError(message) {
                showToast(message);
            }
    });
}

/* Populates all auto-generated fields for the water sample. */
loadWaterSampleAttributes() {
    makeVocab("RadioGroup", "Water_Sample/Basic_Info/Observation_Type", "Observation Type");
    makeVocab("DropDown", "Water_Sample/Basic_Info/SRID", "SRID");
    makeVocab("CheckBoxGroup", "Water_Sample/Basic_Info/Samples_Collected", "Samples Collected");
    makeVocab("DropDown", "Water_Sample/Codes/Hole_Type", "Hole Type");
    makeVocab("DropDown", "Water_Sample/Codes/Hole_Lining", "Hole Lining");
    makeVocab("RadioGroup", "Water_Sample/Codes/Hole_Open_Closed", "Hole Open or Closed");
    makeVocab("DropDown", "Water_Sample/Codes/Pipes_In_Hole", "Pipes In Hole");
    makeVocab("DropDown", "Water_Sample/Codes/Hole_Angle", "Hole Angle");
    makeVocab("RadioGroup", "Water_Sample/Codes/Outflow_Present", "Outflow Present");
    makeVocab("DropDown", "Water_Sample/Codes/Sampling_Issues", "Sampling Issues");
}

/* Populates the estimated angle of the water sample from the database. */
populateEstimatedAngle() {
    fetchOne("select vocabName from vocabulary where vocabid = '"+ getFieldValue("Water_Sample/Codes/Hole_Angle") +"';", new FetchCallback() {
        onFetch(result) {
            if(result.get(0).equals("{Vertical}")) {
                setFieldValue("Water_Sample/Codes/Estimated_Angle", "90");
            }
        }
        onError(message) {
            showToast(message);
        }
    });
}

/*** pH/Eh ***/

ph_count = 0;
eh_count = 0;
preferred_ph = null;
preferred_eh = null;

onEvent("Water_Sample/pH_Eh", "show", "renderpHEhPage();");

/*********************************************************************************\
 *                                                                               *
 * WARNING: Do NOT re-use the following renderpHEhPage() code in future modules. *
 *                                                                               *
\*********************************************************************************/

/* Renders the pH/Eh tab using dynamic UI. */
renderpHEhPage() {
    executeViewTask(new ViewTask() {
        doTask() {
            removeAllViewsAndContainers("Water_Sample");
            style1 = "orientation";
            style2 = "even";
            createContainer("Water_Sample/pH_Eh/container3", "orientation");
            createContainer("Water_Sample/pH_Eh/child1", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/pH_Container", "even", "Water_Sample/pH_Eh/child1");

            createContainer("Water_Sample/pH_Eh/child2", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/Eh_Container", "even", "Water_Sample/pH_Eh/child2");
            
            ph_count = 0;
            eh_count = 0;
            ArrayList ph_list = new ArrayList();
            ArrayList eh_list = new ArrayList();
            fetchAll("select uuid, group_concat(measure,'|') " +
                    "from latestnondeletedaentvalue " +
                    "join latestnondeletedarchent using (uuid) " +
                    "join aenttype using (aenttypeid) " +
                    "join attributekey using (attributeid) " +
                    "where aenttypename = 'pH' " +
                    "and uuid in (select a.uuid " +
                    "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                    "where a.uuid != b.uuid " +
                    "and b.uuid = "+ currentSampleUUID +") " +
                    "group by uuid " + 
                    "order by uuid, attributename desc; ",  new FetchCallback() {
                    onFetch(ph_list) {
                        print("[renderpHEhPage()] ph list: " + ph_list);
                        fetchAll("select uuid, group_concat(measure,'|') " +
                                "from latestnondeletedaentvalue " +
                                "join latestnondeletedarchent using (uuid) " +
                                "join aenttype using (aenttypeid)  " +
                                "join attributekey using (attributeid) " +
                                "where aenttypename = 'Eh' " +
                                "and uuid in (select a.uuid " +
                                "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " +
                                "where a.uuid != b.uuid " +
                                "and b.uuid = "+ currentSampleUUID +") " +
                                "group by uuid " + 
                                "order by uuid, attributename desc;",  new FetchCallback() {
                            onFetch(eh_list) {
                                print("[renderpHEhPage()] eh list: " + eh_list);
                                for(ph : ph_list) {
                                    createContainer("Water_Sample/pH_Eh/pH_Row_" + ph_count, "orientation", "Water_Sample/pH_Eh/pH_Container");
                                    createContainer("Water_Sample/pH_Eh/Check_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createContainer("Water_Sample/pH_Eh/pH_Value_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createContainer("Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createView("Water_Sample/pH_Eh/Check_pH_" + ph_count, createViewDef().createRadioGroup().addChoice("", "1"), "Water_Sample/pH_Eh/Check_pH_Container_" + ph_count);
                                    createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/pH_Value_Container_" + ph_count);
                                    createView("Water_Sample/pH_Eh/Delete_pH_" + ph_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count);

                                    String ph_value = ph.get(1).split("[|]")[0];
                                    String ph_time = ph.get(1).split("[|]")[1];
                                    String ph_id = ph.get(0);
                                    int index = ph_count;

                                    if(ph_id.equals(preferred_ph)) {
                                        setFieldValue("Water_Sample/pH_Eh/Check_pH_" + ph_count, "1");
                                    }
                                    setFieldValue("Water_Sample/pH_Eh/pH_Value_" + ph_count, ph_value);
                                    
                                    onEvent("Water_Sample/pH_Eh/Check_pH_" + ph_count, "click", "setPreferredpH(\"" + ph_id + "\", \"" + ph_value + "\", \"" + ph_time + "\", " + ph_count + ");");
                                    onEvent("Water_Sample/pH_Eh/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\");");
                                    ph_count++;
                                }
                                for(eh : eh_list) {
                                    createContainer("Water_Sample/pH_Eh/Eh_Row_" + eh_count, "orientation", "Water_Sample/pH_Eh/Eh_Container");
                                    createContainer("Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createContainer("Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createContainer("Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Check_Eh_" + eh_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count);
                                    String eh_value = eh.get(1).split("[|]")[0];
                                    String eh_time = eh.get(1).split("[|]")[1];
                                    String eh_id = eh.get(0);
                                    int index = eh_count;

                                    if(eh_id.equals(preferred_eh)) {
                                        setFieldValue("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "");
                                    }
                                    setFieldValue("Water_Sample/pH_Eh/Eh_Value_" + eh_count, eh_value);

                                    onEvent("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "click", "setPreferredEh(\"" + eh_id + "\", \"" + eh_value + "\", \"" + eh_time + "\", " + eh_count + ");");
                                    onEvent("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, "click", "deleteEh(\"" + eh_id + "\");");
                                    eh_count++;
                                }
                                createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{pH}"), "Water_Sample/pH_Eh/child1");
                                createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{Eh}"), "Water_Sample/pH_Eh/child2");
                                
                                createView("Water_Sample/pH_Eh/New_pH", createViewDef().createButton().setLabel("{Add_New_pH}"), "Water_Sample/pH_Eh/child1");
                                createView("Water_Sample/pH_Eh/New_Eh", createViewDef().createButton().setLabel("{Add_New_Eh}"), "Water_Sample/pH_Eh/child2");
                                onEvent("Water_Sample/pH_Eh/New_pH", "delayclick", "addNewpH(getFieldValue(\"Water_Sample/pH_Eh/pH_Value_\" + ph_count));");
                                onEvent("Water_Sample/pH_Eh/New_Eh", "delayclick", "addNewEh(getFieldValue(\"Water_Sample/pH_Eh/Eh_Value_\" + eh_count));");
                                refreshTabgroupCSS("Water_Sample");
                            }
                            onError(message) {
                                showToast(message);
                            }
                        });
                    }
                    onError(message) {
                        showToast(message);
                    }
                });
        }
    });
}

/********************************************************************************\
 *                                                                              *
 * WARNING: Do NOT re-use the previous renderpHEhPage() code in future modules. *
 *                                                                              *
\********************************************************************************/

/* Adds a new pH value, saves the entity and updates the dynamic UI. */
addNewpH(String ph_value) {
    if(isNull(ph_value)) {
        showToast("{Please_Fill_In_PH}");
        return;
    }
    List attributes = createAttributeList();
    ph_time = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z").format(new Date());
    attributes.add(createEntityAttribute("pH", null, null, ph_value, null));
    attributes.add(createEntityAttribute("Time", null, null, ph_time, null));

    saveArchEnt(null, "pH", null, attributes, new SaveCallback() {
        onSave(ph_id, newRecord) {
            saveEntitiesToRel("Water Sample pH", currentSampleUUID, ph_id);
            removeView("Water_Sample/pH_Eh/pH_Value_" + ph_count);
            removeView("Water_Sample/pH_Eh/New_pH");

            createContainer("Water_Sample/pH_Eh/pH_Row_" + ph_count, "orientation", "Water_Sample/pH_Eh/pH_Container");
            createContainer("Water_Sample/pH_Eh/Check_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/pH_Value_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createView("Water_Sample/pH_Eh/Check_pH_" + ph_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_pH_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/pH_Value_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/Delete_pH_" + ph_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count);
            setFieldValue("Water_Sample/pH_Eh/pH_Value_" + ph_count, ph_value);

            int index = ph_count;
            onEvent("Water_Sample/pH_Eh/Check_pH_" + ph_count, "click", "setPreferredpH(\"" + ph_id + "\", \"" + ph_value + "\", \"" + ph_time + "\", " + ph_count + ");");
            onEvent("Water_Sample/pH_Eh/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\");");
            ph_count++;

            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{pH}"), "Water_Sample/pH_Eh/child1");
            createView("Water_Sample/pH_Eh/New_pH", createViewDef().createButton().setLabel("{Add_New_pH}"), "Water_Sample/pH_Eh/child1");
            onEvent("Water_Sample/pH_Eh/New_pH", "delayclick", "addNewpH(getFieldValue(\"Water_Sample/pH_Eh/pH_Value_\" + ph_count));");
            refreshTabgroupCSS("Water_Sample");
        }
    });
}

/* Adds a new Eh value, saves the entity and updates the dynamic UI. */
addNewEh(String eh_value) {
    if(isNull(eh_value)) {
        showToast("{Please_Fill_In_EH}");
        return;
    }
    List attributes = createAttributeList();
    eh_time = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z").format(new Date());
    attributes.add(createEntityAttribute("Eh", null, null, eh_value, null));
    attributes.add(createEntityAttribute("Time", null, null, eh_time, null));

    saveArchEnt(null, "Eh", null, attributes, new SaveCallback() {
        onSave(eh_id, newRecord) {
            saveEntitiesToRel("Water Sample Eh", currentSampleUUID, eh_id);
            removeView("Water_Sample/pH_Eh/Eh_Value_" + eh_count);
            removeView("Water_Sample/pH_Eh/New_Eh");

            createContainer("Water_Sample/pH_Eh/Eh_Row_" + eh_count, "orientation", "Water_Sample/pH_Eh/Eh_Container");
            createContainer("Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createContainer("Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createContainer("Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createView("Water_Sample/pH_Eh/Check_Eh_" + eh_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count);
            createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count);
            createView("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count);
            setFieldValue("Water_Sample/pH_Eh/Eh_Value_" + eh_count, eh_value);

            int index = eh_count;
            onEvent("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "click", "setPreferredEh(\"" + eh_id + "\", \"" + eh_value + "\", \"" + eh_time + "\", " + eh_count + ");");
            onEvent("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, "click", "deleteEh(\"" + eh_id + "\");");
            eh_count++;

            createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{Eh}"), "Water_Sample/pH_Eh/child2");
            createView("Water_Sample/pH_Eh/New_Eh", createViewDef().createButton().setLabel("{Add_New_Eh}"), "Water_Sample/pH_Eh/child2");
            onEvent("Water_Sample/pH_Eh/New_Eh", "delayclick", "addNewEh(getFieldValue(\"Water_Sample/pH_Eh/Eh_Value_\" + eh_count));");
            refreshTabgroupCSS("Water_Sample");
        }
    });
}

/* Sets the preferred pH and time for the given pH ID and saves to the database. */
setPreferredpH(String ph_id, String ph_value, String ph_time, int index) {
    if(ph_id == preferred_ph) return;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, null, null));
    saveArchEnt(preferred_ph, "pH", null, attributes, null);

    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, "1", null));
    saveArchEnt(ph_id, "pH", null, attributes, null);

    preferred_ph = ph_id;
    for(int i = 0; i < ph_count; i++) {
        if(i == index) continue;
        setFieldValue("Water_Sample/pH_Eh/Check_pH_" + i, (String) null);
    }
    fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
    toFormat = new java.text.SimpleDateFormat("HH:mm");
    Date preferred_ph_time = fromFormat.parse(ph_time);
    setFieldValue("Water_Sample/pH_Eh/Preferred_pH", ph_value);
    setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", toFormat.format(preferred_ph_time));
    setFieldValue("Water_Sample/Hidden/Preferred_pH_Time", ph_time);
}

/* Sets the preferred Eh and time for the given Eh ID and saves to the database. */
setPreferredEh(String eh_id, String eh_value, String eh_time, int index) {
    if(eh_id == preferred_eh) return;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, null, null));
    saveArchEnt(preferred_eh, "Eh", null, attributes, null);

    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, "1", null));
    saveArchEnt(eh_id, "Eh", null, attributes, null);

    preferred_eh = eh_id;
    for(int i = 0; i < eh_count; i++) {
        if(i == index) continue;
        setFieldValue("Water_Sample/pH_Eh/Check_Eh_" + i, (String) null);
    }
    fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
    toFormat = new java.text.SimpleDateFormat("HH:mm");
    Date preferred_eh_time = fromFormat.parse(eh_time);
    setFieldValue("Water_Sample/pH_Eh/Preferred_Eh", eh_value);
    setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", toFormat.format(preferred_eh_time));
    setFieldValue("Water_Sample/Hidden/Preferred_Eh_Time", eh_time);
}

/* Generates a confirmation prompt to delete the given pH. */
deletepH(String ph_id) {
    showAlert("{Confirm_Deletion}", "{Press_To_Delete} {pH}!", "reallyDeletepH(\"" + ph_id + "\")", "doNotDelete()");
}

/* Deletes the given pH. */
reallyDeletepH(String ph_id) {
    deleteArchEnt(ph_id, new DeleteCallback() {
        onDelete(uuid) {
            if(ph_id == preferred_ph) {
                preferred_ph = null;
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH", "");
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", "");
                setFieldValue("Water_Sample/Hidden/Preferred_pH_Time", "");
            }
            showTab("Water_Sample/Codes");
            showTab("Water_Sample/pH_Eh");
        }
    });
}

/* Generates a confirmation prompt to delete the given pH. */
deleteEh(String eh_id) {
    showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Eh}!", "reallyDeleteEh(\"" + eh_id + "\")", "doNotDelete()");
}

/* Deletes the given Eh. */
reallyDeleteEh(String eh_id) {
    deleteArchEnt(eh_id, new DeleteCallback() {
        onDelete(uuid) {
            if(eh_id == preferred_eh) {
                preferred_eh = null;
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh", "");
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", "");
                setFieldValue("Water_Sample/Hidden/Preferred_Eh_Time", "");
            }
            showTab("Water_Sample/Codes");
            showTab("Water_Sample/pH_Eh");
        }
    });
}

/*** PLANT SAMPLE ***/

onEvent("Plant_Sample", "show", "addSampleNavigation();autoSaveSample();");

onEvent("Plant_Sample/Basic_Info/Take_GPS", "click", "takePoint()");
onEvent("Plant_Sample/Basic_Info/Take_Photo", "click", "attachPictureTo(\"Plant_Sample/Basic_Info/Photos\")");
onEvent("Plant_Sample/Basic_Info/Attach_Sketch", "click", "attachFileTo(\"Plant_Sample/Basic_Info/Sketches\");");
onEvent("Plant_Sample/Basic_Info/View_Sketch", "click", "viewArchEntAttachedFiles(currentSampleUUID);");

onEvent("Plant_Sample/Photolog", "show", "loadRelatedPhotologs(currentSampleUUID, \"Plant_Sample\");");
onEvent("Plant_Sample/Photolog/New_Photolog", "click", "newPhotolog();");
onEvent("Plant_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

/* Loads a specific plant sample based on the given ID. */
loadPlantSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Plant_Sample_Selected}");
        return;
    }
    showTabGroup("Plant_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            renderLocationNumber();
            fetchOne("select createdBy from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Plant_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(createdAt , 'localtime') from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Plant_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            keepTabGroupChanges("Plant_Sample");
        }
    });
}

/* Populates all auto-generated fields for the plant sample. */
loadPlantSampleAttributes() {
    makeVocab("RadioGroup", "Plant_Sample/Basic_Info/Observation_Type", "Observation Type");
    makeVocab("DropDown", "Plant_Sample/Basic_Info/SRID", "SRID");
    makeVocab("CheckBoxGroup", "Plant_Sample/Basic_Info/Soil_Description", "Soil Description");
    populateHierarchicalDropDown("Plant_Sample/Basic_Info/Landform_Description", "Landform Description");
}

/*** SOIL SAMPLE ***/

onEvent("Soil_Sample", "show", "addSampleNavigation();autoSaveSample();");

onEvent("Soil_Sample/Basic_Info/Take_GPS", "click", "takePoint()");
onEvent("Soil_Sample/Basic_Info/Take_Photo", "click", "attachPictureTo(\"Soil_Sample/Basic_Info/Photos\")");
onEvent("Soil_Sample/Basic_Info/Attach_Sketch", "click", "attachFileTo(\"Soil_Sample/Basic_Info/Sketches\");");
onEvent("Soil_Sample/Basic_Info/View_Sketch", "click", "viewArchEntAttachedFiles(currentSampleUUID);");

onEvent("Soil_Sample/Photolog", "show", "loadRelatedPhotologs(currentSampleUUID, \"Soil_Sample\");");
onEvent("Soil_Sample/Photolog/New_Photolog", "click", "newPhotolog();");
onEvent("Soil_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

/* Loads a specific soil sample based on the given ID. */
loadSoilSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Soil_Sample_Selected}");
        return;
    }
    showTabGroup("Soil_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            renderLocationNumber();
            fetchOne("select createdBy from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Soil_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(createdAt , 'localtime') from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Soil_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            keepTabGroupChanges("Soil_Sample");
        }
    });
}

/* Populates all auto-generated fields for the soil sample. */
loadSoilSampleAttributes() {
    makeVocab("RadioGroup", "Soil_Sample/Basic_Info/Observation_Type", "Observation Type");
    makeVocab("DropDown", "Soil_Sample/Basic_Info/SRID", "SRID");
    makeVocab("RadioGroup", "Soil_Sample/Basic_Info/Lag", "Lag");
    makeVocab("CheckBoxGroup", "Soil_Sample/Basic_Info/Soil_Texture", "Soil Texture");
    populateHierarchicalDropDown("Soil_Sample/Basic_Info/Geology", "Geology");
    makeVocab("RadioGroup", "Soil_Sample/Basic_Info/Drainage", "Drainage");
    makeVocab("RadioGroup", "Soil_Sample/Basic_Info/Contamination", "Contamination");
    populateHierarchicalDropDown("Soil_Sample/Basic_Info/Regolith_Type", "Regolith Type");
    populateHierarchicalDropDown("Soil_Sample/Basic_Info/Landform", "Landform");
}

/*** ROCK SAMPLE ***/

onEvent("Rock_Sample", "show", "addSampleNavigation();autoSaveSample();");

onEvent("Rock_Sample/Basic_Info/Take_GPS", "click", "takePoint()");
onEvent("Rock_Sample/Lithological_Info/Take_Photo", "click", "attachPictureTo(\"Rock_Sample/Lithological_Info/Photos\")");
onEvent("Rock_Sample/Lithological_Info/Attach_Sketch", "click", "attachFileTo(\"Rock_Sample/Lithological_Info/Sketches\");");
onEvent("Rock_Sample/Lithological_Info/View_Sketch", "click", "viewArchEntAttachedFiles(currentSampleUUID);");

onEvent("Rock_Sample/Photolog", "show", "loadRelatedPhotologs(currentSampleUUID, \"Rock_Sample\");");
onEvent("Rock_Sample/Photolog/New_Photolog", "click", "newPhotolog();");
onEvent("Rock_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

/* Loads a rock sample based on the given ID. */
loadRockSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Rock_Sample_Selected}");
        return;
    }
    showTabGroup("Rock_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            renderLocationNumber();
            fetchOne("select createdBy from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Rock_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(createdAt , 'localtime') from createdModifiedAtBy where uuid = '" + archentid + "';", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Rock_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            keepTabGroupChanges("Rock_Sample");
        }
    });
}

/* Populates all auto-generated fields for the rock sample. */
loadRockSampleAttributes() {
    makeVocab("RadioGroup", "Rock_Sample/Basic_Info/Observation_Type", "Observation Type");
    makeVocab("DropDown", "Rock_Sample/Basic_Info/SRID", "SRID");
    makeVocab("DropDown", "Rock_Sample/Lithological_Info/Lithology", "Lithology");
    makeVocab("DropDown", "Rock_Sample/Lithological_Info/Fineness_Inclusion_Size", "Fineness or Inclusion size");
    makeVocab("DropDown", "Rock_Sample/Lithological_Info/Grain_Size", "Grain Size");
    makeVocab("DropDown", "Rock_Sample/Lithological_Info/Sorting", "Sorting");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Strike", "Strike");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Dip", "Dip");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Bedding", "Bedding");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Cleavage", "Cleavage");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Foliation", "Foliation");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Veins", "Veins");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Plunge", "Plunge");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Azimuth", "Azimuth");                                                
    populateWebViewHtml("Rock_Sample/Measurements/Web_Fold_Axis_1", "Fold Axis 1");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Fold_Axis_2", "Fold Axis 2");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Fold_Axis_3", "Fold Axis 3");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Mineral_Lineation", "Mineral Lineation");
    populateWebViewHtml("Rock_Sample/Measurements/Web_Stretching_Lineation", "Stretching Lineation");
}

/*** PHOTOLOG ***/

onEvent("Photolog", "show", "addPhotologNavigation();");
onFocus("Photolog/Photolog/Photo_ID", null, "activateAutoSavePhotolog();");
onEvent("Photolog/Photolog/Photo_Back", "click", "cancelTabGroup(\"Photolog\", false);showTabGroup(getSampleTypePath());");

String photolog_id = null;

/* Creates a new photolog for the user to fill out, with the timestamp auto-generated. */
newPhotolog() {
    newTabGroup("Photolog");
    photolog_id = null;
    setTimestamp("Photolog/Photolog/Photo_Timestamp");
}

/* Loads a photolog based on the most recent list item selected. */
loadPhotolog() {
    photolog_id = getListItemValue();
    print("[loadPhotolog()] photolog list item value null status: " + isNull(photolog_id));
    print("[loadPhotolog()] Using photolog list item value as photolog_id: " + photolog_id);
    if (!isNull(photolog_id)) {
        loadPhotologFrom(photolog_id);
    }
}

/* Loads a photolog based on the given ID. */
loadPhotologFrom(archentid) {
    if (isNull(archentid)) {
        showToast("{No_Photolog_Selected}");
        return;
    }

    showTabGroup("Photolog", archentid, new FetchCallback() {
        onFetch(result) {
            photolog_id = archentid;
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                }
            }, true);
        }
    });
}

/* Activates autosaving for the photolog. */
activateAutoSavePhotolog() {
    if(!isNull(photolog_id) || isNull(getFieldValue("Photolog/Photolog/Photo_ID"))) return;
    saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            saveEntitiesToRel("Sample Photolog", currentSampleUUID, photolog_id);
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                    
                }
            }, true);
        }
    });
}

/* Generates a confirmation to delete the current photolog */
deletePhotolog() {
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_To_Delete} {Photolog}!", "reallyDeletePhotolog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photolog", true);
    }
}

/* Deletes the current photolog. */
reallyDeletePhotolog() {
    deleteArchEnt(photolog_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Photolog", false);
            tabgroup = getSampleTypePath();
            showTab(tabgroup + "/Photolog");
        }
    });
}

/* Creates sidebar navigation buttons for the photolog. */
addPhotologNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Photolog}";
        }
        actionOn() {
            if(!isNull(photolog_id)) {
                newPhotolog();
            } else {
                showAlert("{Warning}", "{Lose_Unsaved_Changes}!", "newPhotolog()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Photolog}";
        }
        actionOn() {
            deletePhotolog();
        }
    }, "danger");
}

/* Populates the photolog list with the existing photologs linked to the given sample ID. */
loadRelatedPhotologs(String related_sample_id, String type) {
    if(!isNull(related_sample_id)) {
        fetchAll("select uuid, response " +
                "from latestNonDeletedArchEntFormattedIdentifiers " +
                "where aenttypename = 'Photolog' " +
                "and uuid in  (select uuid " +
                "FROM latestNonDeletedAentReln " +
                "where relationshipid in (select relationshipid " +
                "FROM latestNonDeletedAentReln " +
                "JOIN relationship using (relationshipid) " +
                "JOIN relntype using (relntypeid) " +
                "where uuid = "+related_sample_id + " " +
                "and relntypeName = 'Sample Photolog') " +
                "and uuid != "+related_sample_id+");",  new FetchCallback() {
                onFetch(result) {
                    if(isNull(result)) {
                        result = new ArrayList();
                        result.add(new NameValuePair("{No_records_found}", ""));
                    }
                    populateList(type + "/Photolog/Photolog_List", result);
                }
                onError(message) {
                    showToast(message);
                }
            });     
    } else {
        result = new ArrayList();
        result.add(new NameValuePair("{No_records_found}", ""));
        populateList(type + "/Photolog/Photolog_List", result);
    }    
}

/*** MISC ***/

saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(callback != null) callback.call();
        }
    });
}

saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

/* Populates the path specified picture gallery from the database based on the given attribute name. */
makePictureGallery(String path, String attrib) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
        new FetchCallback() {
            onFetch(result) {
                populatePictureGallery(path, result);
            }
        });
}

/* Sets the value of the given view path to the current timestamp. */
setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

/* Informs the user that the delete operation was cancelled. */
doNotDelete() {
    showToast("{Delete_Cancelled}");
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("Project");
            setFieldValue("Project/Start/Author_Name", username);
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

loadWaterSampleAttributes();
loadPlantSampleAttributes();
loadSoilSampleAttributes();
loadRockSampleAttributes();
