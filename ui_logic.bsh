/*** 'Editable' - you can edit the code below based on the needs ***/
import java.util.concurrent.Callable;
User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view if exists identifierAsSpreadsheet;");
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from (select * from latestNonDeletedArchentIdentifiers order by attributename) group by uuid;");
}
makeLocalID();

/** Action Bar **/

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Sync enabled";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Sync disabled";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Internal GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Internal GPS disabled";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("GPS enabled.");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "External GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");

    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "External GPS disabled";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("GPS enabled.");
        } else {
            showToast("Please enable bluetooth.");
            this.isActionOff();
        }
    }
});

/*** Project Tab Group ***/

/* Event Handling */
onEvent("Project", "show", "removeNavigationButtons();");

onEvent("Project/Start", "show", "loadSamplePrefix(); loadSampleID();");
onEvent("Project/Start/New_Sample", "delayclick", "newSample();");
//onEvent("Project/Start/Validate_Sample_ID", "click", "validSampleID();");

// onEvent("Project/Defaults", "show", "loadDefaultIDs();");
// onFocus("Project/Defaults/Water_Sample", null, "saveDefault(\"Water\");");
// onFocus("Project/Defaults/Plant_Sample", null, "saveDefault(\"Plant\");");
// onFocus("Project/Defaults/Soil_Sample", null, "saveDefault(\"Soil\");");
// onFocus("Project/Defaults/Rock_Sample", null, "saveDefault(\"Rock\");");
// onEvent("Project/Defaults/Validate", "click", "showToast(\"Not implemented yet.\");");

onEvent("Project/Search", "show", "loadSearch();");
onEvent("Project/Search/Sample_Types", "click", "loadSearch();");
onEvent("Project/Search/Sample_List", "click", "loadSample();");

onEvent("Project/Map/Centre_Map", "click", "showToast(\"Centring functionality not implemented yet.\");");
onEvent("Project/Map/Save_Map_Settings", "click", "showToast(\"Save settings functionality not implemented yet.\");");
onEvent("Project/Map/Create_Shape", "click", "newTabGroup(\"Shape\");");

/* Generates of sample types for dropdown selection. */
sample_types = new ArrayList();
sample_types.add(new NameValuePair("{Water_Sample}", "Water Sample"));
sample_types.add(new NameValuePair("{Plant_Sample}", "Plant Sample"));
sample_types.add(new NameValuePair("{Soil_Sample}", "Soil Sample"));
sample_types.add(new NameValuePair("{Rock_Sample}", "Rock Sample"));
populateDropDown("Project/Start/Sample_Types", sample_types);
sample_types.add(0, new NameValuePair("{All}", "Sample"));
populateDropDown("Project/Search/Sample_Types", sample_types);

String sample_prefix = null;
String sample_starting_id = null;

/* Sets the sample prefix to the given value. */
setSamplePrefix(String samplePrefix) {
    sample_prefix = samplePrefix;
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Sample Prefix', '" + samplePrefix + "');", null);
}

/* Sets the sample ID to the given value. */
setSampleID(String sampleID) {
    sample_starting_id = sampleID;
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Sample ID', '" + sampleID + "');", null);
}

/* Loads the sample prefix if one exists. */
loadSamplePrefix() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Sample Prefix';", new FetchCallback() {
        onFetch(result) {
            print("prefix" + result);
            if (!isNull(result)) {
                sample_prefix = result.get(0);
                setFieldValue("Project/Start/Sample_Prefix", sample_prefix);
            }
        }
    });
}

/* Loads the sample starting ID if one exists, otherwise defaults to '1'. */
loadSampleID() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Sample ID';", new FetchCallback() {
        onFetch(result) {
            print("id:" + result);
            if (isNull(result)) {
                sample_starting_id = "1";
                setFieldValue("Project/Start/Sample_Starting_ID", sample_starting_id);
                setSampleID(sample_starting_id);
            } else {
                sample_starting_id = result.get(0);
                setFieldValue("Project/Start/Sample_Starting_ID", sample_starting_id);
            }
        }
    });
}

/* Validates the sample prefix for the right length. Returns true if the prefix is valid or false otherwise. */
boolean validSamplePrefix() {
    prefix = getFieldValue("Project/Start/Sample_Prefix");
    if (isNull(prefix)) {
        showWarning("Warning", "A sample prefix needs to be provided.");
        return false;
    } 
    if (prefix.length() > 5) {
        showWarning("Warning", "The sample prefix must be at most 5 characters.");
        return false;
    }
    return true;
}

/* Creates a new sample based on selected type. */
newSample() {
    // Validate the entered sample prefix before making a new sample.
    if (!validSamplePrefix()) {
        return;
    }
    setSamplePrefix(getFieldValue("Project/Start/Sample_Prefix"));
    setSampleID(getFieldValue("Project/Start/Sample_Starting_ID"));
    String type = getFieldValue("Project/Start/Sample_Types");
    if(type.equals("Water Sample")) {
        newWaterSample();
    } else if(type.equals("Plant Sample")) {
        newPlantSample();
    } else if(type.equals("Soil Sample")) {
        newSoilSample();
    } else {
        newRockSample();
    }
}

/* Removes sidebar buttons. */
removeNavigationButtons() {
    removeNavigationButton("new");
    removeNavigationButton("delete");
}

/*
loadDefaultIDs() {
    fetchOne("SELECT value FROM localSettings WHERE key = 'Water Sample ID';", new FetchCallback() {
        onFetch(result) {
            if(isNull(result)) {
                setFieldValue("Project/Defaults/Water_Sample", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Water Sample ID', '1');", null);
            } else {
                setFieldValue("Project/Defaults/Water_Sample", result.get(0));    
            }
        }
    });
    fetchOne("SELECT value FROM localSettings WHERE key = 'Plant Sample ID';", new FetchCallback() {
        onFetch(result) {
            if(isNull(result)) {
                setFieldValue("Project/Defaults/Plant_Sample", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Plant Sample ID', '1');", null);
            } else {
                setFieldValue("Project/Defaults/Plant_Sample", result.get(0));    
            }
        }
    });
    fetchOne("SELECT value FROM localSettings WHERE key = 'Soil Sample ID';", new FetchCallback() {
        onFetch(result) {
            if(isNull(result)) {
                setFieldValue("Project/Defaults/Soil_Sample", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Soil Sample ID', '1');", null);
            } else {
                setFieldValue("Project/Defaults/Soil_Sample", result.get(0));    
            }
        }
    });
    fetchOne("SELECT value FROM localSettings WHERE key = 'Rock Sample ID';", new FetchCallback() {
        onFetch(result) {if(isNull(result)) {
                setFieldValue("Project/Defaults/Rock_Sample", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Rock Sample ID', '1');", null);
            } else {
                setFieldValue("Project/Defaults/Rock_Sample", result.get(0));    
            }
        }
    });
}

saveDefault(String type) {
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + type + " Sample ID', '" + getFieldValue("Project/Defaults/" + type + "_Sample") + "');", null);
}

validateDefaults() {

}
*/

/* Loads a list view of existing samples. */
loadSearch() {
    type = getFieldValue("Project/Search/Sample_Types");
    fetchAll("select uuid, response from identifierAsSpreadsheet join latestnondeletedArchEnt using (uuid) join aenttype using (aenttypeid) where aenttypename like '%"+type+"%' order by aenttimestamp;",
        new FetchCallback() {
            onFetch(result) {
                if (isNull(result)) {
                    result = new ArrayList();
                    result.add(new NameValuePair("{No_records_found}", ""));
                }
                populateList("Project/Search/Sample_List", result);
            }
        });
}

/* Loads an existing sample for editing. */
loadSample() {
    fetchAll("select aenttypename from identifierAsSpreadsheet join latestnondeletedArchEnt using (uuid) join aenttype using (aenttypeid) where uuid = '" + getListItemValue() + "';",
        new FetchCallback() {
            onFetch(result) {
                if (result.get(0).get(0).equals("Water Sample")) {
                    loadWaterSample();
                } else if (result.get(0).get(0).equals("Plant Sample")) {
                    loadPlantSample();
                } else if (result.get(0).get(0).equals("Soil Sample")) {
                    loadSoilSample();
                } else {
                    loadRockSample();
                }
            }
        });
}

/*** WATER SAMPLE ***/
onEvent("Water_Sample", "show", "addWaterSampleNavigation();resumeAutoSavingWaterSample();");

onEvent("Water_Sample/Basic_Info/Take_GPS", "click", "fillInGPS(\"Water_Sample/Basic_Info/\")");
onEvent("Water_Sample/Basic_Info/Take_Photo", "click", "attachPictureTo(\"Water_Sample/Basic_Info/Photos\")");
onEvent("Water_Sample/Basic_Info/Attach_Sketch", "click", "attachFileTo(\"Water_Sample/Basic_Info/Sketches\");");

onEvent("Water_Sample/Codes/Hole_Angle", "click", "populateEstimatedAngle();");

onEvent("Water_Sample/Photolog", "show", "loadRelatedPhotologs(water_sample_id, \"Water_Sample\");");
onEvent("Water_Sample/Photolog/New_Photolog", "click", "newPhotolog(); sample_id = water_sample_id; type = \"Water\";");
onEvent("Water_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

String water_sample_id = null;

/* Creates a new water sample and initialises autosaving. */
newWaterSample() {
    newTabGroup("Water_Sample");
    water_sample_id = null;
    setTimestamp("Water_Sample/Basic_Info/Timestamp");
    setFieldValue("Water_Sample/Basic_Info/Author_Name", getFieldValue("Project/Start/Author_Name"));
    setFieldValue("Water_Sample/Basic_Info/Station_Deposit", getFieldValue("Project/Start/Station_Deposit"));
    setFieldValue("Water_Sample/Basic_Info/Project", getFieldValue("Project/Start/Project"));
    setFieldValue("Water_Sample/Basic_Info/Area", getFieldValue("Project/Start/Area"));
    srid = Integer.parseInt(getModuleSrid());
    if(srid >= 28349 && srid <= 29356) {
        setFieldValue("Water_Sample/Basic_Info/SRID", getModuleSrid());
    } else {
        setFieldValue("Water_Sample/Basic_Info/SRID", "28350");
    }
    setFieldValue("Water_Sample/Basic_Info/Water_Sample_Prefix", sample_prefix);
    fetchOne("SELECT value FROM localSettings WHERE key = 'Water Sample ID';", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) {
                setFieldValue("Water_Sample/Basic_Info/Water_Sample_ID", result.get(0));
            } else {
                setFieldValue("Water_Sample/Basic_Info/Water_Sample_ID", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Water Sample ID', '1');", null);
            }
            saveTabGroup("Water_Sample", water_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    water_sample_id = uuid;
                    next_id = 1;
                    if(!isNull(result)) {
                        next_id = Integer.parseInt(result.get(0));
                    }
                    next_id++;
                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Water Sample ID', '" + next_id + "');", null);
                    saveTabGroup("Water_Sample", water_sample_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            water_sample_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
}

/* Loads an existing water sample based on the most recent list item selected. */
loadWaterSample() {
    water_sample_id = getListItemValue();
    loadWaterSampleFrom(water_sample_id);
}

/* Loads a specific water sample based on the given ID. */
loadWaterSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("No Water Sample selected");
        return;
    }
    showTabGroup("Water_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            water_sample_id = archentid;
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '" + water_sample_id + "' group by uuid having min(aenttimestamp)", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Water_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '" + water_sample_id + "' group by uuid having min(aenttimestamp);", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Water_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
            toFormat = new java.text.SimpleDateFormat("HH:mm");
            if(!isNull(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"))) {
                Date preferred_ph_time = fromFormat.parse(getFieldValue("Water_Sample/Hidden/Preferred_pH_Time"));
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", toFormat.format(preferred_ph_time));
            }
            if(!isNull(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"))) {
                Date preferred_eh_time = fromFormat.parse(getFieldValue("Water_Sample/Hidden/Preferred_Eh_Time"));
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", toFormat.format(preferred_eh_time));
            }

            fetchOne("select uuid " + 
                    "from latestnondeletedaentvalue " + 
                    "join latestnondeletedarchent using (uuid) " + 
                    "join aenttype using (aenttypeid) " + 
                    "join attributekey using (attributeid)  " + 
                    "where attributename = 'Preferred'  " + 
                    "and aenttypename = 'pH' " + 
                    "and measure=1 " + 
                    "and uuid in (select a.uuid " + 
                            "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " + 
                            "where a.uuid != b.uuid " + 
                            "and b.uuid = " + water_sample_id + "); ", new FetchCallback() {
                onFetch(result) {
                    if(!isNull(result)) {
                        preferred_ph = result.get(0);
                    }
                }
            });

            fetchOne("select uuid " + 
                    "from latestnondeletedaentvalue " + 
                    "join latestnondeletedarchent using (uuid) " + 
                    "join aenttype using (aenttypeid) " + 
                    "join attributekey using (attributeid)  " + 
                    "where attributename = 'Preferred'  " + 
                    "and aenttypename = 'Eh' " + 
                    "and measure=1 " + 
                    "and uuid in (select a.uuid " + 
                            "from latestnondeletedaentreln a join latestnondeletedaentreln b using (relationshipid) " + 
                            "where a.uuid != b.uuid " + 
                            "and b.uuid = " + water_sample_id + "); ", new FetchCallback() {
                onFetch(result) {
                    if(!isNull(result)) { 
                        preferred_eh = result.get(0);
                    }
                }
            });
            saveTabGroup("Water_Sample", water_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    water_sample_id = uuid;
                }

                onError(message) {
                    showToast(message);
                }
            },true);
        }

            onError(message) {
                showToast(message);
            }
    });
}

/* Resumes autosaving for the water sample. */
resumeAutoSavingWaterSample() {
    if(!isNull(water_sample_id)) {
        saveTabGroup("Water_Sample", water_sample_id, null, null, new SaveCallback() {
            onSave(uuid, newRecord) {
                water_sample_id = uuid;
            }

            onError(message) {
                showToast(message);
            }
        },true);
    }
}

/* Generates a confirmation prompt for deleting the current water sample. */
deleteWaterSample() {
    if (!isNull(water_sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Water_Sample}!", "reallyDeleteWaterSample()", "doNotDelete()");
    } else {
        cancelTabGroup("Water_Sample", true);
    }
}

/* Deletes the current water sample. */
reallyDeleteWaterSample() {
    deleteArchEnt(water_sample_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Water_Sample", false);
        }
    });
}

/* Populates all auto-generated fields for the water sample. */
loadWaterSampleAttributes() {
    makeVocab("DropDown", "Water_Sample/Basic_Info/SRID", "SRID");
    makeVocab("CheckBoxGroup", "Water_Sample/Basic_Info/Samples_Collected", "Samples Collected");
    makeVocab("DropDown", "Water_Sample/Codes/Hole_Type", "Hole Type");
    makeVocab("DropDown", "Water_Sample/Codes/Hole_Lining", "Hole Lining");
    makeVocab("RadioGroup", "Water_Sample/Codes/Hole_Open_Closed", "Hole Open or Closed");
    makeVocab("DropDown", "Water_Sample/Codes/Pipes_In_Hole", "Pipes In Hole");
    makeVocab("DropDown", "Water_Sample/Codes/Hole_Angle", "Hole Angle");
    makeVocab("RadioGroup", "Water_Sample/Codes/Outflow_Present", "Outflow Present");
    makeVocab("DropDown", "Water_Sample/Codes/Sampling_Issues", "Sampling Issues");
}

/* Creates sidebar navigation buttons for the water sample. */
addWaterSampleNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Water_Sample}";
        }
        actionOn() {
            if(!isNull(water_sample_id)) {
                newWaterSample();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newWaterSample()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Water_Sample}";
        }
        actionOn() {
            deleteWaterSample();
        }
    }, "danger");
}

/* Populates the estimated angle of the water sample from the database. */
populateEstimatedAngle() {
    fetchOne("select vocabName from vocabulary where vocabid = '"+ getFieldValue("Water_Sample/Codes/Hole_Angle") +"';", new FetchCallback() {
        onFetch(result) {
            if(result.get(0).equals("{Vertical}")) {
                setFieldValue("Water_Sample/Codes/Estimated_Angle", "90");
            }
        }
        onError(message) {
            showToast(message);
        }
    });
}

/*** pH/Eh ***/

ph_count = 0;
eh_count = 0;
preferred_ph = null;
preferred_eh = null;

onEvent("Water_Sample/pH_Eh", "show", "renderpHEhPage();");

/* Renders the pH/Eh tab using dynamic UI. */
renderpHEhPage() {
    executeViewTask(new ViewTask() {
        doTask() {
            removeAllViewsAndContainers("Water_Sample");
            style1 = "orientation";
            style2 = "even";
            createContainer("Water_Sample/pH_Eh/container3", "orientation");
            createContainer("Water_Sample/pH_Eh/child1", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/pH_Container", "even", "Water_Sample/pH_Eh/child1");

            createContainer("Water_Sample/pH_Eh/child2", "even", "Water_Sample/pH_Eh/container3");
            createContainer("Water_Sample/pH_Eh/Eh_Container", "even", "Water_Sample/pH_Eh/child2");
            
            ph_count = 0;
            eh_count = 0;
            ArrayList ph_list = new ArrayList();
            ArrayList eh_list = new ArrayList();
            fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), '|') as response, valuetimestamp\n"+
                "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
                "            FROM latestNonDeletedArchentIdentifiers\n"+
                "           WHERE aenttypename = 'pH'\n"+
                "             AND uuid in (select uuid\n"+
                "                            FROM latestNonDeletedAentReln\n"+
                "                           where relationshipid in (select relationshipid\n"+
                "                                                      FROM latestNonDeletedAentReln\n"+
                "                                                      JOIN relationship using (relationshipid)\n"+
                "                                                      JOIN relntype using (relntypeid)\n"+
                "                                                    where uuid = "+water_sample_id+"\n"+
                "                                                       and relntypeName = 'Water Sample pH')\n"+
                "                             and uuid != "+water_sample_id+")\n"+
                "        ORDER BY uuid, attributename DESC)\n"+
                "group by uuid\n"+
                "order by valuetimestamp, uuid, attributename;",  new FetchCallback() {
                    onFetch(ph_list) {
                        fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), '|') as response, valuetimestamp\n"+
                        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
                        "            FROM latestNonDeletedArchentIdentifiers\n"+
                        "           WHERE aenttypename = 'Eh'\n"+
                        "             AND uuid in (select uuid\n"+
                        "                            FROM latestNonDeletedAentReln\n"+
                        "                           where relationshipid in (select relationshipid\n"+
                        "                                                      FROM latestNonDeletedAentReln\n"+
                        "                                                      JOIN relationship using (relationshipid)\n"+
                        "                                                      JOIN relntype using (relntypeid)\n"+
                        "                                                    where uuid = "+water_sample_id+"\n"+
                        "                                                       and relntypeName = 'Water Sample Eh')\n"+
                        "                             and uuid != "+water_sample_id+")\n"+
                        "        ORDER BY uuid, attributename DESC)\n"+
                        "group by uuid\n"+
                        "order by valuetimestamp, uuid, attributename;",  new FetchCallback() {
                            onFetch(eh_list) {
                                for(ph : ph_list) {
                                    createContainer("Water_Sample/pH_Eh/pH_Row_" + ph_count, "orientation", "Water_Sample/pH_Eh/pH_Container");
                                    createContainer("Water_Sample/pH_Eh/Check_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createContainer("Water_Sample/pH_Eh/pH_Value_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createContainer("Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
                                    createView("Water_Sample/pH_Eh/Check_pH_" + ph_count, createViewDef().createRadioGroup().addChoice("", "1"), "Water_Sample/pH_Eh/Check_pH_Container_" + ph_count);
                                    createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/pH_Value_Container_" + ph_count);
                                    createView("Water_Sample/pH_Eh/Delete_pH_" + ph_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count);

                                    String ph_value = ph.get(1).split("[|]")[0];
                                    String ph_time = ph.get(1).split("[|]")[1];
                                    String ph_id = ph.get(0);
                                    int index = ph_count;

                                    if(ph_id.equals(preferred_ph)) {
                                        setFieldValue("Water_Sample/pH_Eh/Check_pH_" + ph_count, "1");
                                    }
                                    setFieldValue("Water_Sample/pH_Eh/pH_Value_" + ph_count, ph_value);
                                    
                                    onEvent("Water_Sample/pH_Eh/Check_pH_" + ph_count, "click", "setPreferredpH(\"" + ph_id + "\", \"" + ph_value + "\", \"" + ph_time + "\", " + ph_count + ");");
                                    onEvent("Water_Sample/pH_Eh/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\");");
                                    ph_count++;
                                }
                                for(eh : eh_list) {
                                    createContainer("Water_Sample/pH_Eh/Eh_Row_" + eh_count, "orientation", "Water_Sample/pH_Eh/Eh_Container");
                                    createContainer("Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createContainer("Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createContainer("Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Check_Eh_" + eh_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count);
                                    createView("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count);

                                    String eh_value = eh.get(1).split("[|]")[1];
                                    String eh_time = eh.get(1).split("[|]")[0];
                                    String eh_id = eh.get(0);
                                    int index = eh_count;

                                    if(eh_id.equals(preferred_eh)) {
                                        setFieldValue("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "");
                                    }
                                    setFieldValue("Water_Sample/pH_Eh/Eh_Value_" + eh_count, eh_value);

                                    onEvent("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "click", "setPreferredEh(\"" + eh_id + "\", \"" + eh_value + "\", \"" + eh_time + "\", " + eh_count + ");");
                                    onEvent("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, "click", "deleteEh(\"" + eh_id + "\");");
                                    eh_count++;
                                }
                                createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{pH}"), "Water_Sample/pH_Eh/child1");
                                createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{Eh}"), "Water_Sample/pH_Eh/child2");
                                
                                createView("Water_Sample/pH_Eh/New_pH", createViewDef().createButton().setLabel("{Add_New_pH}"), "Water_Sample/pH_Eh/child1");
                                createView("Water_Sample/pH_Eh/New_Eh", createViewDef().createButton().setLabel("{Add_New_Eh}"), "Water_Sample/pH_Eh/child2");
                                onEvent("Water_Sample/pH_Eh/New_pH", "delayclick", "addNewpH(getFieldValue(\"Water_Sample/pH_Eh/pH_Value_\" + ph_count));");
                                onEvent("Water_Sample/pH_Eh/New_Eh", "delayclick", "addNewEh(getFieldValue(\"Water_Sample/pH_Eh/Eh_Value_\" + eh_count));");
                                refreshTabgroupCSS("Water_Sample");
                            }
                            onError(message) {
                                showToast(message);
                            }
                        });
                    }
                    onError(message) {
                        showToast(message);
                    }
                });
        }
    });
}

/* Adds a new pH value, saves the entity and updates the dynamic UI. */
addNewpH(String ph_value) {
    if(isNull(ph_value)) {
        showToast("Please fill in an pH value");
        return;
    }
    List attributes = createAttributeList();
    ph_time = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z").format(new Date());
    attributes.add(createEntityAttribute("pH", null, null, ph_value, null));
    attributes.add(createEntityAttribute("Time", null, null, ph_time, null));

    saveArchEnt(null, "pH", null, attributes, new SaveCallback() {
        onSave(ph_id, newRecord) {
            saveEntitiesToRel("Water Sample pH", water_sample_id, ph_id);
            removeView("Water_Sample/pH_Eh/pH_Value_" + ph_count);
            removeView("Water_Sample/pH_Eh/New_pH");

            createContainer("Water_Sample/pH_Eh/pH_Row_" + ph_count, "orientation", "Water_Sample/pH_Eh/pH_Container");
            createContainer("Water_Sample/pH_Eh/Check_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/pH_Value_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createContainer("Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count, "even", "Water_Sample/pH_Eh/pH_Row_" + ph_count);
            createView("Water_Sample/pH_Eh/Check_pH_" + ph_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_pH_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/pH_Value_Container_" + ph_count);
            createView("Water_Sample/pH_Eh/Delete_pH_" + ph_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_pH_Container_" + ph_count);
            setFieldValue("Water_Sample/pH_Eh/pH_Value_" + ph_count, ph_value);

            int index = ph_count;
            onEvent("Water_Sample/pH_Eh/Check_pH_" + ph_count, "click", "setPreferredpH(\"" + ph_id + "\", \"" + ph_value + "\", \"" + ph_time + "\", " + ph_count + ");");
            onEvent("Water_Sample/pH_Eh/Delete_pH_" + ph_count, "click", "deletepH(\"" + ph_id + "\");");
            ph_count++;

            createView("Water_Sample/pH_Eh/pH_Value_" + ph_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{pH}"), "Water_Sample/pH_Eh/child1");
            createView("Water_Sample/pH_Eh/New_pH", createViewDef().createButton().setLabel("{Add_New_pH}"), "Water_Sample/pH_Eh/child1");
            onEvent("Water_Sample/pH_Eh/New_pH", "delayclick", "addNewpH(getFieldValue(\"Water_Sample/pH_Eh/pH_Value_\" + ph_count));");
            refreshTabgroupCSS("Water_Sample");
        }
    });
}

/* Adds a new Eh value, saves the entity and updates the dynamic UI. */
addNewEh(String eh_value) {
    if(isNull(eh_value)) {
        showToast("Please fill in an Eh value");
        return;
    }
    List attributes = createAttributeList();
    eh_time = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z").format(new Date());
    attributes.add(createEntityAttribute("Eh", null, null, eh_value, null));
    attributes.add(createEntityAttribute("Time", null, null, eh_time, null));

    saveArchEnt(null, "Eh", null, attributes, new SaveCallback() {
        onSave(eh_id, newRecord) {
            saveEntitiesToRel("Water Sample Eh", water_sample_id, eh_id);
            removeView("Water_Sample/pH_Eh/Eh_Value_" + eh_count);
            removeView("Water_Sample/pH_Eh/New_Eh");

            createContainer("Water_Sample/pH_Eh/Eh_Row_" + eh_count, "orientation", "Water_Sample/pH_Eh/Eh_Container");
            createContainer("Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createContainer("Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createContainer("Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count, "even", "Water_Sample/pH_Eh/Eh_Row_" + eh_count);
            createView("Water_Sample/pH_Eh/Check_Eh_" + eh_count, createViewDef().createRadioGroup().addChoice("", ""), "Water_Sample/pH_Eh/Check_Eh_Container_" + eh_count);
            createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setReadOnly(true), "Water_Sample/pH_Eh/Eh_Value_Container_" + eh_count);
            createView("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, createViewDef().createButton().setLabel("X").setStyleCss("faims-danger"), "Water_Sample/pH_Eh/Delete_Eh_Container_" + eh_count);
            setFieldValue("Water_Sample/pH_Eh/Eh_Value_" + eh_count, eh_value);

            int index = eh_count;
            onEvent("Water_Sample/pH_Eh/Check_Eh_" + eh_count, "click", "setPreferredEh(\"" + eh_id + "\", \"" + eh_value + "\", \"" + eh_time + "\", " + eh_count + ");");
            onEvent("Water_Sample/pH_Eh/Delete_Eh_" + eh_count, "click", "deleteEh(\"" + eh_id + "\");");
            eh_count++;

            createView("Water_Sample/pH_Eh/Eh_Value_" + eh_count, createViewDef().createTextField("decimal").setAttributeType("measure").setLabel("{Eh}"), "Water_Sample/pH_Eh/child2");
            createView("Water_Sample/pH_Eh/New_Eh", createViewDef().createButton().setLabel("{Add_New_Eh}"), "Water_Sample/pH_Eh/child2");
            onEvent("Water_Sample/pH_Eh/New_Eh", "delayclick", "addNewEh(getFieldValue(\"Water_Sample/pH_Eh/Eh_Value_\" + eh_count));");
            refreshTabgroupCSS("Water_Sample");
        }
    });
}

/* Sets the preferred pH and time for the given pH ID and saves to the database. */
setPreferredpH(String ph_id, String ph_value, String ph_time, int index) {
    if(ph_id == preferred_ph) return;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, null, null));
    saveArchEnt(preferred_ph, "pH", null, attributes, null);

    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, "1", null));
    saveArchEnt(ph_id, "pH", null, attributes, null);

    preferred_ph = ph_id;
    for(int i = 0; i < ph_count; i++) {
        if(i == index) continue;
        setFieldValue("Water_Sample/pH_Eh/Check_pH_" + i, (String) null);
    }
    fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
    toFormat = new java.text.SimpleDateFormat("HH:mm");
    Date preferred_ph_time = fromFormat.parse(ph_time);
    setFieldValue("Water_Sample/pH_Eh/Preferred_pH", ph_value);
    setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", toFormat.format(preferred_ph_time));
    setFieldValue("Water_Sample/Hidden/Preferred_pH_Time", ph_time);
}

/* Sets the preferred Eh and time for the given Eh ID and saves to the database. */
setPreferredEh(String eh_id, String eh_value, String eh_time, int index) {
    if(eh_id == preferred_eh) return;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, null, null));
    saveArchEnt(preferred_eh, "Eh", null, attributes, null);

    attributes = createAttributeList();
    attributes.add(createEntityAttribute("Preferred", null, null, "1", null));
    saveArchEnt(eh_id, "Eh", null, attributes, null);

    preferred_eh = eh_id;
    for(int i = 0; i < eh_count; i++) {
        if(i == index) continue;
        setFieldValue("Water_Sample/pH_Eh/Check_Eh_" + i, (String) null);
    }
    fromFormat = new java.text.SimpleDateFormat("d-MMM-yy HH:mm:ss z");
    toFormat = new java.text.SimpleDateFormat("HH:mm");
    Date preferred_eh_time = fromFormat.parse(eh_time);
    setFieldValue("Water_Sample/pH_Eh/Preferred_Eh", eh_value);
    setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", toFormat.format(preferred_eh_time));
    setFieldValue("Water_Sample/Hidden/Preferred_Eh_Time", eh_time);
}

/* Generates a confirmation prompt to delete the given pH. */
deletepH(String ph_id) {
    showAlert("Confirm Deletion", "Press OK to Delete this {pH}!", "reallyDeletepH(\"" + ph_id + "\")", "doNotDelete()");
}

/* Deletes the given pH. */
reallyDeletepH(String ph_id) {
    deleteArchEnt(ph_id, new DeleteCallback() {
        onDelete(uuid) {
            if(ph_id == preferred_ph) {
                preferred_ph = null;
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH", "");
                setFieldValue("Water_Sample/pH_Eh/Preferred_pH_Time", "");
                setFieldValue("Water_Sample/Hidden/Preferred_pH_Time", "");
            }
            showTab("Water_Sample/Codes");
            showTab("Water_Sample/pH_Eh");
        }
    });
}

/* Generates a confirmation prompt to delete the given pH. */
deleteEh(String eh_id) {
    showAlert("Confirm Deletion", "Press OK to Delete this {Eh}!", "reallyDeleteEh(\"" + eh_id + "\")", "doNotDelete()");
}

/* Deletes the given Eh. */
reallyDeleteEh(String eh_id) {
    deleteArchEnt(eh_id, new DeleteCallback() {
        onDelete(uuid) {
            if(eh_id == preferred_eh) {
                preferred_eh = null;
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh", "");
                setFieldValue("Water_Sample/pH_Eh/Preferred_Eh_Time", "");
                setFieldValue("Water_Sample/Hidden/Preferred_Eh_Time", "");
            }
            showTab("Water_Sample/Codes");
            showTab("Water_Sample/pH_Eh");
        }
    });
}

/*** PLANT SAMPLE ***/

onEvent("Plant_Sample", "show", "addPlantSampleNavigation();resumeAutoSavingPlantSample();");

onEvent("Plant_Sample/Basic_Info/Take_GPS", "click", "fillInGPS(\"Plant_Sample/Basic_Info/\")");
onEvent("Plant_Sample/Basic_Info/Take_Photo", "click", "attachPictureTo(\"Plant_Sample/Basic_Info/Photos\")");

onEvent("Plant_Sample/Photolog", "show", "loadRelatedPhotologs(plant_sample_id, \"Plant_Sample\");");
onEvent("Plant_Sample/Photolog/New_Photolog", "click", "newPhotolog(); sample_id = plant_sample_id; type = \"Plant\";");
onEvent("Plant_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

String plant_sample_id = null;

/* Creates a new plant sample and initialises autosaving. */
newPlantSample() {
    newTabGroup("Plant_Sample");
    plant_sample_id = null;
    setTimestamp("Plant_Sample/Basic_Info/Timestamp");
    setFieldValue("Plant_Sample/Basic_Info/Author_Name", getFieldValue("Project/Start/Author_Name"));
    setFieldValue("Plant_Sample/Basic_Info/Station_Deposit", getFieldValue("Project/Start/Station_Deposit"));
    setFieldValue("Plant_Sample/Basic_Info/Project", getFieldValue("Project/Start/Project"));
    setFieldValue("Plant_Sample/Basic_Info/Area", getFieldValue("Project/Start/Area"));
    srid = Integer.parseInt(getModuleSrid());
    if(srid >= 28349 && srid <= 29356) {
        setFieldValue("Plant_Sample/Basic_Info/SRID", getModuleSrid());
    } else {
        setFieldValue("Plant_Sample/Basic_Info/SRID", "28350");
    }
    setFieldValue("Plant_Sample/Basic_Info/Plant_Sample_Prefix", sample_prefix);
    fetchOne("SELECT value FROM localSettings WHERE key = 'Plant Sample ID';", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) {
                setFieldValue("Plant_Sample/Basic_Info/Plant_Record_ID", result.get(0));
            } else {
                setFieldValue("Plant_Sample/Basic_Info/Plant_Record_ID", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Plant Sample ID', '1');", null);
            }
            saveTabGroup("Plant_Sample", plant_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    plant_sample_id = uuid;
                    next_id = 1;
                    if(!isNull(result)) {
                        next_id = Integer.parseInt(result.get(0));
                    }
                    next_id++;
                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Plant Sample ID', '" + next_id + "');", null);
                    saveTabGroup("Plant_Sample", plant_sample_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            plant_sample_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
}

/* Loads an existing plant sample based on the most recent list item selected. */
loadPlantSample() {
    plant_sample_id = getListItemValue();
    loadPlantSampleFrom(plant_sample_id);
}

/* Loads a specific plant sample based on the given ID. */
loadPlantSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("No {Plant Sample} selected");
        return;
    }

    showTabGroup("Plant_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            plant_sample_id = archentid;
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '" + plant_sample_id + "' group by uuid having min(aenttimestamp)", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Plant_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '" + plant_sample_id + "' group by uuid having min(aenttimestamp);", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Plant_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            saveTabGroup("Plant_Sample", plant_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    plant_sample_id = uuid;
                }
            }, true);
        }
    });
}

/* Resumes autosaving for the plant sample. */
resumeAutoSavingPlantSample() {
    if(!isNull(plant_sample_id)) {
        saveTabGroup("Plant_Sample", plant_sample_id, null, null, new SaveCallback() {
            onSave(uuid, newRecord) {
                plant_sample_id = uuid;
            }

            onError(message) {
                showToast(message);
            }
        },true);
    }
}

/* Generates a confirmation to delete the current plant sample. */
deletePlantSample() {
    if (!isNull(plant_sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Plant_Sample}!", "reallyDeletePlantSample()", "doNotDelete()");
    } else {
        cancelTabGroup("Plant_Sample", true);
    }
}

/* Deletes the plant sample. */
reallyDeletePlantSample() {
    deleteArchEnt(plant_sample_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Plant_Sample", false);
        }
    });
}

/* Populates all auto-generated fields for the plant sample. */
loadPlantSampleAttributes() {
    makeVocab("DropDown", "Plant_Sample/Basic_Info/SRID", "SRID");
    makeVocab("CheckBoxGroup", "Plant_Sample/Basic_Info/Soil_Description", "Soil Description");
    populateHierarchicalDropDown("Plant_Sample/Basic_Info/Landform_Description", "Landform Description");
}

/* Creates sidebar navigation buttons for the plant sample. */
addPlantSampleNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Plant_Sample}";
        }
        actionOn() {
            if(!isNull(plant_sample_id)) {
                newPlantSample();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newPlantSample()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Plant_Sample}";
        }
        actionOn() {
            deletePlantSample();
        }
    }, "danger");
}


/*** SOIL SAMPLE ***/

onEvent("Soil_Sample", "show", "addSoilSampleNavigation();resumeAutoSavingSoilSample();");

onEvent("Soil_Sample/Basic_Info/Take_GPS", "click", "fillInGPS(\"Soil_Sample/Basic_Info/\")");
onEvent("Soil_Sample/Basic_Info/Take_Photo", "click", "attachPictureTo(\"Soil_Sample/Basic_Info/Photos\")");
onEvent("Soil_Sample/Basic_Info/Attach_Sketch", "click", "attachFileTo(\"Soil_Sample/Basic_Info/Sketches\");");

onEvent("Soil_Sample/Photolog", "show", "loadRelatedPhotologs(soil_sample_id, \"Soil_Sample\");");
onEvent("Soil_Sample/Photolog/New_Photolog", "click", "newPhotolog(); sample_id = soil_sample_id; type = \"Soil\";");
onEvent("Soil_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

String soil_sample_id = null;

/* Createes a new soil sample and initialises autosaving. */
newSoilSample() {
    newTabGroup("Soil_Sample");
    soil_sample_id = null;
    setTimestamp("Soil_Sample/Basic_Info/Timestamp");
    setFieldValue("Soil_Sample/Basic_Info/Author_Name", getFieldValue("Project/Start/Author_Name"));
    setFieldValue("Soil_Sample/Basic_Info/Station_Deposit", getFieldValue("Project/Start/Station_Deposit"));
    setFieldValue("Soil_Sample/Basic_Info/Project", getFieldValue("Project/Start/Project"));
    setFieldValue("Soil_Sample/Basic_Info/Area", getFieldValue("Project/Start/Area"));
    srid = Integer.parseInt(getModuleSrid());
    if(srid >= 28349 && srid <= 29356) {
        setFieldValue("Soil_Sample/Basic_Info/SRID", getModuleSrid());
    } else {
        setFieldValue("Soil_Sample/Basic_Info/SRID", "28350");
    }
    setFieldValue("Soil_Sample/Basic_Info/Soil_Sample_Prefix", sample_prefix);
    fetchOne("SELECT value FROM localSettings WHERE key = 'Soil Sample ID';", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) {
                setFieldValue("Soil_Sample/Basic_Info/Soil_Sample_ID", result.get(0));
            } else {
                setFieldValue("Soil_Sample/Basic_Info/Soil_Sample_ID", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Soil Sample ID', '1');", null);
            }
            saveTabGroup("Soil_Sample", soil_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    soil_sample_id = uuid;
                    next_id = 1;
                    if(!isNull(result)) {
                        next_id = Integer.parseInt(result.get(0));
                    }
                    next_id++;
                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Soil Sample ID', '" + next_id + "');", null);
                    saveTabGroup("Soil_Sample", soil_sample_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            soil_sample_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
}

/* Loads an existing soil sample based on the most recent list item selected. */
loadSoilSample() {
    soil_sample_id = getListItemValue();
    loadSoilSampleFrom(soil_sample_id);
}

/* Loads a specific soil sample based on the given ID. */
loadSoilSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("No {Soil Sample} selected");
        return;
    }

    showTabGroup("Soil_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            soil_sample_id = archentid;
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '" + soil_sample_id + "' group by uuid having min(aenttimestamp)", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Soil_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '" + soil_sample_id + "' group by uuid having min(aenttimestamp);", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Soil_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            saveTabGroup("Soil_Sample", soil_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    soil_sample_id = uuid;
                }
            }, true);
        }
    });
}

/* Resumes autosaving for soil sample. */
resumeAutoSavingSoilSample() {
    if(!isNull(soil_sample_id)) {
        saveTabGroup("Soil_Sample", soil_sample_id, null, null, new SaveCallback() {
            onSave(uuid, newRecord) {
                soil_sample_id = uuid;
            }

            onError(message) {
                showToast(message);
            }
        },true);
    }
}

/* Generates a confirmation to delete the selected soil sample. */
deleteSoilSample() {
    if (!isNull(soil_sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Soil_Sample}!", "reallyDeleteSoilSample()", "doNotDelete()");
    } else {
        cancelTabGroup("Soil_Sample", true);
    }
}

/* Deletes the selected soil sample. */
reallyDeleteSoilSample() {
    deleteArchEnt(soil_sample_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Soil_Sample", false);
        }
    });
}

/* Populates all auto-generated fields for the soil sample. */
loadSoilSampleAttributes() {
    makeVocab("DropDown", "Soil_Sample/Basic_Info/SRID", "SRID");
    makeVocab("RadioGroup", "Soil_Sample/Basic_Info/Lag", "Lag");
    makeVocab("CheckBoxGroup", "Soil_Sample/Basic_Info/Soil_Texture", "Soil_Texture");
    populateHierarchicalDropDown("Soil_Sample/Basic_Info/Geology", "Geology");
    makeVocab("RadioGroup", "Soil_Sample/Basic_Info/Drainage", "Drainage");
    makeVocab("RadioGroup", "Soil_Sample/Basic_Info/Contamination", "Contamination");
    populateHierarchicalDropDown("Soil_Sample/Basic_Info/Landform", "Landform");
}

/* Creates sidebar navigation buttons for the soil sample. */
addSoilSampleNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Soil_Sample}";
        }
        actionOn() {
            if(!isNull(soil_sample_id)) {
                newSoilSample();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newSoilSample()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Soil_Sample}";
        }
        actionOn() {
            deleteSoilSample();
        }
    }, "danger");
}

/*** ROCK SAMPLE ***/

onEvent("Rock_Sample", "show", "addRockSampleNavigation();resumeAutoSavingRockSample();");

onEvent("Rock_Sample/Basic_Info/Take_GPS", "click", "fillInGPS(\"Rock_Sample/Basic_Info/\")");
onEvent("Rock_Sample/Lithological_Info/Take_Photo", "click", "attachPictureTo(\"Rock_Sample/Lithological_Info/Photos\")");
onEvent("Rock_Sample/Lithological_Info/Attach_Sketch", "click", "attachFileTo(\"Rock_Sample/Lithological_Info/Sketches\");");

onEvent("Rock_Sample/Photolog", "show", "loadRelatedPhotologs(rock_sample_id, \"Rock_Sample\");");
onEvent("Rock_Sample/Photolog/New_Photolog", "click", "newPhotolog(); sample_id = rock_sample_id; type = \"Rock\";");
onEvent("Rock_Sample/Photolog/Photolog_List", "click", "loadPhotolog();");

String rock_sample_id = null;

/* Creates a new rock sample and initialises autosaving. */
newRockSample() {
    newTabGroup("Rock_Sample");
    rock_sample_id = null;
    setTimestamp("Rock_Sample/Basic_Info/Timestamp");
    setFieldValue("Rock_Sample/Basic_Info/Author_Name", getFieldValue("Project/Start/Author_Name"));
    setFieldValue("Rock_Sample/Basic_Info/Station_Deposit", getFieldValue("Project/Start/Station_Deposit"));
    setFieldValue("Rock_Sample/Basic_Info/Project", getFieldValue("Project/Start/Project"));
    setFieldValue("Rock_Sample/Basic_Info/Area", getFieldValue("Project/Start/Area"));
    srid = Integer.parseInt(getModuleSrid());
    if(srid >= 28349 && srid <= 29356) {
        setFieldValue("Rock_Sample/Basic_Info/SRID", getModuleSrid());
    } else {
        setFieldValue("Rock_Sample/Basic_Info/SRID", "28350");
    }
    setFieldValue("Rock_Sample/Basic_Info/Rock_Sample_Prefix", sample_prefix);
    fetchOne("SELECT value FROM localSettings WHERE key = 'Rock Sample ID';", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) {
                setFieldValue("Rock_Sample/Basic_Info/Core_ID", result.get(0));
            } else {
                setFieldValue("Rock_Sample/Basic_Info/Core_ID", "1");
                fetchOne("REPLACE INTO localSettings(key, value) VALUES('Rock Sample ID', '1');", null);
            }
            saveTabGroup("Rock_Sample", rock_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    rock_sample_id = uuid;
                    next_id = 1;
                    if(!isNull(result)) {
                        next_id = Integer.parseInt(result.get(0));
                    }
                    next_id++;
                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Rock Sample ID', '" + next_id + "');", null);
                    saveTabGroup("Rock_Sample", rock_sample_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            rock_sample_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
}

/* Loads a rock sample based on the most recent list item selected. */
loadRockSample() {
    rock_sample_id = getListItemValue();
    loadRockSampleFrom(rock_sample_id);
}

/* Loads a rock sample based on the given ID. */
loadRockSampleFrom(archentid) {
    if (isNull(archentid)) {
        showToast("No {Rock_Sample} selected");
        return;
    }

    showTabGroup("Rock_Sample", archentid, new FetchCallback() {
        onFetch(result) {
            rock_sample_id = archentid;
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '" + rock_sample_id + "' group by uuid having min(aenttimestamp)", new FetchCallback() {
                onFetch(username) {
                    setFieldValue("Rock_Sample/Basic_Info/Author_Name", username.get(0));
                }
            });
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '" + rock_sample_id + "' group by uuid having min(aenttimestamp);", new FetchCallback() {
                onFetch(timestamp) {
                    setFieldValue("Rock_Sample/Basic_Info/Timestamp", timestamp.get(0));
                }
            });
            saveTabGroup("Rock_Sample", rock_sample_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    rock_sample_id = uuid;
                }
            }, true);
        }
    });
}

/* Resumes autosaving for the rock sample. */
resumeAutoSavingRockSample() {
    if(!isNull(rock_sample_id)) {
        saveTabGroup("Rock_Sample", rock_sample_id, null, null, new SaveCallback() {
            onSave(uuid, newRecord) {
                rock_sample_id = uuid;
            }

            onError(message) {
                showToast(message);
            }
        },true);
    }
}

/* Generates a confirmation to delete the current rock sample. */
deleteRockSample() {
    if (!isNull(rock_sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Rock_Sample}!", "reallyDeleteRockSample()", "doNotDelete()");
    } else {
        cancelTabGroup("Rock_Sample", true);
    }
}

/* Deletes the current rock sample. */
reallyDeleteRockSample() {
    deleteArchEnt(rock_sample_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Rock_Sample", false);
        }
    });
}

/* Populates all auto-generated fields for the rock sample. */
loadRockSampleAttributes() {
    makeVocab("DropDown", "Rock_Sample/Basic_Info/SRID", "SRID");
    makeVocab("RadioGroup", "Rock_Sample/Measurements/Veins", "Veins");
    makeVocab("RadioGroup", "Rock_Sample/Measurements/Fractures", "Fractures");
    makeVocab("DropDown", "Rock_Sample/Lithological_Info/Lithology", "Lithology");
    makeVocab("DropDown", "Rock_Sample/Lithological_Info/Fineness_Inclusion_Size", "Fineness or Inclusion size");
    makeVocab("DropDown", "Rock_Sample/Lithological_Info/Sorting", "Sorting");
}

/* Creates sidebar navigation buttons for the rock sample. */
addRockSampleNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Rock_Sample}";
        }
        actionOn() {
            if(!isNull(rock_sample_id)) {
                newRockSample();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newRockSample()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Rock_Sample}";
        }
        actionOn() {
            deleteRockSample();
        }
    }, "danger");
}


/*** PHOTOLOG ***/

onEvent("Photolog", "show", "addPhotologNavigation();");
onFocus("Photolog/Photolog/Photo_ID", null, "activateAutoSavePhotolog();");
onEvent("Photolog/Photolog/Back", "click", "showToast(\"Back functionality not implemented yet.\");");

String photolog_id = null;
String sample_id = null;
String type = null;

/* Creates a new photolog for the user to fill out, with the timestamp auto-generated. */
newPhotolog() {
    newTabGroup("Photolog");
    photolog_id = null;
    setTimestamp("Photolog/Photolog/Photo_Timestamp");
}

/* Loads a photolog based on the most recent list item selected. */
loadPhotolog() {
    photolog_id = getListItemValue();
    loadPhotologFrom(photolog_id);
}

/* Loads a photolog based on the given ID. */
loadPhotologFrom(archentid) {
    if (isNull(archentid)) {
        showToast("No {Photolog} selected");
        return;
    }

    showTabGroup("Photolog", archentid, new FetchCallback() {
        onFetch(result) {
            photolog_id = archentid;
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                }
            }, true);
        }
    });
}

/* Activates autosaving for the photolog. */
activateAutoSavePhotolog() {
    if(!isNull(photolog_id) || isNull(getFieldValue("Photolog/Photolog/Photo_ID"))) return;
    saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            saveEntitiesToRel("Sample Photolog", sample_id, photolog_id);
            saveTabGroup("Photolog", photolog_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    photolog_id = uuid;
                    
                }
            }, true);
        }
    });
}

/* Generates a confirmation to delete the current photolog */
deletePhotolog() {
    if (!isNull(photolog_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Photolog}!", "reallyDeletePhotolog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photolog", true);
    }
}

/* Deletes the current photolog. */
reallyDeletePhotolog() {
    deleteArchEnt(photolog_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Photolog", false);
            if(type.equals("Water")) {
                showTab("Water_Sample/Photolog");
            } else if(type.equals("Plant")) {
                showTab("Plant_Sample/Photolog");
            } else if(type.equals("Soil")) {
                showTab("Soil_Sample/Photolog");
            } else {
                showTab("Rock_Sample/Photolog");
            }
        }
    });
}

/* Creates sidebar navigation buttons for the photolog. */
addPhotologNavigation() {
    removeNavigationButton("new");
    removeNavigationButton("delete");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "{New_Photolog}";
        }
        actionOn() {
            if(!isNull(photolog_id)) {
                newPhotolog();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newPhotolog()", "");
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "{Delete_Photolog}";
        }
        actionOn() {
            deletePhotolog();
        }
    }, "danger");
}

/* Populates the photolog list with the existing photologs linked to the given sample ID. */
loadRelatedPhotologs(String related_sample_id, String type) {
    if(!isNull(related_sample_id)) {
        fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' - ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Photolog'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                    where uuid = "+related_sample_id+"\n"+
            "                                                       and relntypeName = 'Sample Photolog')\n"+
            "                             and uuid != "+related_sample_id+"))\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;",  new FetchCallback() {
                onFetch(result) {
                    if(isNull(result)) {
                        result = new ArrayList();
                        result.add(new NameValuePair("{No_records_found}", ""));
                    }
                    populateList(type + "/Photolog/Photolog_List", result);
                }
                onError(message) {
                    showToast(message);
                }
            });     
    } else {
        result = new ArrayList();
        result.add(new NameValuePair("{No_records_found}", ""));
        populateList(type + "/Photolog/Photolog_List", result);
    }    
}

/*** MISC ***/

saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(callback != null) callback.call();
        }
    });
}

// 
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (checkbox, dropdown, radio or list). */
makeVocab(String type, String path, String attrib){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

/* Populates the path specified picture gallery from the database based on the given attribute name. */
makePictureGallery(String path, String attrib) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
        new FetchCallback() {
            onFetch(result) {
                populatePictureGallery(path, result);
            }
        });
}

/* Sets the value of the given view path to the current timestamp. */
setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

/* Informs the user that the delete operation was cancelled. */
doNotDelete() {
    showToast("Delete Cancelled.");
}

/* Autogenerates the value of GPS attributes for the given tab path. */
fillInGPS(String path) {
    Object position = getGPSPosition();
    if (position == null) {
        showToast("GPS Not initialized");
        return;
    }
    Object projPosition = getGPSPositionProjected();
    Double latitude = position.getLatitude();
    Double longitude = position.getLongitude();
    Double northing = projPosition.getLatitude();
    Double easting = projPosition.getLongitude();
    setFieldValue(path+"Latitude", latitude);
    setFieldValue(path+"Longitude", longitude);
    setFieldValue(path+"Northing", northing);
    setFieldValue(path+"Easting", easting);
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

String username = "";
String device = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("Project");
            setFieldValue("Project/Start/Author_Name", username);
        }
    });
}

loadUsers();

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

loadWaterSampleAttributes();
loadPlantSampleAttributes();
loadSoilSampleAttributes();
loadRockSampleAttributes();
