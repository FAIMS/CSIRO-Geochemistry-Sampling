/*************** LOADING AND CREATION OF RECORDS FROM QR CODES ****************/
String SCANNED_IGSN    = "";
long   LAST_PRINT_TIME = 0;
long   MAX_BOUNCE_TIME = 5 * 1000;

String parseIgsnFromUrl(String url) {
  String  match   = "";
  Pattern pattern = Pattern.compile(".+\\/(.+)");
  Matcher matcher = pattern.matcher(url);
  while (matcher.find())
    match = matcher.group(1);

  return match;
}

String parseIgsnToLoadEntity(String igsn) {
  String parsed =
      parsePrefix1 (igsn) + "-"
    + parsePrefix2 (igsn) + "-"
    + parseSampleId(igsn);

  String suffix = parseSuffix(igsn);
  Log.d("suffix", suffix);
  if (!isNull(suffix))
    parsed += "-" + suffix;

  return parsed;
}

String safeDashSplit(String s, int idx) {
  String[] parts = s.split("-");
  if (parts.length > idx) return parts[idx];
  else                    return "";
}

String parsePrefix1(String igsn) {
  return safeDashSplit(igsn, 0);
}

String parsePrefix2(String igsn) {
  Log.d("prefix2", safeDashSplit(igsn, 1));
  return safeDashSplit(igsn, 1);
}

String parseSampleId(String igsn) {
  return safeDashSplit(igsn, 2);
}

String parseSuffix(String igsn) {
  String suffix = safeDashSplit(igsn, 3);
  Log.d("suffix2", suffix);
  Log.d("igsn", igsn);
  suffix = "{" + suffix + "}";

  if ("W".equals(parsePrefix2(igsn)))
    return getVocabId("Water Sample Suffix", suffix);
  if ("S".equals(parsePrefix2(igsn)))
    return getVocabId("Soil Sample Suffix",  suffix);
  if ("CR".equals(parsePrefix2(igsn)))
    return getVocabId("Soil Crust Sample Suffix",  suffix);

  return "";
}

String getIgsn(String tabGroup) {
  String igsn =
        getFieldValue(tabGroup + "/Basic_Info/Sample_Prefix_1") + "-"
      + getFieldValue(tabGroup + "/Basic_Info/Sample_Prefix_2") + "-"
      + getFieldValue(tabGroup + "/Basic_Info/Sample_ID");

  if (SUFFIX_TAB_GROUPS.contains(tabGroup)) {
    igsn += "-"
      + guessArch16nValFromKey(getMenuValue(tabGroup + "/Basic_Info/Suffix"));
  }
  return igsn;
}

String getSampleType(String tabGroup) { // TODO: Test
  if ("Soil_Crust_Sample".equals(tabGroup))
    return "Soil (Crust)";
  else
    return tabGroup.split("_")[0];
}

String prefix2ToType(String prefix2) {
  Map m = new HashMap();
  m.put("W" , "{Water_Sample}"       );
  m.put("V" , "{Vegetation_Sample}"  );
  m.put("R" , "{Rock_Sample}"        );
  m.put("S" , "{Soil_Sample}"        );
  m.put("CR", "{Soil__Crust__Sample}");

  return m.get(prefix2);
}

String getSampleTypeFromIgsn(String igsn) {
  return prefix2ToType(parsePrefix2(igsn));
}

void printLabel() {
  long currentTime = System.currentTimeMillis();
  if (LAST_PRINT_TIME + MAX_BOUNCE_TIME > currentTime) {
    String msg = "";
    msg = "You are doing that too much. Wait %s seconds and try again.";
    msg = replaceFirst(msg, "" + (MAX_BOUNCE_TIME / 1000));
    showToast(msg);
    return;
  }

  triggerAutoSave();

  String tabGroup = getDisplayedTabGroup();

  String igsn       = getIgsn(tabGroup);
  String sampleType = getSampleType(tabGroup);
  String timestamp  = getFieldValue(tabGroup + "/Vars/Timestamp");

  Log.d("printLabel", igsn + " " + sampleType + " " + timestamp);

  String cmd = "";
  cmd += "\r\n^XA^POI";
  cmd += "\r\n^FO500,20^A0,20,20^FDCSIRO^FS";
  cmd += "\r\n^FO460,50";
  cmd += "\r\n^BXN,6,200";
  cmd += "\r\n^FDhttp://igsn.org/{igsn}^FS";
  cmd += "\r\n^FO15,25^A0,90,40^FD{igsn}^FS";
  cmd += "\r\n^FO15,130^A0,60,35^TBN,120,100^FD{sample_type}^FS";
  cmd += "\r\n^FO205,130^A0,60,35^FD{timestamp}^FS";
  cmd += "\r\n^FO0,115^GB430,0,2^FS";
  cmd += "\r\n^FO190,115^GB0,85,2^FS";
  cmd += "\r\n^XZ";
  cmd  = replaceFirst(cmd, "{igsn}", igsn);
  cmd  = replaceFirst(cmd, "{igsn}", igsn);
  cmd  = replaceFirst(cmd, "{sample_type}", sampleType);
  cmd  = replaceFirst(cmd, "{timestamp}", timestamp);
  Log.d("printLabel", cmd);

  writeBluetoothMessage(cmd);
  LAST_PRINT_TIME = currentTime;
}

void scanRecordFromQrCode() {
  scanCode("loadEntityFromScannedIgsn()");
}

void loadEntityFromScannedIgsn() {
  String code = getLastScanContents();
  String igsn = parseIgsnFromUrl(code);
  loadEntityFromIgsn(igsn);
}

void loadEntityFromIgsn(String igsn) {
  if (isNull(igsn)) {
    showWarning("{load_scanned_err_head}", "{load_scanned_err_body}");
    return;
  }

  q  = "";
  q += " SELECT  uuid";
  q += " from (select uuid, measure, '-'||vocabid as vocabid";
  q += "         FROM latestnondeletedaentvalue";
  q += "         JOIN latestnondeletedarchent using (uuid)";
  q += "         JOIN attributekey USING (attributeid)";
  q += "        WHERE attributename IN (";
  q += "                'Sample Prefix 1',";
  q += "                'Sample Prefix 2',";
  q += "                'Sample ID',";
  q += "                'Water Sample Suffix',";
  q += "                'Soil Sample Suffix',";
  q += "                'Soil Crust Sample Suffix')";
  q += "        ORDER BY CASE attributename ";
  q += "                 WHEN 'Sample Prefix 1' THEN 1 ";
  q += "                 WHEN 'Sample Prefix 2' THEN 2 ";
  q += "                 WHEN 'Sample ID'       THEN 3";
  q += "                 ELSE 4 END)";
  q += " GROUP BY uuid";
  q += " HAVING COALESCE(GROUP_CONCAT(measure, '-'),'') ||";
  q += "        COALESCE(GROUP_CONCAT(vocabid, '-'),'') = %s;";

  q  = dbReplaceFirst(q, parseIgsnToLoadEntity(igsn));
  Log.d("", q);

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      print("" + result);
      if (result == null || result.size() == 0)
        createSampleFromIgsn(igsn);
      else
        loadEntityFrom(result.get(0).get(0));
    }
  };

  fetchAll(q, cb);
}

void createSampleFromIgsn(String igsn) {
  String type = getSampleTypeFromIgsn(igsn);

  String head;
  String body;
  String cbOk;
  String cbBad;
  if (isNull(type)) {
    head = "Invalid IGSN";
    body = "The scanned IGSN does not have a valid type.";

    showWarning(head, body);
  } else {
    head  = "New Sample";

    body  = "A sample having the scanned IGSN was not found on this device. A ";
    body += "new {sample_type} with this IGSN will be created instead. Tap ";
    body += " 'OK' to proceed or 'Cancel' otherwise.";

    body  = replaceFirst(body, "{sample_type}", type);

    cbOk  = fun2str("reallyCreateSampleFromIgsn", new Object[]{type, igsn});

    showAlert(head, body, cbOk, cbBad);
  }
}

void reallyCreateSampleFromIgsn(String type, String igsn) {
  SCANNED_IGSN = igsn;
  onClickProjectNewSample(type);
}

void setIgsn() {
  if (isNull(SCANNED_IGSN))
    return;

  String tabGroup = getDisplayedTabGroup();

  String prefix1  = parsePrefix1 (SCANNED_IGSN);
  String prefix2  = parsePrefix2 (SCANNED_IGSN);
  String sampleId = parseSampleId(SCANNED_IGSN);
  String suffix   = parseSuffix  (SCANNED_IGSN);
  SCANNED_IGSN = "";

  setFieldValue(tabGroup + "/Basic_Info/Sample_Prefix_1", prefix1);
  setFieldValue(tabGroup + "/Basic_Info/Sample_Prefix_2", prefix2);
  setFieldValue(tabGroup + "/Basic_Info/Sample_ID",       sampleId);
  if (SUFFIX_TAB_GROUPS.contains(tabGroup))
  setFieldValue(tabGroup + "/Basic_Info/Suffix",          suffix);
}

addOnEvent("Project/Start/Scan_Label", "click", "scanRecordFromQrCode()");

for (String sampleType : SAMPLE_TYPES) {
  String ref = sampleType + "/Basic_Info/Print_Label";
  addOnEvent(ref, "click", "printLabel()");
}

for (String sampleType : SAMPLE_TYPES)
  addOnEvent(sampleType, "create", "setIgsn()", PRECEDENCE_MID-1);
